import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as i,b as s,d as n,a as e,f as t}from"./app-e99c9040.js";const l={},u=s("h1",{id:"working-with-blocks-使用块",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#working-with-blocks-使用块","aria-hidden":"true"},"#"),n(" Working with Blocks 使用块")],-1),r=s("p",null,"Objective-C类定义了一个将数据与相关行为结合在一起的对象。有时，只表示单个任务或行为单元比比一组方法更有意义。",-1),d=s("p",null,[n("Blocks是添加到C、Objective-C和C++的一种语言级特性，允许您创建可以像值一样给方法或函数传递不同代码段。"),s("strong",null,"Blocks是Objective-C对象"),n("，这意味着它们可以被添加到类似NSArray或NSDictionary的集合中。它们还"),s("strong",null,"具有捕获来自封闭范围的值的能力"),n("，使它们类似于其他编程语言中的闭包或lambda函数。")],-1),k={href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Blocks/Articles/00_Introduction.html#//apple_ref/doc/uid/TP40007502",target:"_blank",rel:"noopener noreferrer"},v=t(`<h2 id="block-syntax-block语法" tabindex="-1"><a class="header-anchor" href="#block-syntax-block语法" aria-hidden="true">#</a> Block Syntax Block语法</h2><p>定义块字面上的语法使用的是插入符号（^），如下所示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>    <span class="token operator">^</span><span class="token punctuation">{</span>
         <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;This is a block&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与函数和方法定义一样，大括号表示块的开始和结束。在这个示例中，该块不返回任何值，也不接受任何参数。</p><p>与使用函数指针引用C函数类似，您可以声明一个变量来跟踪一个块，如下所示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">^</span>simpleBlock<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果您不习惯处理C函数指针，这个语法可能看起来有点不寻常。这个示例声明了一个名为simpleBlock的变量，用于引用一个不接受任何参数并且不返回值的块，这意味着该变量可以被赋予上面显示的块字面值，如下所示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>    simpleBlock <span class="token operator">=</span> <span class="token operator">^</span><span class="token punctuation">{</span>
        <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;This is a block&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这就像任何其他变量赋值一样，因此在右括号后必须用分号终止语句。您还可以将变量声明和赋值组合在一起：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">^</span>simpleBlock<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">^</span><span class="token punctuation">{</span>
        <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;This is a block&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一旦声明并分配了一个块变量，您可以使用它来调用该块：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>simpleBlock();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>注意：如果尝试使用未赋值的变量（nil块变量）调用块，您的应用程序将崩溃。</strong></p><h3 id="blocks-can-capture-values-from-the-enclosing-scope-块可以像方法和函数一样接受参数并返回值" tabindex="-1"><a class="header-anchor" href="#blocks-can-capture-values-from-the-enclosing-scope-块可以像方法和函数一样接受参数并返回值" aria-hidden="true">#</a> Blocks Can Capture Values from the Enclosing Scope 块可以像方法和函数一样接受参数并返回值</h3><p>例如，考虑一个用于返回两个值相乘结果的块的变量：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code> <span class="token keyword">double</span> <span class="token punctuation">(</span><span class="token operator">^</span>multiplyTwoValues<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>相应的块字面值可能如下所示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">^</span> <span class="token punctuation">(</span><span class="token keyword">double</span> firstValue<span class="token punctuation">,</span> <span class="token keyword">double</span> secondValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> firstValue <span class="token operator">*</span> secondValue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>firstValue</code> 和 <code>secondValue</code> 用于引用在调用块时提供的值，就像函数一样。在这个示例中**，返回类型是从块内的返回语句中推断出来的**。</p><p>如果您愿意，<strong>您可以在插入符和参数列表之间明确指定返回类型</strong>：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">^</span> <span class="token keyword">double</span> <span class="token punctuation">(</span><span class="token keyword">double</span> firstValue<span class="token punctuation">,</span> <span class="token keyword">double</span> secondValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> firstValue <span class="token operator">*</span> secondValue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一旦声明和定义了块，您可以像调用函数一样调用它：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">double</span> <span class="token punctuation">(</span><span class="token operator">^</span>multiplyTwoValues<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">)</span> <span class="token operator">=</span>
                              <span class="token operator">^</span><span class="token punctuation">(</span><span class="token keyword">double</span> firstValue<span class="token punctuation">,</span> <span class="token keyword">double</span> secondValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                  <span class="token keyword">return</span> firstValue <span class="token operator">*</span> secondValue<span class="token punctuation">;</span>
                              <span class="token punctuation">}</span><span class="token punctuation">;</span>
 
    <span class="token keyword">double</span> result <span class="token operator">=</span> <span class="token function">multiplyTwoValues</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;The result is %f&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="blocks-can-capture-values-from-the-enclosing-scope-块可以捕获封闭作用域中的值" tabindex="-1"><a class="header-anchor" href="#blocks-can-capture-values-from-the-enclosing-scope-块可以捕获封闭作用域中的值" aria-hidden="true">#</a> Blocks Can Capture Values from the Enclosing Scope 块可以捕获封闭作用域中的值</h3><p>除了包含可执行代码，块还具有从其封闭作用域捕获状态的能力。</p><p>例如，如果您在一个方法中声明块字面值，就可以捕获该方法作用域内可访问的任何值，如下所示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>testMethod <span class="token punctuation">{</span>
    <span class="token keyword">int</span> anInteger <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
 
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">^</span>testBlock<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">^</span><span class="token punctuation">{</span>
        <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;Integer is: %i&quot;</span><span class="token punctuation">,</span> anInteger<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
 
    <span class="token function">testBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，<code>anInteger</code> 在块外部被声明，但在块在定义时捕获了该值。</p><p>除非另有规定，块只捕获值。这意味着如果您在定义块和调用块之间更改变量的外部值，如下所示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>    <span class="token keyword">int</span> anInteger <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
 
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">^</span>testBlock<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">^</span><span class="token punctuation">{</span>
        <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;Integer is: %i&quot;</span><span class="token punctuation">,</span> anInteger<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
 
    anInteger <span class="token operator">=</span> <span class="token number">84</span><span class="token punctuation">;</span>
 
    <span class="token function">testBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>块捕获的值不受影响</strong>。这意味着日志输出仍然会显示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>Integer is<span class="token punctuation">:</span> <span class="token number">42</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这还意味着<strong>块无法更改原始变量的值，甚至无法更改捕获的值</strong>（捕获的值会作为const变量）。</p><h4 id="use-block-variables-to-share-storage-使用-block-变量来共享存储" tabindex="-1"><a class="header-anchor" href="#use-block-variables-to-share-storage-使用-block-变量来共享存储" aria-hidden="true">#</a> Use __block Variables to Share Storage 使用 __block 变量来共享存储</h4><p>如果您需要能够在块内部<strong>更改捕获变量的值</strong>，<strong>可以在原始变量声明上使用 __block 存储类型修饰符</strong>。这意味着该变量存储在原始变量的词法作用域和在该作用域内声明的任何块之间共享的存储空间中。</p><p>例如，您可以像这样重新编写前面的示例：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>__block <span class="token keyword">int</span> anInteger <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
 
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">^</span>testBlock<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">^</span><span class="token punctuation">{</span>
        <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;Integer is: %i&quot;</span><span class="token punctuation">,</span> anInteger<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
 
    anInteger <span class="token operator">=</span> <span class="token number">84</span><span class="token punctuation">;</span>
 
    <span class="token function">testBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为 <code>anInteger</code> 声明为 __block 变量，它的存储空间与块声明共享。这意味着现在日志输出将显示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>Integer is<span class="token punctuation">:</span> <span class="token number">84</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这还意味着块可以修改原始值，例如：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>    __block <span class="token keyword">int</span> anInteger <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
 
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">^</span>testBlock<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">^</span><span class="token punctuation">{</span>
        <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;Integer is: %i&quot;</span><span class="token punctuation">,</span> anInteger<span class="token punctuation">)</span><span class="token punctuation">;</span>
        anInteger <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
 
    <span class="token function">testBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;Value of original variable is now: %i&quot;</span><span class="token punctuation">,</span> anInteger<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这次，输出将显示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>Integer is<span class="token punctuation">:</span> <span class="token number">42</span>
Value of original variable is now<span class="token punctuation">:</span> <span class="token number">100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="you-can-pass-blocks-as-arguments-to-methods-or-functions-您可以将块作为参数传递给方法或函数" tabindex="-1"><a class="header-anchor" href="#you-can-pass-blocks-as-arguments-to-methods-or-functions-您可以将块作为参数传递给方法或函数" aria-hidden="true">#</a> You Can Pass Blocks as Arguments to Methods or Functions 您可以将块作为参数传递给方法或函数</h3><p>本章的前几个示例都是在定义块后立即调用它们。在实践中，程序员通常会将块传递给函数或方法，以便在其他地方调用它。例如，您可以使用<code>Grand Central Dispatch</code>在后台调用块，或者定义一个块来表示将要被重复调用的任务，例如枚举集合。并发和枚举会在本章后面进行了介绍。</p><p>块还用于回调<code>callback</code>，<strong>用于定义任务完成时要执行的代码</strong>。例如，您的应用程序可能需要响应用户操作，创建一个执行复杂任务的对象，例如从Web服务请求信息。由于任务可能需要很长时间，因此在进行任务时应显示某种进度指示器，然后在任务完成后隐藏该指示器。</p><p>使用<code>delegation</code>也可以完成这个任务：您需要创建一个合适的<code>delegate protocol</code>，实现所需的方法，将对象设置为任务的<code>delegate</code>，然后等待它在任务完成后调用对象的<code>delegate</code>方法。</p><p>但是，块使这变得更加容易，因为您可以在启动任务时定义回调行为，如下所示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span> <span class="token punctuation">(</span>IBAction<span class="token punctuation">)</span>fetchRemoteInformation<span class="token punctuation">:</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>sender <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token keyword">self</span> showProgressIndicator<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//显示进度显示器</span>
 
    XYZWebTask <span class="token operator">*</span>task <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//任务</span>
 
    <span class="token punctuation">[</span>task beginTaskWithCallbackBlock<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">{</span><span class="token comment">//开始任务并设置回调</span>
        <span class="token punctuation">[</span><span class="token keyword">self</span> hideProgressIndicator<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,49),b=s("strong",null,"显示进度指示器",-1),m=s("strong",null,"创建任务并告诉它开始",-1),g=s("strong",null,"回调块指定了任务完成后要执行的代码",-1),h=s("strong",null,"此回调块捕获了self，以便在调用时能够调用hideProgressIndicator方法",-1),y=s("strong",null,"捕获self时要小心，因为很容易创建强引用循环",-1),j={href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/WorkingwithBlocks/WorkingwithBlocks.html#//apple_ref/doc/uid/TP40011210-CH8-SW16",target:"_blank",rel:"noopener noreferrer"},f=t(`<p>就代码可读性而言，块使您能够在一个地方清楚地看到在任务完成之前和之后将发生的事情，避免了需要跟踪<code>delegate </code>方法以查找将发生什么的步骤。</p><p>在本示例中所示的beginTaskWithCallbackBlock:方法的声明如下所示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>beginTaskWithCallbackBlock<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">^</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span>callbackBlock<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>(void (^)(void))</code> 指定参数是一个不接受任何参数或返回任何值的块。方法的实现可以按通常的方式调用块：</p><div class="language-objective-c line-numbers-mode" data-ext="objective-c"><pre class="language-objective-c"><code>- (void)beginTaskWithCallbackBlock:(void (^)(void))callbackBlock {
    ...
    callbackBlock();
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>希望参数为一个或多个参数的块的方法参数与块变量一样指定：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>doSomethingWithBlock<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">^</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">)</span>block <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token function">block</span><span class="token punctuation">(</span><span class="token number">21.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="a-block-should-always-be-the-last-argument-to-a-method-块应该始终是方法的最后一个参数" tabindex="-1"><a class="header-anchor" href="#a-block-should-always-be-the-last-argument-to-a-method-块应该始终是方法的最后一个参数" aria-hidden="true">#</a> A Block Should Always Be the Last Argument to a Method 块应该始终是方法的最后一个参数</h4><p>最好就是在方法中<strong>仅使用一个块参数</strong>。如果方法还需要其他非块参数，那么块应该放在参数列表的最后：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>beginTaskWithName<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>name completion<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">^</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span>callback<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样做可以使在<strong>内联指定块时更容易阅读方法调用</strong>，例如：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">self</span> beginTaskWithName<span class="token punctuation">:</span><span class="token string">@&quot;MyTask&quot;</span> completion<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">{</span>
        <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;The task is complete&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="use-type-definitions-to-simplify-block-syntax-使用类型定义简化块的语法" tabindex="-1"><a class="header-anchor" href="#use-type-definitions-to-simplify-block-syntax-使用类型定义简化块的语法" aria-hidden="true">#</a> Use Type Definitions to Simplify Block Syntax 使用类型定义简化块的语法</h3><p>如果您需要定义具有相同签名的多个块，可以定义自己的类型名以表示指定的签名。</p><p>例如，您可以定义一个不带参数或返回值的简单块的类型，如下所示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">^</span>XYZSimpleBlock<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，您可以在方法参数或创建块变量时使用您自定义的类型：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>XYZSimpleBlock anotherBlock <span class="token operator">=</span> <span class="token operator">^</span><span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>beginFetchWithCallbackBlock<span class="token punctuation">:</span><span class="token punctuation">(</span>XYZSimpleBlock<span class="token punctuation">)</span>callbackBlock <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token function">callbackBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自定义类型在<strong>处理返回块或以其他块作为参数的块时特别有用</strong>。考虑以下示例：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token operator">^</span>complexBlock<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">^</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">^</span>aBlock<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">return</span> <span class="token operator">^</span><span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【编程的本质是套娃又再度体现了】</p><p>complexBlock 变量引用了一个 <strong>接受另一个块作为参数</strong>（aBlock） <strong>并返回另一个块的块</strong>。</p><p>将代码重写为使用类型定义将使其更容易阅读：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token function">XYZSimpleBlock</span> <span class="token punctuation">(</span><span class="token operator">^</span>betterBlock<span class="token punctuation">)</span><span class="token punctuation">(</span>XYZSimpleBlock<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">^</span> <span class="token punctuation">(</span>XYZSimpleBlock aBlock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">return</span> <span class="token operator">^</span><span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过使用类型定义，您可以更清晰地表达块的签名和用途，提高代码的可读性。</p><h3 id="objects-use-properties-to-keep-track-of-blocks-对象使用属性来跟踪块" tabindex="-1"><a class="header-anchor" href="#objects-use-properties-to-keep-track-of-blocks-对象使用属性来跟踪块" aria-hidden="true">#</a> Objects Use Properties to Keep Track of Blocks 对象使用属性来跟踪块</h3><p>定义用于跟踪块的属性的语法类似于块变量：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@interface</span> XYZObject <span class="token punctuation">:</span> NSObject
<span class="token keyword">@property</span> <span class="token punctuation">(</span>copy<span class="token punctuation">)</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">^</span>blockProperty<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">@end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28),w=s("code",null,"copy",-1),_=s("code",null,"property attribute",-1),B=s("strong",null,"因为块需要被复制",-1),x=s("code",null,"property attribute",-1),S={href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Blocks/Articles/00_Introduction.html#//apple_ref/doc/uid/TP40007502",target:"_blank",rel:"noopener noreferrer"},O=t(`<p>块属性的设置或调用方式与任何其他块变量相似：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">self</span><span class="token punctuation">.</span>blockProperty <span class="token operator">=</span> <span class="token operator">^</span><span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">blockProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以使用类型定义来声明块属性，如下所示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">^</span>XYZSimpleBlock<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token keyword">@interface</span> XYZObject <span class="token punctuation">:</span> NSObject
<span class="token keyword">@property</span> <span class="token punctuation">(</span>copy<span class="token punctuation">)</span> XYZSimpleBlock blockProperty<span class="token punctuation">;</span>
<span class="token keyword">@end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="avoid-strong-reference-cycles-when-capturing-self-在捕获self时避免强循环引用" tabindex="-1"><a class="header-anchor" href="#avoid-strong-reference-cycles-when-capturing-self-在捕获self时避免强循环引用" aria-hidden="true">#</a> Avoid Strong Reference Cycles when Capturing self 在捕获self时避免强循环引用</h3><p><strong>如果您需要在块中捕获self</strong>，比如在定义回调块时，重要的是考虑内存管理的影响。</p><p><strong>块会对任何被捕获的对象（包括self）保持强引用</strong>，这意味着如果对象维护一个捕获self的块的副本属性，很容易出现强循环引用，例如：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@interface</span> XYZBlockKeeper <span class="token punctuation">:</span> NSObject
<span class="token keyword">@property</span> <span class="token punctuation">(</span>copy<span class="token punctuation">)</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">^</span>block<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">@end</span>

<span class="token keyword">@implementation</span> XYZBlockKeeper
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>configureBlock <span class="token punctuation">{</span>
    <span class="token keyword">self</span><span class="token punctuation">.</span>block <span class="token operator">=</span> <span class="token operator">^</span><span class="token punctuation">{</span>
        <span class="token punctuation">[</span><span class="token keyword">self</span> doSomething<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 捕获了对self的强引用</span>
                               <span class="token comment">// 创建了强引用循环</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">@end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于这种简单示例，编译器会发出警告，但更复杂的示例可能涉及多个对象之间的强引用创建的循环，这使得更难诊断问题。</p><p>为了避免这个问题，最好的办法是捕获对self的弱引用，如下所示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>configureBlock <span class="token punctuation">{</span>
    XYZBlockKeeper <span class="token operator">*</span> __weak weakSelf <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">;</span>
    <span class="token keyword">self</span><span class="token punctuation">.</span>block <span class="token operator">=</span> <span class="token operator">^</span><span class="token punctuation">{</span>
        <span class="token punctuation">[</span>weakSelf doSomething<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">// capture the weak reference 捕获弱引用</span>
                                  <span class="token comment">// to avoid the reference cycle</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过捕获对self的弱指针，块将不会强引用对XYZBlockKeeper对象的强引用。<strong>如果该对象在调用块之前被释放，weakSelf指针将被简单地设置为nil</strong>。这有助于避免强引用循环问题。</p><h2 id="blocks-can-simplify-enumeration-块可以简化枚举" tabindex="-1"><a class="header-anchor" href="#blocks-can-simplify-enumeration-块可以简化枚举" aria-hidden="true">#</a> Blocks Can Simplify Enumeration 块可以简化枚举</h2><p>【终于到了上一章就心心念念的部分】</p><p>除了一般的完全处理程序<code>completion handlers</code>，许多Cocoa和Cocoa Touch API使用块来简化常见任务，例如集合枚举。例如，NSArray类提供了三个基于块的方法，包括：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>enumerateObjectsUsingBlock<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">^</span><span class="token punctuation">)</span><span class="token punctuation">(</span>id obj<span class="token punctuation">,</span> NSUInteger idx<span class="token punctuation">,</span> BOOL <span class="token operator">*</span>stop<span class="token punctuation">)</span><span class="token punctuation">)</span>block<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此方法接受一个参数，即要<strong>为数组中的每个项目调用的块</strong>：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>    NSArray <span class="token operator">*</span>array <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">[</span>array enumerateObjectsUsingBlock<span class="token punctuation">:</span><span class="token operator">^</span> <span class="token punctuation">(</span>id obj<span class="token punctuation">,</span> NSUInteger idx<span class="token punctuation">,</span> BOOL <span class="token operator">*</span>stop<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;Object at index %lu is %@&quot;</span><span class="token punctuation">,</span> idx<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//NSLog(@&quot;索引 %lu 的对象是 %@&quot;, idx, obj);</span>
    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>块本身接受三个参数，<strong>前两个参数分别是当前对象和它在数组中的索引</strong>。第三个参数是指向布尔变量的指针，<strong>您可以使用它来停止枚举</strong>，如下所示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code> <span class="token punctuation">[</span>array enumerateObjectsUsingBlock<span class="token punctuation">:</span><span class="token operator">^</span> <span class="token punctuation">(</span>id obj<span class="token punctuation">,</span> NSUInteger idx<span class="token punctuation">,</span> BOOL <span class="token operator">*</span>stop<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token operator">*</span>stop <span class="token operator">=</span> YES<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您还可以通过使用 <code>enumerateObjectsWithOptions:usingBlock:</code> 方法来自定义枚举。例如，指定 <code>NSEnumerationReverse</code> 选项将以逆序遍历集合。</p><p>如果枚举块中的代码对处理器要求很高，并且可以安全地并发执行，您可以使用 <code>NSEnumerationConcurrent</code> 选项：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>    <span class="token punctuation">[</span>array enumerateObjectsWithOptions<span class="token punctuation">:</span>NSEnumerationConcurrent
                            usingBlock<span class="token punctuation">:</span><span class="token operator">^</span> <span class="token punctuation">(</span>id obj<span class="token punctuation">,</span> NSUInteger idx<span class="token punctuation">,</span> BOOL <span class="token operator">*</span>stop<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>此标志表示枚举块的调用可能会分布在多个线程之间</strong>，如果块代码特别处理器密集，则可能会提供潜在性能提升。请注意，<strong>使用此选项时，枚举顺序是不确定的</strong>。</p><p>NSDictionary类也提供了基于块的方法，包括：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code> 		NSDictionary <span class="token operator">*</span>dictionary <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">[</span>dictionary enumerateKeysAndObjectsUsingBlock<span class="token punctuation">:</span><span class="token operator">^</span> <span class="token punctuation">(</span>id key<span class="token punctuation">,</span> id obj<span class="token punctuation">,</span> BOOL <span class="token operator">*</span>stop<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;key: %@, value: %@&quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这使得枚举每个键-值对更加方便，而不是使用传统的循环。</p><h2 id="blocks-can-simplify-concurrent-tasks-块可以简化并发任务" tabindex="-1"><a class="header-anchor" href="#blocks-can-simplify-concurrent-tasks-块可以简化并发任务" aria-hidden="true">#</a> Blocks Can Simplify Concurrent Tasks 块可以简化并发任务</h2><p>块代表了一个独立的工作单元，将可执行代码与可能从周围范围捕获的状态结合在一起。这使它非常适合在OS X和iOS可用的并发选项之一中进行异步调用。与必须弄清楚如何使用低级机制（如线程）不同，您可以简单地使用块定义任务，然后让系统在处理器资源可用时执行这些任务。</p><p>OS X和iOS提供了各种并发技术，包括两种任务调度机制：操作队列<code>Operation queues</code>和Grand Central Dispatch。这些机制围绕着待调用任务队列的想法。您将块按照需要的顺序添加到队列中，系统在处理器时间和资源可用时会将它们出列以进行调用。</p><p>串行队列一次只允许一个任务执行 - 队列中的下一个任务在前一个任务完成之前不会被出列和调用。而并发队列会尽可能地调用尽可能多的任务，而不必等待前一个任务完成。</p><h3 id="use-block-operations-with-operation-queues-和操作队列一起使用块操作" tabindex="-1"><a class="header-anchor" href="#use-block-operations-with-operation-queues-和操作队列一起使用块操作" aria-hidden="true">#</a> Use Block Operations with Operation Queues 和操作队列一起使用块操作</h3><p>操作队列是Cocoa和Cocoa Touch中用于任务调度的方法。<strong>您可以创建一个NSOperation实例来封装一个工作单元以及任何必要的数据</strong>，<strong>然后将该操作添加到NSOperationQueue以供执行</strong>。</p><p>虽然您可以创建自己的自定义NSOperation子类来实现复杂的任务，但也可以让NSBlockOperation使用块来创建操作，如下所示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSBlockOperation <span class="token operator">*</span>operation <span class="token operator">=</span> <span class="token punctuation">[</span>NSBlockOperation blockOperationWithBlock<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您当然可以手动执行操作（执行这个操作），但通常的做法是<strong>将操作添加到现有操作队列或您自己创建的队列中</strong>，以准备执行：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">// schedule task on main queue:</span>
NSOperationQueue <span class="token operator">*</span>mainQueue <span class="token operator">=</span> <span class="token punctuation">[</span>NSOperationQueue mainQueue<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>mainQueue addOperation<span class="token punctuation">:</span>operation<span class="token punctuation">]</span><span class="token punctuation">;</span>
 
<span class="token comment">// schedule task on background queue:</span>
NSOperationQueue <span class="token operator">*</span>queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSOperationQueue alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>queue addOperation<span class="token punctuation">:</span>operation<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用操作队列，还可以配置操作之间的优先级或依赖关系，例如<strong>指定一个操作应在一组其他操作完成之前不执行</strong>。还可以<strong>通过键-值观察来监视操作状态的变化</strong>，<strong>这使得在任务完成时更新进度指示器等操作变得容易</strong>。</p>`,38),C={href:"https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationObjects/OperationObjects.html#//apple_ref/doc/uid/TP40008091-CH101",target:"_blank",rel:"noopener noreferrer"},N=t(`<h3 id="schedule-blocks-on-dispatch-queues-with-grand-central-dispatch-使用gcd在调度队列上安排块" tabindex="-1"><a class="header-anchor" href="#schedule-blocks-on-dispatch-queues-with-grand-central-dispatch-使用gcd在调度队列上安排块" aria-hidden="true">#</a> Schedule Blocks on Dispatch Queues with Grand Central Dispatch 使用GCD在调度队列上安排块</h3><p>如果您需要为执行任意代码块进行排期，可以直接使用由Grand Central Dispatch（GCD）控制的调度队列。调度队列可以轻松地执行与调用者同步或异步相关的任务，<strong>并按照先进先出的顺序执行这些任务</strong>。</p><p>您可以创建自己的调度队列，也可以使用GCD自动提供的队列之一。如果需要为并发执行安排任务，可以通过使用<code>dispatch_get_global_queue()</code>函数获取对现有队列的引用并指定队列优先级，例如：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>dispatch_queue_t queue <span class="token operator">=</span> <span class="token function">dispatch_get_global_queue</span><span class="token punctuation">(</span>DISPATCH_QUEUE_PRIORITY_DEFAULT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要将块分派到队列上，可以使用<code>dispatch_async()</code>或<code>dispatch_sync()</code>函数。<code>dispatch_async()</code>函数<strong>立即返回</strong>，而不等待块被调用：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token function">dispatch_async</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">{</span>
    <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;Block for asynchronous execution&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//NSLog(@&quot;用于异步执行的块&quot;);</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>dispatch_sync()</code>函数直到块执行完成前不会返回，比如说您可以在<strong>需要并发块在主线程上等待另一个任务完成后才继续</strong>的情况下使用它。</p>`,7),q={href:"https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102",target:"_blank",rel:"noopener noreferrer"},I=s("p",null,"【好像学到了什么不得了的东西】",-1);function T(V,L){const a=p("ExternalLinkIcon");return c(),i("div",null,[u,r,d,s("p",null,[n("本章解释了声明和引用Blocks的语法，并展示了如何使用Blocks来简化诸如集合枚举等常见任务。有关更多信息，请参阅*"),s("a",k,[n("Blocks Programming Topics"),e(a)]),n("*。")]),v,s("p",null,[n("此示例调用方法"),b,n("，然后"),m,n("。"),g,n("；在这种情况下，它只是调用一个方法以隐藏进度指示器。请注意，"),h,n("。"),y,n("，如后面的“在捕获self时避免强引用循环 "),s("a",j,[n("Avoid Strong Reference Cycles when Capturing self"),e(a)]),n("”部分所述。")]),f,s("p",null,[n("注意：您应该将 "),w,n(" 作为"),_,n("来指定，"),B,n("，以便在原始范围之外跟踪其捕获的状态。在使用自动引用计数（ARC）时，您无需担心这一点，因为它将自动发生，但最佳做法是使用"),x,n("来显示所产生的行为。有关更多信息，请参阅“块编程主题 "),s("em",null,[s("a",S,[n("Blocks Programming Topics"),e(a)])]),n("”。")]),O,s("p",null,[n("有关操作和操作队列的更多信息，请参阅「操作队列 "),s("a",C,[n("Operation Queues"),e(a)]),n("」。")]),N,s("p",null,[n("有关调度队列和GCD的更多信息，请参阅 "),s("a",q,[n("Dispatch Queues"),e(a)]),n("。")]),I])}const Y=o(l,[["render",T],["__file","WorkingWithBlocks.html.vue"]]);export{Y as default};
