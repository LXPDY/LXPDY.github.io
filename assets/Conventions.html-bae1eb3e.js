import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,b as n,d as e,a,w as p,f as s}from"./app-b3e0ccc3.js";const d={},u=s('<h1 id="conventions-约定" tabindex="-1"><a class="header-anchor" href="#conventions-约定" aria-hidden="true">#</a> Conventions 约定</h1><p>在使用框架类时，您会注意到Objective-C代码非常易于阅读【这算不算苹果自卖自夸】。类和方法的名称比通用C代码函数或C标准库中的名称要更具描述性，多个单词的名称使用驼峰命名法。当您编写自己的类时，应遵循Cocoa和Cocoa Touch使用的相同约定，以使您的代码更易阅读，无论是对您自己还是对可能需要使用您项目的其他Objective-C开发人员，以及使代码库保持一致。</p><p>此外，许多Objective-C和框架特性要求您遵循严格的命名约定，以确保各种机制能够正常工作。例如，为了与键-值编码（KVC ）或键-值观察（KVO）等技术一起使用，访问器方法的名称必须遵循约定。</p><p>本章涵盖了Cocoa和Cocoa Touch代码中使用的一些最常见的约定，并阐释了名称在整个应用项目（包括其链接的框架）中必须唯一的情况。</p><h2 id="some-names-must-be-unique-across-your-app-一些名称必须在整个应用程序中唯一" tabindex="-1"><a class="header-anchor" href="#some-names-must-be-unique-across-your-app-一些名称必须在整个应用程序中唯一" aria-hidden="true">#</a> Some Names Must Be Unique Across Your App 一些名称必须在整个应用程序中唯一</h2><p>每当您创建新类型、符号或标识符时，您应首先考虑名称必须唯一的范围。有时，这个范围可能是整个应用程序（包括其链接的框架）；有时，范围仅限于封闭的类，甚至仅限于代码块。</p><h3 id="class-names-must-be-unique-across-an-entire-app-类名必须在整个应用程序中唯一" tabindex="-1"><a class="header-anchor" href="#class-names-must-be-unique-across-an-entire-app-类名必须在整个应用程序中唯一" aria-hidden="true">#</a> Class Names Must Be Unique Across an Entire App 类名必须在整个应用程序中唯一</h3><p>Objective-C类名必须在您项目中编写的代码中具有唯一性，还必须在您可能包括的任何框架或捆绑包中具有唯一性。举例来说，您应该避免使用通用的类名，如ViewController或TextParser，因为您所包括在应用程序中的框架可能不遵循约定并创建具有相同名称的类。</p><p>为了保持类名的唯一性，约定是在所有类上使用前缀。您可能已经注意到，Cocoa和Cocoa Touch类名通常以NS或UI开头。这些两个字母的前缀由苹果保留，供框架类使用。当您更多地了解Cocoa和Cocoa Touch时，您将遇到与特定框架相关的各种其他前缀：</p><table><thead><tr><th style="text-align:left;">Prefix</th><th style="text-align:left;">Framework</th></tr></thead><tbody><tr><td style="text-align:left;"><code>NS</code></td><td style="text-align:left;">Foundation (OS X and iOS) and Application Kit (OS X)</td></tr><tr><td style="text-align:left;"><code>UI</code></td><td style="text-align:left;">UIKit (iOS)</td></tr><tr><td style="text-align:left;"><code>AB</code></td><td style="text-align:left;">Address Book</td></tr><tr><td style="text-align:left;"><code>CA</code></td><td style="text-align:left;">Core Animation</td></tr><tr><td style="text-align:left;"><code>CI</code></td><td style="text-align:left;">Core Image</td></tr></tbody></table><p><strong>您自己的类应该使用三个字母的前缀</strong>。这些前缀可能与您公司的名称和应用程序的名称的组合相关，或者与应用程序中的特定组件相关。例如，如果您的公司叫做Whispering Oak，而您正在开发一款名为Zebra Surprise的游戏，您可以选择WZS或WOZ作为您的类前缀。</p><p>您还应该为类命名使用一个名词，以清晰地表示类代表什么，就像Cocoa和Cocoa Touch中的这些示例一样：</p><table><thead><tr><th><code>NSWindow</code></th><th><code>CAAnimation</code></th><th><code>NSWindowController</code></th><th><code>NSManagedObjectContext</code></th></tr></thead></table><p>如果类名需要由多个单词组成，应使用驼峰命名法，<strong>即将每个后续单词的首字母大写</strong>。</p><h3 id="method-names-should-be-expressive-and-unique-within-a-class-方法名应具有表达力-并在类内部保持唯一" tabindex="-1"><a class="header-anchor" href="#method-names-should-be-expressive-and-unique-within-a-class-方法名应具有表达力-并在类内部保持唯一" aria-hidden="true">#</a> Method Names Should Be Expressive and Unique Within a Class 方法名应具有表达力，并在类内部保持唯一</h3><p><strong>一旦您为一个类选择了唯一的名称，您声明的方法只需在该类内部保持唯一</strong>。通常情况下，可以在另一个类中使用与方法同名的名称，例如，要么覆盖超类方法，要么利用多态性。在多个类中执行相同任务的方法应具有相同的名称、返回类型和参数类型。</p><p>方法名没有前缀，<strong>应以小写字母开头</strong>；多个单词之间使用驼峰命名法，就像NSString类中的这些示例一样：</p><table><thead><tr><th><code>length</code></th><th><code>characterAtIndex:</code></th><th><code>lengthOfBytesUsingEncoding:</code></th></tr></thead></table><p>如果一个方法接受一个或多个参数，方法的名称应指示每个参数：</p><table><thead><tr><th><code>substringFromIndex:</code></th><th><code>writeToURL:atomically:encoding:error:</code></th><th><code>enumerateSubstringsInRange:options:usingBlock:</code></th></tr></thead></table><p><strong>方法名的第一部分应指示调用方法的主要意图或结果</strong>。例如，如果一个方法返回一个值，第一个单词通常指示将返回什么，就像上面所示的length、character...和substring...方法。如果需要指示有关返回值的重要信息，可以使用多个单词，就像NSString类中的mutableCopy、capitalizedString或lastPathComponent方法一样。如果一个方法执行一个动作，比如写入磁盘或枚举内容，第一个单词应指示该动作，就像write...和enumerate...方法所示。</p><p><strong>如果一个方法包括一个错误指针参数，用于在发生错误时设置错误，这个参数应该是方法的最后一个参数</strong>。如果一个方法接受一个块参数，<strong>块参数应该是最后一个参数</strong>，<strong>以使任何方法调用在内联指定块时尽可能易于阅读</strong>。出于同样的原因，最好尽量避免使用多个块参数的方法，如果可能的话。</p><p>此外，追求清晰但简洁的方法名也很重要。清晰并不一定意味着冗长，但简洁也不一定能实现清晰，因此最好追求一个折衷的平衡：</p><table><thead><tr><th><code>stringAfterFindingAndReplacingAllOccurrencesOfThisString:withThisString:</code></th><th>过于冗长</th></tr></thead><tbody><tr><td><code>strReplacingStr:str:</code></td><td>过于简洁</td></tr><tr><td><code>stringByReplacingOccurrencesOfString:withString:</code></td><td>恰到好处</td></tr></tbody></table>',24),h={href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/APIAbbreviations.html#//apple_ref/doc/uid/20001285",target:"_blank",rel:"noopener noreferrer"},m=n("h4",{id:"always-use-a-prefix-for-method-names-in-categories-on-framework-classes-在对框架类进行分类以添加方法时-应始终使用方法名前缀",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#always-use-a-prefix-for-method-names-in-categories-on-framework-classes-在对框架类进行分类以添加方法时-应始终使用方法名前缀","aria-hidden":"true"},"#"),e(" Always Use a Prefix for Method Names in Categories on Framework Classes 在对框架类进行分类以添加方法时，应始终使用方法名前缀")],-1),b={href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/CustomizingExistingClasses/CustomizingExistingClasses.html#//apple_ref/doc/uid/TP40011210-CH6-SW4",target:"_blank",rel:"noopener noreferrer"},g=s(`<h3 id="local-variables-must-be-unique-within-the-same-scope-本地变量在相同范围内必须是唯一的" tabindex="-1"><a class="header-anchor" href="#local-variables-must-be-unique-within-the-same-scope-本地变量在相同范围内必须是唯一的" aria-hidden="true">#</a> Local Variables Must Be Unique Within The Same Scope 本地变量在相同范围内必须是唯一的</h3><p>由于Objective-C是C语言的超集，因此C语言的变量作用域规则也适用于Objective-C。本地变量的名称不得与在相同范围内声明的任何其他变量冲突：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>someMethod <span class="token punctuation">{</span>
    <span class="token keyword">int</span> interestingNumber <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">int</span> interestingNumber <span class="token operator">=</span> <span class="token number">44</span><span class="token punctuation">;</span> <span class="token comment">// 不允许</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然C语言允许您使用与封闭范围内已声明的变量相同的名称来声明新的本地变量，例如：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>someMethod <span class="token punctuation">{</span>
    <span class="token keyword">int</span> interestingNumber <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>NSNumber <span class="token operator">*</span>eachNumber <span class="token keyword">in</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> interestingNumber <span class="token operator">=</span> <span class="token punctuation">[</span>eachNumber intValue<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 不建议</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但这会使代码变得混乱和难以阅读，<strong>因此最好的做法是尽量避免这种情况。</strong></p><h2 id="some-method-names-must-follow-conventions" tabindex="-1"><a class="header-anchor" href="#some-method-names-must-follow-conventions" aria-hidden="true">#</a> Some Method Names Must Follow Conventions</h2><p>除了考虑唯一性外，一些重要的方法类型还必须遵循严格的约定。这些约定被Objective-C的一些基础机制、编译器和Runtime系统所使用，同时也被Cocoa和Cocoa Touch中的类行为使用。</p><h3 id="accessor-method-names-must-follow-conventions-访问器方法的名称必须遵循约定" tabindex="-1"><a class="header-anchor" href="#accessor-method-names-must-follow-conventions-访问器方法的名称必须遵循约定" aria-hidden="true">#</a> Accessor Method Names Must Follow Conventions 访问器方法的名称必须遵循约定</h3>`,9),v=n("p",null,[e("除非另有说明，getter方法应使用与属性相同的名称。对于名为firstName的属性，访问器方法也应该被命名为firstName。"),n("strong",null,"这个规则的例外是布尔属性，其getter方法应该以is开头。例如，对于名为paused的属性，getter方法应该被命名为isPaused。")],-1),k=n("p",null,"属性的setter方法应该采用setPropertyName:的形式。对于名为firstName的属性，setter方法应该被命名为setFirstName:；对于名为paused的布尔属性，setter方法应该被命名为setPaused:。",-1),C={href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueCoding/index.html#//apple_ref/doc/uid/10000107i",target:"_blank",rel:"noopener noreferrer"},f=s(`<h3 id="object-creation-method-names-must-follow-conventions-对象创建方法的名称必须遵循约定" tabindex="-1"><a class="header-anchor" href="#object-creation-method-names-must-follow-conventions-对象创建方法的名称必须遵循约定" aria-hidden="true">#</a> Object Creation Method Names Must Follow Conventions 对象创建方法的名称必须遵循约定</h3><p>正如您在之前的章节中所看到的，通常有多种方法可以创建类的实例。您可以使用分配（allocation）和初始化（initialization）的组合，如下所示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSMutableArray <span class="token operator">*</span>array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSMutableArray alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者使用new便捷方法作为显式调用alloc和init的替代方法：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSMutableArray <span class="token operator">*</span>array <span class="token operator">=</span> <span class="token punctuation">[</span>NSMutableArray new<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>某些类还提供类工厂方法：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSMutableArray <span class="token operator">*</span>array <span class="token operator">=</span> <span class="token punctuation">[</span>NSMutableArray array<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>类工厂方法应始终以它们所创建的类的名称（不包括前缀）开头，但对于已存在工厂方法的类的子类有一个例外。例如，对于NSArray类，工厂方法以array开头。NSMutableArray类不定义其自己的类特定工厂方法，因此可变数组的工厂方法仍以array开头。</p>`,8),y={href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/MemoryMgmt.html#//apple_ref/doc/uid/10000011i",target:"_blank",rel:"noopener noreferrer"},x=n("p",null,"完结撒花～",-1);function _(w,N){const t=o("ExternalLinkIcon"),r=o("RouterLink");return c(),l("div",null,[u,n("p",null,[e("在方法名中避免缩写单词，除非您确定该缩写在多种语言和文化中广泛已知。常见的缩写列表请参阅「可接受的缩写和首字母缩写 "),n("a",h,[e("Acceptable Abbreviations and Acronyms"),a(t)]),e("」。")]),m,n("p",null,[e("在为框架类的分类添加方法时，应始终使用方法名前缀，以避免冲突，如在「避免分类方法名称冲突 "),n("a",b,[e("Avoid Category Method Name Clashes"),a(t)]),e("」中所述。")]),g,n("p",null,[e("当您使用@property语法在对象上声明属性，如在"),a(r,{to:"/tec/basic/programWithOC/%E5%AD%90%E7%AB%A0%E8%8A%82/EncapsulatingData.html"},{default:p(()=>[e("封装数据")]),_:1}),e("中所述，编译器会自动生成相关的getter和setter方法（除非您另有指示）。如果由于某种原因需要提供自己的访问器方法实现，重要的是确保使用正确的属性方法名，以便通过点语法调用您的方法。")]),v,k,n("p",null,[e("虽然@property语法允许您指定不同的访问器方法名称，但应只在像布尔属性这样的情况下才这样做。遵循此处描述的约定非常重要，否则诸如键-值编码（使用valueForKey:和setValue:forKey:获取或设置属性的能力）之类的技术将无法正常工作。有关KVC的更多信息，请参阅Key-Value Coding编程指南 "),n("em",null,[n("a",C,[e("Key-Value Coding Programming Guide"),a(t)])]),e("。【已经提到多少次KVC了】")]),f,n("p",null,[e("Objective-C底层有各种内存管理规则，编译器使用这些规则以确保对象在必要时保持有效。尽管通常您无需过多担心这些规则，但编译器根据创建方法的名称来判断应遵循哪个规则。通过工厂方法创建的对象与通过传统分配和初始化或new创建的对象略有不同，这是由于autorelease池块的使用。有关autorelease池块和内存管理的更多信息，请参阅《高级内存管理编程指南 "),n("em",null,[n("a",y,[e("Advanced Memory Management Programming Guide"),a(t)])]),e("》。")]),x])}const j=i(d,[["render",_],["__file","Conventions.html.vue"]]);export{j as default};
