const e=JSON.parse('{"key":"v-8df499ce","path":"/tec/basic/programWithOC/%E5%AD%90%E7%AB%A0%E8%8A%82/WorkWithObject.html","title":"Working with Objects 使用对象","lang":"zh-CN","frontmatter":{"title":"Working with Objects 使用对象","order":2,"author":"Fuyuyu","date":"2023-10-23T00:00:00.000Z","category":["文章翻译"],"tag":["Programming with Objective-C","进阶学习"],"footer":"努力努力再努力","copyright":"文章内容归作者所有，不保证完全正确","comment":true,"description":"Objective-C 应用程序中的大部分工作是通过在对象生态系统中来回发送消息来完成的。【苹果好几次提到这句话了】这些对象中的一些是由Cocoa或Cocoa Touch提供的框架类的实例，另一些是你自己编写的类的实例。 上一章 (DefiningClasses.md)描述了定义类的接口和实现的语法，包括实现响应消息的方法的代码的语法。本章解释了如何向...","head":[["meta",{"property":"og:url","content":"https://fuyuyu.online/tec/basic/programWithOC/%E5%AD%90%E7%AB%A0%E8%8A%82/WorkWithObject.html"}],["meta",{"property":"og:site_name","content":"Fuyuyuの小站"}],["meta",{"property":"og:title","content":"Working with Objects 使用对象"}],["meta",{"property":"og:description","content":"Objective-C 应用程序中的大部分工作是通过在对象生态系统中来回发送消息来完成的。【苹果好几次提到这句话了】这些对象中的一些是由Cocoa或Cocoa Touch提供的框架类的实例，另一些是你自己编写的类的实例。 上一章 (DefiningClasses.md)描述了定义类的接口和实现的语法，包括实现响应消息的方法的代码的语法。本章解释了如何向..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-26T07:48:05.000Z"}],["meta",{"property":"article:author","content":"Fuyuyu"}],["meta",{"property":"article:tag","content":"Programming with Objective-C"}],["meta",{"property":"article:tag","content":"进阶学习"}],["meta",{"property":"article:published_time","content":"2023-10-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-26T07:48:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Working with Objects 使用对象\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-23T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-26T07:48:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Fuyuyu\\"}]}"]]},"headers":[{"level":2,"title":"Objects Send and Receive Messages 对象发送和接收消息","slug":"objects-send-and-receive-messages-对象发送和接收消息","link":"#objects-send-and-receive-messages-对象发送和接收消息","children":[{"level":3,"title":"Use Pointers to Keep Track of Objects 使用指针跟踪对象","slug":"use-pointers-to-keep-track-of-objects-使用指针跟踪对象","link":"#use-pointers-to-keep-track-of-objects-使用指针跟踪对象","children":[]},{"level":3,"title":"You Can Pass Objects for Method Parameters 可以将对象作为方法参数传递","slug":"you-can-pass-objects-for-method-parameters-可以将对象作为方法参数传递","link":"#you-can-pass-objects-for-method-parameters-可以将对象作为方法参数传递","children":[]},{"level":3,"title":"Methods Can Return Values 方法可以返回值","slug":"methods-can-return-values-方法可以返回值","link":"#methods-can-return-values-方法可以返回值","children":[]},{"level":3,"title":"Objects Can Send Messages to Themselves 对象可以向自己发送消息","slug":"objects-can-send-messages-to-themselves-对象可以向自己发送消息","link":"#objects-can-send-messages-to-themselves-对象可以向自己发送消息","children":[]},{"level":3,"title":"Objects Can Call Methods Implemented by Their Superclasses 对象可以调用其超类实现的方法","slug":"objects-can-call-methods-implemented-by-their-superclasses-对象可以调用其超类实现的方法","link":"#objects-can-call-methods-implemented-by-their-superclasses-对象可以调用其超类实现的方法","children":[]}]},{"level":2,"title":"Objects Are Created Dynamically 对象是动态创建的","slug":"objects-are-created-dynamically-对象是动态创建的","link":"#objects-are-created-dynamically-对象是动态创建的","children":[{"level":3,"title":"Initializer Methods Can Take Arguments 初始化方法可以接受参数","slug":"initializer-methods-can-take-arguments-初始化方法可以接受参数","link":"#initializer-methods-can-take-arguments-初始化方法可以接受参数","children":[]},{"level":3,"title":"Class Factory Methods Are an Alternative to Allocation and Initialization 类工厂方法是用来创建对象的替代方法","slug":"class-factory-methods-are-an-alternative-to-allocation-and-initialization-类工厂方法是用来创建对象的替代方法","link":"#class-factory-methods-are-an-alternative-to-allocation-and-initialization-类工厂方法是用来创建对象的替代方法","children":[]},{"level":3,"title":"Use new to Create an Object If No Arguments Are Needed for Initialization 使用new来创建对象，如果不需要初始化参数","slug":"use-new-to-create-an-object-if-no-arguments-are-needed-for-initialization-使用new来创建对象-如果不需要初始化参数","link":"#use-new-to-create-an-object-if-no-arguments-are-needed-for-initialization-使用new来创建对象-如果不需要初始化参数","children":[]},{"level":3,"title":"Literals Offer a Concise Object-Creation Syntax 使用Literals提供简洁的对象创建语法","slug":"literals-offer-a-concise-object-creation-syntax-使用literals提供简洁的对象创建语法","link":"#literals-offer-a-concise-object-creation-syntax-使用literals提供简洁的对象创建语法","children":[]}]},{"level":2,"title":"Objective-C Is a Dynamic Language Objective-C 是一种动态语言","slug":"objective-c-is-a-dynamic-language-objective-c-是一种动态语言","link":"#objective-c-is-a-dynamic-language-objective-c-是一种动态语言","children":[{"level":3,"title":"Determining Equality of Objects 确定对象的相等性","slug":"determining-equality-of-objects-确定对象的相等性","link":"#determining-equality-of-objects-确定对象的相等性","children":[]},{"level":3,"title":"Working with nil 处理nil","slug":"working-with-nil-处理nil","link":"#working-with-nil-处理nil","children":[]}]}],"git":{"createdTime":1698306485000,"updatedTime":1698306485000,"contributors":[{"name":"lx_pdy","email":"1747343655@qq.com","commits":1}]},"readingTime":{"minutes":17.99,"words":5398},"filePathRelative":"tec/basic/programWithOC/子章节/WorkWithObject.md","localizedDate":"2023年10月23日","autoDesc":true}');export{e as data};
