const e=JSON.parse('{"key":"v-a984be2a","path":"/tec/basic/programWithOC/%E5%AD%90%E7%AB%A0%E8%8A%82/EncapsulatingData.html","title":"Encapsulating Data 封装数据","lang":"zh-CN","frontmatter":{"title":"Encapsulating Data 封装数据","order":3,"author":"Fuyuyu","date":"2023-10-24T00:00:00.000Z","category":["文章翻译"],"tag":["Programming with Objective-C","进阶学习"],"footer":"努力努力再努力","copyright":"文章内容归作者所有，不保证完全正确","comment":true,"description":"除了前一章节 (WorkWithObject.md)中介绍的消息传递行为之外，一个对象还通过其属性properties来封装数据。 本章描述了用于声明对象属性的Objective-C语法，并解释了这些属性如何默认通过访问器方法accessor methods与实例变量instance variables的结合来实现的。如果一个属性由实例变量支持，那么在...","head":[["meta",{"property":"og:url","content":"https://fuyuyu.online/tec/basic/programWithOC/%E5%AD%90%E7%AB%A0%E8%8A%82/EncapsulatingData.html"}],["meta",{"property":"og:site_name","content":"Fuyuyuの小站"}],["meta",{"property":"og:title","content":"Encapsulating Data 封装数据"}],["meta",{"property":"og:description","content":"除了前一章节 (WorkWithObject.md)中介绍的消息传递行为之外，一个对象还通过其属性properties来封装数据。 本章描述了用于声明对象属性的Objective-C语法，并解释了这些属性如何默认通过访问器方法accessor methods与实例变量instance variables的结合来实现的。如果一个属性由实例变量支持，那么在..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-26T07:48:05.000Z"}],["meta",{"property":"article:author","content":"Fuyuyu"}],["meta",{"property":"article:tag","content":"Programming with Objective-C"}],["meta",{"property":"article:tag","content":"进阶学习"}],["meta",{"property":"article:published_time","content":"2023-10-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-26T07:48:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Encapsulating Data 封装数据\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-24T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-26T07:48:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Fuyuyu\\"}]}"]]},"headers":[{"level":2,"title":"Properties Encapsulate an Object’s Values 属性封装了对象的值","slug":"properties-encapsulate-an-object-s-values-属性封装了对象的值","link":"#properties-encapsulate-an-object-s-values-属性封装了对象的值","children":[{"level":3,"title":"Declare Public Properties for Exposed Data 声明公共属性以暴露数据","slug":"declare-public-properties-for-exposed-data-声明公共属性以暴露数据","link":"#declare-public-properties-for-exposed-data-声明公共属性以暴露数据","children":[]},{"level":3,"title":"Use Accessor Methods to Get or Set Property Values 使用访问器方法获取或设置属性值","slug":"use-accessor-methods-to-get-or-set-property-values-使用访问器方法获取或设置属性值","link":"#use-accessor-methods-to-get-or-set-property-values-使用访问器方法获取或设置属性值","children":[]},{"level":3,"title":"Dot Syntax Is a Concise Alternative to Accessor Method Calls 点语法是一种简洁的替代访问器方法调用的方式","slug":"dot-syntax-is-a-concise-alternative-to-accessor-method-calls-点语法是一种简洁的替代访问器方法调用的方式","link":"#dot-syntax-is-a-concise-alternative-to-accessor-method-calls-点语法是一种简洁的替代访问器方法调用的方式","children":[]},{"level":3,"title":"Most Properties Are Backed by Instance Variables 大多数属性都由实例变量支持","slug":"most-properties-are-backed-by-instance-variables-大多数属性都由实例变量支持","link":"#most-properties-are-backed-by-instance-variables-大多数属性都由实例变量支持","children":[]},{"level":3,"title":"Access Instance Variables Directly from Initializer Methods 在初始化方法中直接访问实例变量","slug":"access-instance-variables-directly-from-initializer-methods-在初始化方法中直接访问实例变量","link":"#access-instance-variables-directly-from-initializer-methods-在初始化方法中直接访问实例变量","children":[]},{"level":3,"title":"You Can Implement Custom Accessor Methods 您可以实现自定义访问器方法","slug":"you-can-implement-custom-accessor-methods-您可以实现自定义访问器方法","link":"#you-can-implement-custom-accessor-methods-您可以实现自定义访问器方法","children":[]},{"level":3,"title":"Properties Are Atomic by Default 属性默认是原子性的","slug":"properties-are-atomic-by-default-属性默认是原子性的","link":"#properties-are-atomic-by-default-属性默认是原子性的","children":[]}]},{"level":2,"title":"Manage the Object Graph through Ownership and Responsibility 通过所有权和责任来管理对象图","slug":"manage-the-object-graph-through-ownership-and-responsibility-通过所有权和责任来管理对象图","link":"#manage-the-object-graph-through-ownership-and-responsibility-通过所有权和责任来管理对象图","children":[{"level":3,"title":"Avoid Strong Reference Cycles","slug":"avoid-strong-reference-cycles","link":"#avoid-strong-reference-cycles","children":[]},{"level":3,"title":"Use Strong and Weak Declarations to Manage Ownership 使用强引用和弱引用声明来管理所有权","slug":"use-strong-and-weak-declarations-to-manage-ownership-使用强引用和弱引用声明来管理所有权","link":"#use-strong-and-weak-declarations-to-manage-ownership-使用强引用和弱引用声明来管理所有权","children":[]},{"level":3,"title":"Use Unsafe Unretained References for Some Classes 对某些类使用不安全的非持有引用","slug":"use-unsafe-unretained-references-for-some-classes-对某些类使用不安全的非持有引用","link":"#use-unsafe-unretained-references-for-some-classes-对某些类使用不安全的非持有引用","children":[]},{"level":3,"title":"Copy Properties Maintain Their Own Copies 复制属性维护它们自己的副本","slug":"copy-properties-maintain-their-own-copies-复制属性维护它们自己的副本","link":"#copy-properties-maintain-their-own-copies-复制属性维护它们自己的副本","children":[]}]}],"git":{"createdTime":1698306485000,"updatedTime":1698306485000,"contributors":[{"name":"lx_pdy","email":"1747343655@qq.com","commits":1}]},"readingTime":{"minutes":24.65,"words":7394},"filePathRelative":"tec/basic/programWithOC/子章节/EncapsulatingData.md","localizedDate":"2023年10月24日","autoDesc":true}');export{e as data};
