import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as s,c as d,b as o,d as e,a as t,w as l,f as n}from"./app-1ec3945b.js";const p={},h=o("h1",{id:"programming-with-objective-c",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#programming-with-objective-c","aria-hidden":"true"},"#"),e(" Programming with Objective-C")],-1),g=o("h2",{id:"objective-c-编程-前言",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#objective-c-编程-前言","aria-hidden":"true"},"#"),e(" Objective-C 编程 前言")],-1),m={href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Introduction/Introduction.html#//apple_ref/doc/uid/TP40011210",target:"_blank",rel:"noopener noreferrer"},u=n('<p>​ 这一部分是在我学习了Runtime机制之后学习的。苹果推荐在研究这部分之前去阅读它的编程API，然后直接链接到了它现在的开发者文档，但是那些文档十分零散，我难以直接找到一个入手处，所以还是从这里学起吧。</p><h2 id="关于objective-c" tabindex="-1"><a class="header-anchor" href="#关于objective-c" aria-hidden="true">#</a> 关于Objective-C</h2><p>​ Objective-C【以下简称OC】是开发OS X和iOS软件时使用的主要编程语言。它是C语言的<strong>超集</strong>，提供了<strong>面向对象</strong>的能力和动态运行时。OC继承了C的语法、基本类型和流控制语句，并<strong>添加了用于定义类和方法的语法</strong>。它在提供了动态类型和动态绑定的同时，也提供了<code>object graph management</code>和<code>object literals</code>的语言级支持，并将多许职责多推迟到运行时。</p><h3 id="一览" tabindex="-1"><a class="header-anchor" href="#一览" aria-hidden="true">#</a> 一览</h3><p>本文介绍OC语言，并提供了大量的使用示例。您将学习如何创建描述自定义对象的类，并了解如何使用Cocoa和Cocoa Touch提供的一些框架类【Cocoa指的是苹果的操作系统下开发程序的技术框架和各种相关东西的集合，Touch指的是移动端】。尽管<strong>框架类</strong>们和语言是分开的，但它们的使用是紧密地和OC编程结合在一起的，许多语言级的特性依赖于这些类提供的行为。</p><h3 id="an-app-is-built-from-a-network-of-objects-app是由对象网络组成的" tabindex="-1"><a class="header-anchor" href="#an-app-is-built-from-a-network-of-objects-app是由对象网络组成的" aria-hidden="true">#</a> An App Is Built from a Network of Objects APP是由对象网络组成的</h3><p>在为OS X或iOS构建应用程序时，您大部分时间将与对象一起工作。这些对象是Objective-C类的实例，其中一些由Cocoa或Cocoa Touch为您提供，另一些则需要您自己编写。</p><p>如果您要编写自己的类<code>class</code>，请首先提供一个类的描述，详细说明类的实例的公共接口<code>public interface</code>。此接口包括封装相关数据的公共属性<code>public properties</code>【之后这个名词采用原名不翻译】，以及方法<code>methods</code>列表。方法声明指示对象可以接收的<strong>消息</strong>【这里就说明了OC类方法的消息机制并不是普通的调用】，并包括每次调用方法时所需的参数信息。您还需要提供一个类的实现<code>implementation</code>，其中包括接口中声明的每个方法的可执行代码。</p>',8),C={href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/DefiningClasses/DefiningClasses.html#//apple_ref/doc/uid/TP40011210-CH3-SW1",target:"_blank",rel:"noopener noreferrer"},_={href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/WorkingwithObjects/WorkingwithObjects.html#//apple_ref/doc/uid/TP40011210-CH4-SW1",target:"_blank",rel:"noopener noreferrer"},b={href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/EncapsulatingData/EncapsulatingData.html#//apple_ref/doc/uid/TP40011210-CH5-SW1",target:"_blank",rel:"noopener noreferrer"},f=n('<h3 id="categories-extend-existing-classes-分类——扩展现有类" tabindex="-1"><a class="header-anchor" href="#categories-extend-existing-classes-分类——扩展现有类" aria-hidden="true">#</a> Categories Extend Existing Classes 分类——扩展现有类</h3><p>​ 与在现有类的基础上创建全新的类以提供小型的附加功能不同，您可以定义一个分类<code>category</code>【之后这个名词采用原名不翻译】来<strong>向现有类添加自定义行为</strong>。您可以使用category向任何类添加方法，包括您没有原始实现源代码的类【意思是即使这个类是已经由源代码编译完成，我们仍然可以在手中没有源代码的情况下向它添加方法，这就是runtime系统的好处】，如NSString等框架类。</p><p>如果您具有类的原始源代码，可以使用类扩展<code>class extensions</code>来添加新<code>properties</code>或修改现有<code>properties</code>。类扩展通常用于<strong>隐藏私有行为</strong>，<strong>以便在单个源代码文件或自定义框架的私有实现中使用</strong>。【意思是通过类扩张只在单个代码文件中对一个类进行拓展，通常是<code>.m</code>文件】</p>',3),v={href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/CustomizingExistingClasses/CustomizingExistingClasses.html#//apple_ref/doc/uid/TP40011210-CH6-SW1",target:"_blank",rel:"noopener noreferrer"},O=o("h3",{id:"protocols-define-messaging-contracts-协议——定义消息契约",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#protocols-define-messaging-contracts-协议——定义消息契约","aria-hidden":"true"},"#"),e(" Protocols Define Messaging Contracts 协议——定义消息契约")],-1),j=o("p",null,[e("在OC应用程序中，大多数工作都是对象相互发送"),o("strong",null,"消息"),e("所产生的结果。通常，这些消息"),o("strong",null,"由"),e("类接口中明确声明的"),o("strong",null,"方法定义"),e("。然而，有时定义一组"),o("strong",null,"与特定类无直接关联的相关方法"),e("很有用。【所以协议就是为类添加成套方法的一种方法】")],-1),x=o("code",null,"delegate",-1);function k(P,w){const a=r("ExternalLinkIcon"),i=r("RouterLink");return s(),d("div",null,[h,g,o("p",null,[e("​ 为了更好地了解OC这门语言，在通过苹果的文章了解了Runtime系统，并将它的文章系统翻译之后，笔者觉得有必要在已经有了语法和机制学习的基础上，再进一步研究苹果的这篇文章——"),o("a",m,[e("Programming with Objective-C"),t(a)]),e("。这篇文章说新不新，说老不老，是苹果在2014年发布以替换旧的OC编程指南，迄今也已经有了10年的历史。笔者希望通过在翻译阅读这篇文章时，深入了解这门编程语言，系统性地学习它的脉络。")]),u,o("p",null,[e("相关章节："),o("a",C,[e("Defining Classes"),t(a)]),e("定义类， "),o("a",_,[e("Working with Objects"),t(a)]),e("使用对象，"),o("a",b,[e("Encapsulating Data"),t(a)]),e("封装数据")]),f,o("p",null,[e("相关章节：自定义现有类"),o("a",v,[e("Customizing Existing Classes"),t(a)])]),O,j,o("p",null,[e("Objective-C使用协议来定义一组相关方法，例如对象可能调用其"),t(i,{to:"/tec/advanced/Delegation.html"},{default:l(()=>[x]),_:1}),e("的方法，这些方法可以是可选的或必需的。任何类都可以指示它采用一个协议，这意味着它还必须为协议中的所有必需方法提供实现。")])])}const S=c(p,[["render",k],["__file","OC编程指南.html.vue"]]);export{S as default};
