import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as p,c as i,b as a,d as n,a as s,f as o}from"./app-186b5a71.js";const l={},r=o(`<h1 id="working-with-protocols-使用协议" tabindex="-1"><a class="header-anchor" href="#working-with-protocols-使用协议" aria-hidden="true">#</a> Working with Protocols 使用协议</h1><p>在现实世界中，执行公务的人们经常需要在处理特定情况时遵循严格的程序。例如，执法官员在进行询问或收集证据时需要“按照规程<code>follow protocol</code>”操作。</p><p>在面向对象编程的世界中，能够定义对象在特定情境中做出被期望的行为是非常重要的。举个例子，表视图（table view）期望能够与数据源对象进行通信，以了解它需要显示什么内容。这意味着<strong>数据源必须能够响应表视图可能发送的一组特定消息</strong>。【很精妙的讲出了一个使用场景，这是其他外部文章所难以见到的】</p><p>数据源可以是任何类的实例，比如视图控制器（在OS X上是NSViewController的子类，iOS上是UIViewController）或者专门的数据源类，也许只是继承自NSObject。为了让表视图知道一个对象是否适合作为数据源，很重要一件事就是声明对象实现了必要的方法。</p><p>Objective-C 允许你定义协议（<code>protocols</code>），<strong>用于声明在特定情境下所期望使用的方法</strong>。本章将描述定义正式协议的语法，以及如何标记一个类接口来符合某个协议，同时，这意味着该类必须实现协议所需的方法。</p><h2 id="protocols-define-messaging-contracts-协议定义消息契约" tabindex="-1"><a class="header-anchor" href="#protocols-define-messaging-contracts-协议定义消息契约" aria-hidden="true">#</a> Protocols Define Messaging Contracts 协议定义消息契约</h2><p>类接口用于声明与该类相关的方法和属性。相比之下，协议用于声明与任何特定类无关的方法和属性。</p><p>定义协议的基本语法如下：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@protocol</span> ProtocolName
<span class="token comment">// 方法和属性的列表 list of methods and properties</span>
<span class="token keyword">@end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>协议可以包括实例方法<code> instance methods</code>、类方法<code>class methods</code>以及属性<code>properties</code>的声明。</p><p>举个例子，考虑一个用于显示饼图的自定义视图类，如下图所示。</p><figure><img src="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Art/piechartsim_2x.png" alt="A Custom Pie Chart View" tabindex="0" loading="lazy"><figcaption>A Custom Pie Chart View</figcaption></figure><p>为了使视图尽可能可重用，<strong>所有有关信息的决策应该交给另一个对象</strong>，即数据源。这意味着同一视图类的多个实例可以通过与不同数据源通信来显示不同的信息。</p><p>饼图视图所需的最少信息包括分段的数量、每个分段的相对大小以及每个分段的标题。因此，饼图的数据源协议可能如下所示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@protocol</span> XYZPieChartViewDataSource
<span class="token operator">-</span> <span class="token punctuation">(</span>NSUInteger<span class="token punctuation">)</span>numberOfSegments<span class="token punctuation">;</span><span class="token comment">//分段的数量</span>
<span class="token operator">-</span> <span class="token punctuation">(</span>CGFloat<span class="token punctuation">)</span>sizeOfSegmentAtIndex<span class="token punctuation">:</span><span class="token punctuation">(</span>NSUInteger<span class="token punctuation">)</span>segmentIndex<span class="token punctuation">;</span><span class="token comment">//每个分段的相对大小</span>
<span class="token operator">-</span> <span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>titleForSegmentAtIndex<span class="token punctuation">:</span><span class="token punctuation">(</span>NSUInteger<span class="token punctuation">)</span>segmentIndex<span class="token punctuation">;</span><span class="token comment">//每个分段的标题</span>
<span class="token keyword">@end</span>
  <span class="token comment">//注意：此协议使用无符号整数标量值的NSUInteger类型。这种类型将在下一章节中进行更详细的讨论。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>饼图视图类的接口需要一个属性来跟踪数据源对象。这个对象可以是任何类的实例，因此基本属性类型将是<code>id</code>。<strong>唯一已知的是该对象符合相关的协议</strong>。【只需要用一个属性来跟踪即可】</p><p>声明视图的数据源属性的语法如下：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@interface</span> XYZPieChartView <span class="token punctuation">:</span> UIView
<span class="token keyword">@property</span> <span class="token punctuation">(</span>weak<span class="token punctuation">)</span> id <span class="token operator">&lt;</span>XYZPieChartViewDataSource<span class="token operator">&gt;</span> dataSource<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">@end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Objective-C 使用<strong>尖括号来表示符合协议的情况</strong>。下面的示例声明了一个弱引用属性，该属性是一个通用对象指针，符合XYZPieChartViewDataSource协议：</p>`,19),d={href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/EncapsulatingData/EncapsulatingData.html#//apple_ref/doc/uid/TP40011210-CH5-SW22",target:"_blank",rel:"noopener noreferrer"},u=o(`<p>通过在属性上指定符合所需的协议，若尝试将属性设置为不符合协议的对象，即使基本属性类类型是通用的，编译器也会发出警告。无论对象是UIViewController或NSObject的实例都无关紧要。重要的是它符合协议，这意味着饼图视图知道它可以请求所需的信息。</p><h3 id="protocols-can-have-optional-methods-协议可以包含可选方法" tabindex="-1"><a class="header-anchor" href="#protocols-can-have-optional-methods-协议可以包含可选方法" aria-hidden="true">#</a> Protocols Can Have Optional Methods 协议可以包含可选方法</h3><p>默认情况下，协议中声明的所有方法都是必需的方法。这意味着符合协议的任何类都必须实现这些方法。</p><p>但是，也可以在协议中指定可选方法。这些是类只有在需要时才要去实现的方法。</p><p>举个例子，你可能会认为饼图上的标题是可有可无的。如果数据源对象没有实现<code>titleForSegmentAtIndex:</code>方法，视图中就不再会显示标题。</p><p>你可以使用<code>@optional</code>指令<strong>将协议方法标记为可选的</strong>，如下所示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@protocol</span> XYZPieChartViewDataSource
<span class="token operator">-</span> <span class="token punctuation">(</span>NSUInteger<span class="token punctuation">)</span>numberOfSegments<span class="token punctuation">;</span>
<span class="token operator">-</span> <span class="token punctuation">(</span>CGFloat<span class="token punctuation">)</span>sizeOfSegmentAtIndex<span class="token punctuation">:</span><span class="token punctuation">(</span>NSUInteger<span class="token punctuation">)</span>segmentIndex<span class="token punctuation">;</span>
<span class="token operator">@</span>optional
<span class="token operator">-</span> <span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>titleForSegmentAtIndex<span class="token punctuation">:</span><span class="token punctuation">(</span>NSUInteger<span class="token punctuation">)</span>segmentIndex<span class="token punctuation">;</span>
<span class="token keyword">@end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种情况下，只有<code>titleForSegmentAtIndex:</code>方法被标记为可选的。之前的方法没有被指明可选，所以仍然被认为是必需的。</p><p><code>@optional</code>指令适用于跟随它的任何方法，要么直到协议定义的末尾，要么直到遇到另一个指令，比如<code>@required</code>。你可以像下面这样向协议中添加更多方法：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@protocol</span> XYZPieChartViewDataSource
<span class="token operator">-</span> <span class="token punctuation">(</span>NSUInteger<span class="token punctuation">)</span>numberOfSegments<span class="token punctuation">;</span>
<span class="token operator">-</span> <span class="token punctuation">(</span>CGFloat<span class="token punctuation">)</span>sizeOfSegmentAtIndex<span class="token punctuation">:</span><span class="token punctuation">(</span>NSUInteger<span class="token punctuation">)</span>segmentIndex<span class="token punctuation">;</span>
<span class="token operator">@</span>optional
<span class="token operator">-</span> <span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>titleForSegmentAtIndex<span class="token punctuation">:</span><span class="token punctuation">(</span>NSUInteger<span class="token punctuation">)</span>segmentIndex<span class="token punctuation">;</span>
<span class="token operator">-</span> <span class="token punctuation">(</span>BOOL<span class="token punctuation">)</span>shouldExplodeSegmentAtIndex<span class="token punctuation">:</span><span class="token punctuation">(</span>NSUInteger<span class="token punctuation">)</span>segmentIndex<span class="token punctuation">;</span>
<span class="token operator">@</span>required
<span class="token operator">-</span> <span class="token punctuation">(</span>UIColor <span class="token operator">*</span><span class="token punctuation">)</span>colorForSegmentAtIndex<span class="token punctuation">:</span><span class="token punctuation">(</span>NSUInteger<span class="token punctuation">)</span>segmentIndex<span class="token punctuation">;</span>
<span class="token keyword">@end</span>
<span class="token comment">//这个示例定义了一个协议，其中包含三个必需方法和两个可选方法。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="check-that-optional-methods-are-implemented-at-runtime-检查可选方法在运行时是否已实现" tabindex="-1"><a class="header-anchor" href="#check-that-optional-methods-are-implemented-at-runtime-检查可选方法在运行时是否已实现" aria-hidden="true">#</a> Check that Optional Methods Are Implemented at Runtime 检查可选方法在运行时是否已实现</h4><p>如果协议中的一个方法被标记为可选的，<strong>你必须在尝试调用它之前检查对象是否实现了该方法</strong>。</p><p>举个例子，饼图视图可以像这样测试分段标题方法：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>    NSString <span class="token operator">*</span>thisSegmentTitle<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>dataSource respondsToSelector<span class="token punctuation">:</span><span class="token keyword">@selector</span><span class="token punctuation">(</span>titleForSegmentAtIndex<span class="token punctuation">:</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        thisSegmentTitle <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>dataSource titleForSegmentAtIndex<span class="token punctuation">:</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>respondsToSelector:</code> 该方法使用一个选择器（selector）作为参数，选择器是在编译后用于标识方法的标识符。你可以通过使用<code>@selector()</code>指令并指定方法的名称来提供正确的标识符。</p><p>在这个示例中，如果数据源实现了该方法，就会使用标题；否则，标题将保持为nil。</p><p>记住：本地对象变量会自动初始化为nil。</p><p>如果你尝试在一个符合上述协议的 <code>id</code> 对象上调用 <code>respondsToSelector:</code> 方法，你将会收到一个编译器错误——没有已知的实例方法。一旦你使用协议对 <code>id</code> 进行限定，所有的静态类型检查<code>static type-checking</code>都会生效，如果尝试调用未在指定协议中定义的方法都会导致错误。避免编译器错误的一种方法是将自定义协议采用<code>NSObject</code>协议（set the custom protocol to adopt the <code>NSObject</code> protocol）。</p><p>【这段也就是说，如果你的某个类采用了某种协议，那么它只能提供协议中有的方法了，所以在下一文段，苹果建议我们首先符合NSObject的协议，以获得类的基本功能】</p><h3 id="protocols-inherit-from-other-protocols-协议继承自其他协议" tabindex="-1"><a class="header-anchor" href="#protocols-inherit-from-other-protocols-协议继承自其他协议" aria-hidden="true">#</a> Protocols Inherit from Other Protocols 协议继承自其他协议</h3><p>与Objective-C类可以继承自超类一样，你也可以指定一个协议符合另一个协议。</p><p>举个例子，最佳实践是定义你的协议以符合<code>NSObject</code>协议（一些<code>NSObject</code>的行为从其类接口中拆分为一个单独的协议；<code>NSObject</code>类采用<code>NSObject</code>协议）。</p><p>通过指定你自己的协议符合<code>NSObject</code>协议，你表明采用自定义协议的任何对象也将为<code>NSObject</code>协议中的每个方法提供实现。因为你可能在使用<code>NSObject</code>的某个子类，所以你不需要担心为这些<code>NSObject</code>方法提供自己的实现。然而，协议的采用在上面描述的情况下非常有用。</p><p><strong>要指定一个协议符合另一个协议，你需要使用尖括号提供另一个协议的名称</strong>，如下所示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@protocol</span> MyProtocol <span class="token operator">&lt;</span>NSObject<span class="token operator">&gt;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">@end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，任何采用<code>MyProtocol</code>的对象也实际上采用了<code>NSObject</code>协议中声明的所有方法。</p><h2 id="conforming-to-protocols-采用协议" tabindex="-1"><a class="header-anchor" href="#conforming-to-protocols-采用协议" aria-hidden="true">#</a> Conforming to Protocols 采用协议</h2><p>指示一个类采用协议的语法再次使用尖括号，如下所示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@interface</span> MyClass <span class="token punctuation">:</span> NSObject <span class="token operator">&lt;</span>MyProtocol<span class="token operator">&gt;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">@end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这意味着<code>MyClass</code>的任何实例<strong>不仅会响应接口中明确定义的方法</strong>，还提供了<code>MyProtocol</code>中所需方法的实现。在类接口中不需要重新声明协议方法——采用协议就足够了。</p><p>注意：<strong>编译器不会自动合成采用的协议中声明的属性。</strong></p><p>如果需要一个类采用多个协议，可以将它们指定为逗号分隔的列表，如下所示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@interface</span> MyClass <span class="token punctuation">:</span> NSObject <span class="token operator">&lt;</span>MyProtocol<span class="token punctuation">,</span> AnotherProtocol<span class="token punctuation">,</span> YetAnotherProtocol<span class="token operator">&gt;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">@end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示</strong>：如果你发现自己在一个类中采用大量协议，这可能表明你需要通过将必要的行为分布到多个小型类中来重构一个过于复杂的类，每个类都有明确定义的责任。</p><p>对于新的OS X和iOS开发人员来说，一个相对常见的陷阱是使用单个应用程序代理类来包含大部分应用程序的功能（管理底层数据结构，为多个用户界面元素提供数据，以及响应手势和其他用户交互）。随着复杂性的增加，该类变得越来越难以维护。</p><p>一旦你指示采用协议，该类必须至少为每个必需的协议方法提供方法实现，以及你选择的任何可选方法。如果没有实现任何必需方法，编译器会发出警告。</p><p>注意：协议中的方法声明就像任何其他声明一样。实现中的方法名称和参数类型必须与协议中的声明匹配。</p><h3 id="cocoa-and-cocoa-touch-define-a-large-number-of-protocols-cocoa和cocoa-touch定义了许多协议" tabindex="-1"><a class="header-anchor" href="#cocoa-and-cocoa-touch-define-a-large-number-of-protocols-cocoa和cocoa-touch定义了许多协议" aria-hidden="true">#</a> Cocoa and Cocoa Touch Define a Large Number of Protocols Cocoa和Cocoa Touch定义了许多协议</h3><p>协议被Cocoa和Cocoa Touch对象在各种不同的情况下大量使用。例如，表视图类（OS X上的NSTableView和iOS上的UITableView）都使用数据源对象来提供它们所需的信息。<strong>两者都定义了自己的数据源协议</strong>，它的使用方式类似于上面的XYZPieChartViewDataSource协议示例。两个表视图类还允许你设置一个<code>delegate object</code>，该<code>delegate object</code>必须符合相关的NSTableViewDelegate或UITableViewDelegate协议。<code>delegate</code>负责处理用户交互，或者自定义某些条目的显示。</p><p>一些协议用于指示类之间的非层次结构相似性<code>*non-hierarchical similarities* </code>。与特定类要求相关联不同，一些协议与更一般的Cocoa或Cocoa Touch通信机制相关，可能会被多个不相关的类采用。</p><p>例如，许多框架模型对象（如集合类如NSArray和NSDictionary）都支持NSCoding协议，这意味着它们可以编码和解码其属性以进行存档或分发为原始数据。NSCoding使得相对容易将整个对象图写入磁盘，前提是图中的每个对象都采用了该协议。</p>`,41),k={href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/FoundationTypesandCollections/FoundationTypesandCollections.html#//apple_ref/doc/uid/TP40011210-CH7-SW30",target:"_blank",rel:"noopener noreferrer"},m={href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/EncapsulatingData/EncapsulatingData.html#//apple_ref/doc/uid/TP40011210-CH5-SW35",target:"_blank",rel:"noopener noreferrer"},g=o(`<h2 id="protocols-are-used-for-anonymity-协议可用于匿名性" tabindex="-1"><a class="header-anchor" href="#protocols-are-used-for-anonymity-协议可用于匿名性" aria-hidden="true">#</a> Protocols Are Used for Anonymity 协议可用于匿名性</h2><p>协议还在类的类型未知或需要保持隐藏的情况下非常有用。</p><p>举个例子，一个框架的开发人员可能选择不发布框架内部的某个类的接口。因为类的名称未知，框架的用户无法直接创建该类的实例。相反，框架中的另一个对象通常会被指定为返回一个现成的实例，如下所示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>id utility <span class="token operator">=</span> <span class="token punctuation">[</span>frameworkObject anonymousUtility<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为了使这个<code>anonymousUtility</code>对象有用，框架的开发人员可以发布一个<strong>揭示它的某些方法的协议</strong>。即使原始类接口没有提供，<strong>这意味着类保持匿名，该对象仍然可以在有限的方式中使用</strong>：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>id <span class="token operator">&lt;</span>XYZFrameworkUtility<span class="token operator">&gt;</span> utility <span class="token operator">=</span> <span class="token punctuation">[</span>frameworkObject anonymousUtility<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如，如果你正在编写一个使用Core Data框架的iOS应用程序，你可能会遇到<code>NSFetchedResultsController</code>类。这个类旨在帮助数据源对象向iOS的UITableView提供存储的数据，从而方便提供信息，如行数。</p><p>如果你正在使用一个内容分成多个部分的表视图，还可以向<code>NSFetchedResultsController</code>请求相关的部分信息。而不是返回包含这个部分信息的特定类，<code>NSFetchedResultsController</code>类返回一个匿名对象，该对象符合<code>NSFetchedResultsSectionInfo</code>协议。这意味着仍然可以查询该对象以获取所需的信息，例如部分中的行数：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>    NSInteger sectionNumber <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    id <span class="token operator">&lt;</span>NSFetchedResultsSectionInfo<span class="token operator">&gt;</span> sectionInfo <span class="token operator">=</span>
            <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>fetchedResultsController<span class="token punctuation">.</span>sections objectAtIndex<span class="token punctuation">:</span>sectionNumber<span class="token punctuation">]</span><span class="token punctuation">;</span>
    NSInteger numberOfRowsInSection <span class="token operator">=</span> <span class="token punctuation">[</span>sectionInfo numberOfObjects<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>尽管你不知道<code>sectionInfo</code>对象的类，但<code>NSFetchedResultsSectionInfo</code>协议规定它可以响应<code>numberOfObjects</code>消息。</p>`,10);function b(v,h){const e=c("ExternalLinkIcon");return p(),i("div",null,[r,a("p",null,[n("注意：通常情况下，委托（delegate）和数据源（data source）属性会被标记为弱引用，出于前面避免强引用循环（"),a("a",d,[n("Avoid Strong Reference Cycles"),s(e)]),n("）中所描述的对象图管理原因。")]),u,a("p",null,[n("一些Objective-C语言级特性也依赖于协议。例如，要使用快速枚举，集合必须采用NSFastEnumeration协议，如在“快速枚举简化了集合的枚举 "),a("a",k,[n("Fast Enumeration Makes It Easy to Enumerate a Collection"),s(e)]),n("”中所述。此外，一些对象可以被复制，比如当使用具有复制属性的属性时，如在“复制属性维护其自己的副本 "),a("a",m,[n("Copy Properties Maintain Their Own Copies"),s(e)]),n("”中所述。你尝试复制的任何对象必须采用NSCopying协议，否则会导致运行时异常。")]),g])}const j=t(l,[["render",b],["__file","WorkingWithProtocols.html.vue"]]);export{j as default};
