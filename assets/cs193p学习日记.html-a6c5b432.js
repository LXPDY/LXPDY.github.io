import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as p,c as i,b as n,d as s,a as e,f as c}from"./app-ae938d6e.js";const l={},u=n("h1",{id:"cs193p-斯坦福ios开发公开课",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#cs193p-斯坦福ios开发公开课","aria-hidden":"true"},"#"),s(" CS193P 斯坦福iOS开发公开课")],-1),d=n("h2",{id:"_2023-10-31-入门",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2023-10-31-入门","aria-hidden":"true"},"#"),s(" 2023.10.31 入门")],-1),r=n("p",null,"对斯坦福的这门iOS开发课早有耳闻，在完成了Programing with Objective-C的翻译之后，我决定再从开发的层面继续巩固我的iOS开发基础，毕竟学习语言用不到Xcode，只能说纸上谈兵罢了。",-1),k=n("p",null,"这门课我看的是“Season Fall 2013/14”的版本",-1),v={href:"https://www.bilibili.com/video/BV1yP4y1L7pw/?spm_id_from=333.999.0.0&vd_source=b758c014aac476498aacd7a2f68cd629",target:"_blank",rel:"noopener noreferrer"},m={href:"https://cs193p.m2m.at/cs193p-iphone-application-developement/",target:"_blank",rel:"noopener noreferrer"},b=c(`<h3 id="_1-class-logistics-overview-of-ios-mvc-objective-c" tabindex="-1"><a class="header-anchor" href="#_1-class-logistics-overview-of-ios-mvc-objective-c" aria-hidden="true">#</a> 1. Class Logistics, Overview of iOS, MVC, Objective-C</h3><p>第一节课上的比较简单，其中的重点是MVC这个设计模式</p><h2 id="_2023-11-1-11-3" tabindex="-1"><a class="header-anchor" href="#_2023-11-1-11-3" aria-hidden="true">#</a> 2023.11.1-11.3</h2><h3 id="_2-xcode-5" tabindex="-1"><a class="header-anchor" href="#_2-xcode-5" aria-hidden="true">#</a> 2. Xcode 5</h3><p>第二节课从纸牌游戏引入，用Button控件做了一个按钮，作业就是把牌控件默认为背面并从牌堆中随机取牌</p><p>Xocde的控件预览向代码区的拖拽设计确实遥遥领先，而MVC设计模式在Xocde的工程结构里得到了良好的体现</p><p>就是Xocode可控选项比起10年前多太多了，需要将Button控件的Style设置为Default才能正常翻转，而原本的课程中没有这个选项，这大概是我在iOS工程开发上遇到的第一个Bug</p><h2 id="_2023-11-4-11-6" tabindex="-1"><a class="header-anchor" href="#_2023-11-4-11-6" aria-hidden="true">#</a> 2023.11.4-11.6</h2><h3 id="_3-objective-c" tabindex="-1"><a class="header-anchor" href="#_3-objective-c" aria-hidden="true">#</a> 3.Objective-C</h3><p>第三节课大大优化了纸牌游戏，作业上增加了2-3模式的切换，增加了描述、历史拖拽条以及牌的数量。</p><p>这几天实在是各种事情忙，<s>后面的描述和拖拽条的实现直接选择Copy了</s></p><h2 id="_2023-11-8-11-10" tabindex="-1"><a class="header-anchor" href="#_2023-11-8-11-10" aria-hidden="true">#</a> 2023.11.8-11.10</h2><h3 id="_4-foundation-and-attributed-strings" tabindex="-1"><a class="header-anchor" href="#_4-foundation-and-attributed-strings" aria-hidden="true">#</a> 4.Foundation and Attributed Strings</h3><p>讲了一堆Foundation框架提供的功能，以及Attributed Strings这个概念，是一门承上启下的课，具体的应用应该会在后面的课程讲到。</p><p>11.16补充</p><ul><li>在下节课的Demo中，展示了如何通过Attributed Strings来修改<code>Text View</code>中相关选中文字的属性，比如说文字颜色和描边</li></ul><h2 id="_2023-11-16" tabindex="-1"><a class="header-anchor" href="#_2023-11-16" aria-hidden="true">#</a> 2023.11.16</h2><h3 id="_5-view-controller-lifecycle" tabindex="-1"><a class="header-anchor" href="#_5-view-controller-lifecycle" aria-hidden="true">#</a> 5. View Controller Lifecycle</h3><h4 id="view-controller-lifecycle" tabindex="-1"><a class="header-anchor" href="#view-controller-lifecycle" aria-hidden="true">#</a> View Controller Lifecycle</h4><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>viewDidLoad <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token keyword">super</span> viewDidLoad<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// Do any additional setup after loading the view.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这部分的代码用于初始化你的View视图，但是值得注意的是，即使你的控件的对象已经生成并且可以被操作，但是实际上屏幕上还并没有渲染绘制真正的图形，所以课程中提到，在这部分代码中，不应当包含几何操作，视图形状的操作。</li><li>整个view生命周期中，它<strong>只执行一次</strong></li></ul><hr><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>viewWillAppear<span class="token punctuation">:</span><span class="token punctuation">(</span>BOOL<span class="token punctuation">)</span>animated<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>在view<strong>出现时</strong>被调用</li><li>由于应用程序存在各种视图切换，它会被多次调用</li><li>可以放置一些高开销的代码</li><li>可以操作几何（OK），但是翻转屏幕时并不会重新调用这个方法</li></ul><hr><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>viewWillDisappear<span class="token punctuation">:</span><span class="token punctuation">(</span>BOOL<span class="token punctuation">)</span>animated<span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token keyword">super</span> viewWillDisappear<span class="token punctuation">:</span>animated<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token keyword">self</span> rememberScrollPosition<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token keyword">self</span> saveDataToPermanentStore<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在view<strong>消失时</strong>被调用</li><li>由于应用程序存在各种视图切换，它会被多次调用</li><li>可以用于停止view的活动以节省资源</li></ul><hr><p>以上两个方法都有<code>did</code>版本，顾名思义就是在事件发生后被调用：</p><ul><li><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>viewDidAppear<span class="token punctuation">:</span><span class="token punctuation">(</span>BOOL<span class="token punctuation">)</span>animated<span class="token punctuation">;</span>
<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>viewDidDisappear<span class="token punctuation">:</span><span class="token punctuation">(</span>BOOL<span class="token punctuation">)</span>animated<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><p>而对于几何操作，我们有对应的方法：</p><ul><li><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>view<span class="token punctuation">{</span>Will<span class="token punctuation">,</span>Did<span class="token punctuation">}</span>LayoutSubviews<span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><hr><p>对于内存不足的情况：<code>didReceiveMemoryWarning</code></p><ul><li>此时可以让应用释放一些堆上的内存</li></ul><hr><p>更单纯的代码初始化结构（一般不被使用，而是直接通过Xcode生成布局和对应的控制器）</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>setup<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>awakeFromNib<span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token keyword">self</span> setup<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token operator">-</span><span class="token punctuation">(</span>instancetype<span class="token punctuation">)</span>initWithNibName<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>name bundle<span class="token punctuation">:</span><span class="token punctuation">(</span>NSBundle <span class="token operator">*</span><span class="token punctuation">)</span>bundle<span class="token punctuation">{</span>
  <span class="token keyword">self</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">super</span> initWithNibName<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>name bundle<span class="token punctuation">:</span><span class="token punctuation">(</span>NSBundle <span class="token operator">*</span><span class="token punctuation">)</span>bundle<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token keyword">self</span> setup<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>综上所述，一个View Controller Lifecycle是这样的</p><ul><li><p><code>Instantiated</code>（实例化）</p><ul><li>通常从<code>storyboard</code>中导出，后续会提到实例化的多种方法</li></ul></li><li><p><code>awakeFromNib</code>调用</p></li><li><p><code>oulets</code>出口得到设置</p></li><li><p><code>viewDidLoad</code></p><ul><li>通常的初始化代码入口</li></ul></li><li><p>接下来是程序运行时可能发生的情况</p><ul><li>当需要确立几何上的问题 <ul><li><code>viewWillLayoutSubviews:</code>以及<code>viewDidlLayoutSubviews</code></li></ul></li><li>当MVC视图在屏幕上来回切换时，以下方法将会响应 <ul><li>使用它们来完成当视图可视与不可视切换时，几何学上的变动</li><li><code>viewWillAppear:</code>以及<code>viewDidlAppear:</code></li><li><code>viewWillLayoutSubviews:</code>以及<code>viewDidlLayoutSubviews:</code><ul><li>当屏幕发生翻转时，<code>will/did</code> Rotate(翻转) <code>To/Form</code> 的消息将会送达</li></ul></li><li><code>viewWillDisappear:</code>以及<code>viewDidDisappear:</code></li></ul></li><li>当内存不足时 <ul><li><code>didReceiveMemoryWarning</code></li></ul></li></ul><p>生命周期中不存在<code>unload</code>,以上就是所谓的&#39;视图控制器生命周期&#39;</p></li></ul><hr><p>在跟着课程做demo的时候，遇到了与第一节类似的Bug，在敲入代码后，代码运行报错</p><p><code> [[NSMutableAttributedString alloc]initWithString:self.outlineButton.currentTitle];</code></p><p>这一句的<code>initWithString</code>的参数，告诉我是<code>nil</code>.</p><p>考虑到之前有过类似的情况，我马上意识到了在这里，这个Button要不是不能被设置属性，不然就是没初始化。</p><p>在storyboard的设置里略微查找后，我发现端倪所在，这个Button的<code>style</code>是<code>plain</code>,我暂时还不知道它的含义，但是它大概率造成控件的一些属性无法被修改，再把<code>style</code>修改为<code>default</code>，demo就能够正常构建运行了。</p><hr><h4 id="nsnotification" tabindex="-1"><a class="header-anchor" href="#nsnotification" aria-hidden="true">#</a> NSNotification</h4><p>本节课只讲到监听系统的消息的部分</p><p><code>NSNotifications</code></p><ul><li>之前课上PPT中MVC模型中所谓的“radio station”广播站</li></ul><p><code>NSNotificationCenter</code></p><ul><li><p>通过方法<code>[NSNotificationCenter defaultCenter]</code>获取默认的&quot;notification center&quot;</p></li><li><p>如果你想“监听电台”，则需要使用以下message</p><ul><li><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>addObserver<span class="token punctuation">:</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>observer	<span class="token comment">//观察者，也就是想要收听电台消息的对象</span>
  															<span class="token comment">//常见为controller的self</span>
  				selector<span class="token punctuation">:</span><span class="token punctuation">(</span>SEL<span class="token punctuation">)</span>methodToInvokeIfSomethingHappens
            										<span class="token comment">//当广播中的内容发生时调用的</span>
            										<span class="token comment">//observer的seletor</span>
            	name<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>name 
                								<span class="token comment">//电台名字，在某些地方是个常量</span>
           	object<span class="token punctuation">:</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>sender<span class="token punctuation">;</span>	<span class="token comment">//关注特定对象的变化，（填nil则是关注所有变化） </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><p>当广播发送时，你将会接收到信息，而接受者会像自己类似以下的消息进行处理</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>methodToInvokeIfSomethingHappens<span class="token punctuation">:</span><span class="token punctuation">(</span>NSNotification <span class="token operator">*</span><span class="token punctuation">)</span>notification
<span class="token punctuation">{</span>
  <span class="token comment">//NSNotification有以下属性</span>
  notification<span class="token punctuation">.</span>name			<span class="token comment">//广播站的名字，可以用于在文档中查阅</span>
  notification<span class="token punctuation">.</span>object		<span class="token comment">//sender的对象类型</span>
  notification<span class="token punctuation">.</span>userInfo	<span class="token comment">//广播提供的信息</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在结束收听后，要注意关闭广播站</p><ul><li>在demo中，教授选择在<code>viewWillAppear:</code>以及<code>viewDidlAppear:</code>中挂载监听和停止监听</li></ul><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token punctuation">[</span>center removeObserver<span class="token punctuation">:</span><span class="token keyword">self</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//向广播中心发生消息，表示自己停止收听该站</span>
<span class="token comment">//or</span>
<span class="token punctuation">[</span>center removeObserver<span class="token punctuation">:</span><span class="token keyword">self</span> 
 									name<span class="token punctuation">:</span>UIContentSizeCategoryDidChangeNotification 
 								object<span class="token punctuation">:</span>nil<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//停止收听该站的特定内容,推荐使用该写法以防止不小心消除了其他仍然需要监听的消息</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>center以<code>unsafe retained</code>形式保存收听者的指针，也就是说可能会向非法制造发送通知导致程序崩溃</li><li>不过iOS 7中已经会将指针设为nil</li></ul><p>对象结束生命周期后，这个方法会被调用</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>dealloc<span class="token punctuation">{</span>
  <span class="token comment">//但是值得注意的是，在这个方法执行时，程序已经将该对象的属性properties从堆中释放了</span>
  <span class="token comment">//可以在这里解决unsafe retained的问题</span>
	<span class="token punctuation">[</span><span class="token punctuation">[</span>NSNotificationCenter defaultCenter<span class="token punctuation">]</span> removeObserver<span class="token punctuation">:</span><span class="token keyword">self</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>代码示例</p><ul><li><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">//观察程序字体的改变</span>
NSNotificationCenter <span class="token operator">*</span>center <span class="token operator">=</span> <span class="token punctuation">[</span>NSNotificationCenter defaultCenter<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>center addObserver<span class="token punctuation">:</span><span class="token keyword">self</span>
					 selector<span class="token punctuation">:</span><span class="token keyword">@selector</span><span class="token punctuation">(</span>preferredFontsSizeChanged<span class="token punctuation">:</span><span class="token punctuation">)</span>
            	 name<span class="token punctuation">:</span>UIContentSizeCategoryDidChangeNotification
           	 object<span class="token punctuation">:</span>nil<span class="token punctuation">;</span><span class="token punctuation">]</span>

<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>preferredFontsSizeChanged<span class="token punctuation">:</span><span class="token punctuation">(</span>NSNotification <span class="token operator">*</span><span class="token punctuation">)</span>notification<span class="token punctuation">{</span>
  <span class="token comment">//在这里就可以为整个程序重设字体</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="_2023-11-18" tabindex="-1"><a class="header-anchor" href="#_2023-11-18" aria-hidden="true">#</a> 2023.11.18</h2><h4 id="_6-polymorphism-with-controllers-uinavigation-uitabbar" tabindex="-1"><a class="header-anchor" href="#_6-polymorphism-with-controllers-uinavigation-uitabbar" aria-hidden="true">#</a> 6.Polymorphism with Controllers, UINavigation, UITabBar</h4><p>这节课首先展示了利用将ViewController变为抽象类，再使用它的子类来实现代码。</p><p>课程展示了一个ppt动画，当你尝试进入一个页面的详细子界面(比如<code>UINavigationController</code>)时，一个新的MVC系统将会被启用，接管界面内容的控制，而当用户点击返回时，这个新的MVC结构将会从堆中被释放，所以程序员应当在释放前保存用户数据。</p><p>对于界面切换时的动作显示，我们引入一个新概念：</p><p><code>Segues</code></p><ul><li><p>对于<code>UINavigationController</code>在日历软件的体现，则是<code>push</code>和<code>pop</code></p></li><li><p>在Xcode中，通过control拖拽将按钮控件与其他view视图连接在一起</p><ul><li><p>在视图中，两者间就会形成<code>segue</code>的图形，我们需要为它设置标识符以便于在代码中编写与其相关的部分</p></li><li><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">//以伪代码为例</span>
<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>prepareForSegue<span class="token punctuation">:</span><span class="token punctuation">(</span>UIStoryboardSegue <span class="token operator">*</span><span class="token punctuation">)</span>segue sender<span class="token punctuation">:</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>sender<span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">[</span>Segue<span class="token punctuation">.</span>destinationViewController isKindOfClass<span class="token punctuation">:</span><span class="token punctuation">[</span>DosomthingVC class<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    DosomthingVC <span class="token operator">*</span>doVC <span class="token operator">=</span> <span class="token punctuation">(</span>DosomthingVC <span class="token operator">*</span><span class="token punctuation">)</span>segue<span class="token punctuation">.</span>destinationViewController<span class="token punctuation">;</span>
    doVC<span class="token punctuation">.</span>neededInfo <span class="token operator">=</span> ……<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码展示了在通过segue进入子界面时，如何向新视图的VC注入信息，它将在<code>awakeFromNib</code>和<code>viewDidLoad</code>之间执行</p><p>教授抱怨了这种方式，因为此时UI到outlets输出口 还未建立，所以真正渲染仍然需要等到<code>viewDidLoad</code>执行时</p></li><li><p>也可以通过代码阻止segue</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span><span class="token punctuation">(</span>BOOL<span class="token punctuation">)</span>shouldPerformSegueWithIdentifier<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>identifier sender<span class="token punctuation">:</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>sender<span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">[</span>segue<span class="token punctuation">.</span>identifier isEqualToString<span class="token punctuation">:</span><span class="token string">@&quot;DoAParticularThing&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token keyword">self</span> canDoAParticularThing<span class="token punctuation">]</span> <span class="token operator">?</span> YES <span class="token punctuation">:</span> NO<span class="token punctuation">;</span>     
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>但是，在敲完demo代码后，经过调试，我发现以上<code>prepareForSegue:</code>消息并没有被发送，原因是因为我命名时多敲了个空格</p></li></ul><ol start="7"><li><h4 id="views-and-gestures" tabindex="-1"><a class="header-anchor" href="#views-and-gestures" aria-hidden="true">#</a> Views and Gestures</h4></li></ol><p><code>UIView</code></p><ul><li><p>Xocde的常见控件都是在<code>UIView</code>上绘制的，也就是<code>self.view</code>这个属性，用于确立绘制区的范围和大小（它是个矩形）</p><ul><li>你可以选择绘制超出底层view的大小的图形，也可以限制它</li></ul></li><li><p>可以通过代码直接添加</p><ul><li><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>addSubview<span class="token punctuation">:</span><span class="token punctuation">(</span>UIView <span class="token operator">*</span><span class="token punctuation">)</span>aView<span class="token punctuation">;</span> <span class="token comment">//向aView的superview发送添加</span>
<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>removeFromSuperview 				 <span class="token comment">//向aView的superview发送移除</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>初始化<code>UIView</code></p><ul><li><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>setup<span class="token punctuation">{</span>……<span class="token punctuation">}</span>
<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>awakeFromNib<span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token keyword">self</span> setup<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token operator">-</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>initWithFrame<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token punctuation">(</span>GCRect<span class="token punctuation">)</span>aRect<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">self</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">super</span> initWithFrame<span class="token punctuation">:</span>aRect<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token keyword">self</span> setup<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//init等同于initWithFrame:CGRectZero</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><p>下面介绍一下在视图操作中常见的数据结构和类</p><ul><li><code>CGFloat</code><ul><li>常用于位置的表示和计算</li><li>总之是个浮点数</li></ul></li><li><code>CGpoint</code><ul><li>一个C结构体，从它的构造函数也能看得出来,其x,y都是<code>CGFloat</code></li><li><code>CGPoint p = CGPointMake(35.5，34.5);p.x+=20;</code></li></ul></li><li><code>CGSize</code><ul><li>用于存储高度和宽度，同样由<code>CGFloat</code></li><li><code>CGPoint p = CGSizeMake(100.0，200.0);p.height+=20;</code></li></ul></li><li><code>CGRect</code><ul><li><code>CGpoint</code>和<code>CGSize</code>的结合</li><li>制定了一个矩形的原点和宽高</li></ul></li></ul><p>绘制的原点在左上角，绘制的单位并非像素，而是“point”，这样就能兼容各种分辨率和不同ppi的设备，而不会由于像素绘制导致大小出入</p><p>下面介绍一些属性</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@property</span> CGFloat contentScaleFactor<span class="token punctuation">;</span><span class="token comment">//每个point包含几个像素点,只读</span>
<span class="token keyword">@property</span> CGRect bounds<span class="token punctuation">;</span> <span class="token comment">//绘制区域的原点和宽高</span>
<span class="token keyword">@property</span> CGPoint center<span class="token punctuation">;</span><span class="token comment">//顾名思义区域的中心</span>
<span class="token keyword">@property</span> CGRect frame<span class="token punctuation">;</span><span class="token comment">//绘制该view的父视图的矩形，因为view本身是可以旋转的，菱形区域的frame和bounds就完全不一样</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个简单的代码创建Label例子</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>CGRect labelRect <span class="token operator">=</span> <span class="token function">CGRectMake</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
UILabel <span class="token operator">*</span>label <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>UILabel alloc<span class="token punctuation">]</span> initWithFramelabelRect<span class="token punctuation">]</span><span class="token punctuation">;</span>
label<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">@&quot;hello&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>view addSubview<span class="token punctuation">:</span>label<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>何时自定义视图</p><ul><li><p>想要绘制一些自定义内容，Xcode原本控件无法提供的内容</p><ul><li><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>drawRect<span class="token punctuation">:</span><span class="token punctuation">(</span>CGFloat<span class="token punctuation">)</span>aRect<span class="token punctuation">;</span>
<span class="token comment">//在这个方法中绘制你自己的内容，但是永远不要自己调用它</span>
<span class="token comment">//该消息由系统控制</span>

<span class="token comment">//如果想要重新绘制视图，可以使用</span>
<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>setNeedDisplay<span class="token punctuation">;</span>
<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>setNeedDisplayInRect<span class="token punctuation">:</span><span class="token punctuation">(</span>CGRect<span class="token punctuation">)</span>aRect<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><p>如何自定义绘制</p><ul><li><p>可以用Core Graphics中的C函数进行绘制</p></li><li><p>Core Graphics相关函数需要<code>context</code>绘制环境上下文，使用<code>UIGraphicsGetCurrentContext</code>消息获取且只在drawRect中有效</p></li><li><p>也可以使用<code>UIBezierPath</code>进行直接绘制，不需要获取上下文</p></li><li><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>UIBezierPath <span class="token operator">*</span>path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>UIBezierPath alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//移动到点</span>
<span class="token punctuation">[</span>path moveToPoint<span class="token punctuation">:</span><span class="token function">CGPointMake</span><span class="token punctuation">(</span><span class="token number">75</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//绘制路径</span>
<span class="token punctuation">[</span>path addLineToPoint<span class="token punctuation">:</span><span class="token function">CGPointMake</span><span class="token punctuation">(</span><span class="token number">160</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>path addLineToPoint<span class="token punctuation">:</span><span class="token function">CGPointMake</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//闭合路径</span>
<span class="token punctuation">[</span>path closePath<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//即使现在路径已经绘制完成，但是仍然没有在屏幕上渲染</span>
<span class="token comment">//设置颜色</span>
<span class="token punctuation">[</span><span class="token punctuation">[</span>UIColor greenColor<span class="token punctuation">]</span> setFill<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//填充绿色</span>
<span class="token punctuation">[</span><span class="token punctuation">[</span>UIColor redColor<span class="token punctuation">]</span> setStroke<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//红色描边</span>
<span class="token comment">//真正进行渲染配置</span>
<span class="token punctuation">[</span>path fill<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>path stroke<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,85);function h(g,w){const a=o("ExternalLinkIcon");return p(),i("div",null,[u,d,r,k,n("p",null,[s("中文翻译来自"),n("a",v,[s("B站视频"),e(a)]),s("这个UP主的版本")]),n("p",null,[s("由于斯坦福的学生资源系统无法访问，所以在一番查找后，我发现课程作业可以参考"),n("a",m,[s("这个网站"),e(a)])]),b])}const C=t(l,[["render",h],["__file","cs193p学习日记.html.vue"]]);export{C as default};
