import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as i,c as p,b as n,d as a,a as e,f as c}from"./app-2844100a.js";const l={},u=n("h1",{id:"cs193p-斯坦福ios开发公开课",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#cs193p-斯坦福ios开发公开课","aria-hidden":"true"},"#"),a(" CS193P 斯坦福iOS开发公开课")],-1),d=n("h2",{id:"_2023-10-31-入门",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2023-10-31-入门","aria-hidden":"true"},"#"),a(" 2023.10.31 入门")],-1),r=n("p",null,"对斯坦福的这门iOS开发课早有耳闻，在完成了Programing with Objective-C的翻译之后，我决定再从开发的层面继续巩固我的iOS开发基础，毕竟学习语言用不到Xcode，只能说纸上谈兵罢了。",-1),k=n("p",null,"这门课我看的是“Season Fall 2013/14”的版本",-1),v={href:"https://www.bilibili.com/video/BV1yP4y1L7pw/?spm_id_from=333.999.0.0&vd_source=b758c014aac476498aacd7a2f68cd629",target:"_blank",rel:"noopener noreferrer"},m={href:"https://cs193p.m2m.at/cs193p-iphone-application-developement/",target:"_blank",rel:"noopener noreferrer"},b=c(`<h3 id="_1-class-logistics-overview-of-ios-mvc-objective-c" tabindex="-1"><a class="header-anchor" href="#_1-class-logistics-overview-of-ios-mvc-objective-c" aria-hidden="true">#</a> 1. Class Logistics, Overview of iOS, MVC, Objective-C</h3><p>第一节课上的比较简单，其中的重点是MVC这个设计模式</p><h2 id="_2023-11-1-11-3" tabindex="-1"><a class="header-anchor" href="#_2023-11-1-11-3" aria-hidden="true">#</a> 2023.11.1-11.3</h2><h3 id="_2-xcode-5" tabindex="-1"><a class="header-anchor" href="#_2-xcode-5" aria-hidden="true">#</a> 2. Xcode 5</h3><p>第二节课从纸牌游戏引入，用Button控件做了一个按钮，作业就是把牌控件默认为背面并从牌堆中随机取牌</p><p>Xocde的控件预览向代码区的拖拽设计确实遥遥领先，而MVC设计模式在Xocde的工程结构里得到了良好的体现</p><p>就是Xocode可控选项比起10年前多太多了，需要将Button控件的Style设置为Default才能正常翻转，而原本的课程中没有这个选项，这大概是我在iOS工程开发上遇到的第一个Bug</p><h2 id="_2023-11-4-11-6" tabindex="-1"><a class="header-anchor" href="#_2023-11-4-11-6" aria-hidden="true">#</a> 2023.11.4-11.6</h2><h3 id="_3-objective-c" tabindex="-1"><a class="header-anchor" href="#_3-objective-c" aria-hidden="true">#</a> 3.Objective-C</h3><p>第三节课大大优化了纸牌游戏，作业上增加了2-3模式的切换，增加了描述、历史拖拽条以及牌的数量。</p><p>这几天实在是各种事情忙，<s>后面的描述和拖拽条的实现直接选择Copy了</s></p><h2 id="_2023-11-8-11-10" tabindex="-1"><a class="header-anchor" href="#_2023-11-8-11-10" aria-hidden="true">#</a> 2023.11.8-11.10</h2><h3 id="_4-foundation-and-attributed-strings" tabindex="-1"><a class="header-anchor" href="#_4-foundation-and-attributed-strings" aria-hidden="true">#</a> 4.Foundation and Attributed Strings</h3><p>讲了一堆Foundation框架提供的功能，以及Attributed Strings这个概念，是一门承上启下的课，具体的应用应该会在后面的课程讲到。</p><p>11.16补充</p><ul><li>在下节课的Demo中，展示了如何通过Attributed Strings来修改<code>Text View</code>中相关选中文字的属性，比如说文字颜色和描边</li></ul><h2 id="_2023-11-16" tabindex="-1"><a class="header-anchor" href="#_2023-11-16" aria-hidden="true">#</a> 2023.11.16</h2><h3 id="_5-view-controller-lifecycle" tabindex="-1"><a class="header-anchor" href="#_5-view-controller-lifecycle" aria-hidden="true">#</a> 5. View Controller Lifecycle</h3><h4 id="view-controller-lifecycle" tabindex="-1"><a class="header-anchor" href="#view-controller-lifecycle" aria-hidden="true">#</a> View Controller Lifecycle</h4><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>viewDidLoad <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token keyword">super</span> viewDidLoad<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// Do any additional setup after loading the view.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这部分的代码用于初始化你的View视图，但是值得注意的是，即使你的控件的对象已经生成并且可以被操作，但是实际上屏幕上还并没有渲染绘制真正的图形，所以课程中提到，在这部分代码中，不应当包含几何操作，视图形状的操作。</li><li>整个view生命周期中，它<strong>只执行一次</strong></li></ul><hr><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>viewWillAppear<span class="token punctuation">:</span><span class="token punctuation">(</span>BOOL<span class="token punctuation">)</span>animated<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>在view<strong>出现时</strong>被调用</li><li>由于应用程序存在各种视图切换，它会被多次调用</li><li>可以放置一些高开销的代码</li><li>可以操作几何（OK），但是翻转屏幕时并不会重新调用这个方法</li></ul><hr><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>viewWillDisappear<span class="token punctuation">:</span><span class="token punctuation">(</span>BOOL<span class="token punctuation">)</span>animated<span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token keyword">super</span> viewWillDisappear<span class="token punctuation">:</span>animated<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token keyword">self</span> rememberScrollPosition<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token keyword">self</span> saveDataToPermanentStore<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在view<strong>消失时</strong>被调用</li><li>由于应用程序存在各种视图切换，它会被多次调用</li><li>可以用于停止view的活动以节省资源</li></ul><hr><p>以上两个方法都有<code>did</code>版本，顾名思义就是在事件发生后被调用：</p><ul><li><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>viewDidAppear<span class="token punctuation">:</span><span class="token punctuation">(</span>BOOL<span class="token punctuation">)</span>animated<span class="token punctuation">;</span>
<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>viewDidDisappear<span class="token punctuation">:</span><span class="token punctuation">(</span>BOOL<span class="token punctuation">)</span>animated<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><p>而对于几何操作，我们有对应的方法：</p><ul><li><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>view<span class="token punctuation">{</span>Will<span class="token punctuation">,</span>Did<span class="token punctuation">}</span>LayoutSubviews<span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><hr><p>对于内存不足的情况：<code>didReceiveMemoryWarning</code></p><ul><li>此时可以让应用释放一些堆上的内存</li></ul><hr><p>更单纯的代码初始化结构（一般不被使用，而是直接通过Xcode生成布局和对应的控制器）</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>setup<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>awakeFromNib<span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token keyword">self</span> setup<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token operator">-</span><span class="token punctuation">(</span>instancetype<span class="token punctuation">)</span>initWithNibName<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>name bundle<span class="token punctuation">:</span><span class="token punctuation">(</span>NSBundle <span class="token operator">*</span><span class="token punctuation">)</span>bundle<span class="token punctuation">{</span>
  <span class="token keyword">self</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">super</span> initWithNibName<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>name bundle<span class="token punctuation">:</span><span class="token punctuation">(</span>NSBundle <span class="token operator">*</span><span class="token punctuation">)</span>bundle<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token keyword">self</span> setup<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>综上所述，一个View Controller Lifecycle是这样的</p><ul><li><p><code>Instantiated</code>（实例化）</p><ul><li>通常从<code>storyboard</code>中导出，后续会提到实例化的多种方法</li></ul></li><li><p><code>awakeFromNib</code>调用</p></li><li><p><code>oulets</code>出口得到设置</p></li><li><p><code>viewDidLoad</code></p><ul><li>通常的初始化代码入口</li></ul></li><li><p>接下来是程序运行时可能发生的情况</p><ul><li>当需要确立几何上的问题 <ul><li><code>viewWillLayoutSubviews:</code>以及<code>viewDidlLayoutSubviews</code></li></ul></li><li>当MVC视图在屏幕上来回切换时，以下方法将会响应 <ul><li>使用它们来完成当视图可视与不可视切换时，几何学上的变动</li><li><code>viewWillAppear:</code>以及<code>viewDidlAppear:</code></li><li><code>viewWillLayoutSubviews:</code>以及<code>viewDidlLayoutSubviews:</code><ul><li>当屏幕发生翻转时，<code>will/did</code> Rotate(翻转) <code>To/Form</code> 的消息将会送达</li></ul></li><li><code>viewWillDisappear:</code>以及<code>viewDidDisappear:</code></li></ul></li><li>当内存不足时 <ul><li><code>didReceiveMemoryWarning</code></li></ul></li></ul><p>生命周期中不存在<code>unload</code>,以上就是所谓的&#39;视图控制器生命周期&#39;</p></li></ul><hr><p>在跟着课程做demo的时候，遇到了与第一节类似的Bug，在敲入代码后，代码运行报错</p><p><code> [[NSMutableAttributedString alloc]initWithString:self.outlineButton.currentTitle];</code></p><p>这一句的<code>initWithString</code>的参数，告诉我是<code>nil</code>.</p><p>考虑到之前有过类似的情况，我马上意识到了在这里，这个Button要不是不能被设置属性，不然就是没初始化。</p><p>在storyboard的设置里略微查找后，我发现端倪所在，这个Button的<code>style</code>是<code>plain</code>,我暂时还不知道它的含义，但是它大概率造成控件的一些属性无法被修改，再把<code>style</code>修改为<code>default</code>，demo就能够正常构建运行了。</p><hr><h4 id="nsnotification" tabindex="-1"><a class="header-anchor" href="#nsnotification" aria-hidden="true">#</a> NSNotification</h4><p>本节课只讲到监听系统的消息的部分</p><p><code>NSNotifications</code></p><ul><li>之前课上PPT中MVC模型中所谓的“radio station”广播站</li></ul><p><code>NSNotificationCenter</code></p><ul><li><p>通过方法<code>[NSNotificationCenter defaultCenter]</code>获取默认的&quot;notification center&quot;</p></li><li><p>如果你想“监听电台”，则需要使用以下message</p><ul><li><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>addObserver<span class="token punctuation">:</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>observer	<span class="token comment">//观察者，也就是想要收听电台消息的对象</span>
  															<span class="token comment">//常见为controller的self</span>
  				selector<span class="token punctuation">:</span><span class="token punctuation">(</span>SEL<span class="token punctuation">)</span>methodToInvokeIfSomethingHappens
            										<span class="token comment">//当广播中的内容发生时调用的</span>
            										<span class="token comment">//observer的seletor</span>
            	name<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>name 
                								<span class="token comment">//电台名字，在某些地方是个常量</span>
           	object<span class="token punctuation">:</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>sender<span class="token punctuation">;</span>	<span class="token comment">//关注特定对象的变化，（填nil则是关注所有变化） </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><p>当广播发送时，你将会接收到信息，而接受者会像自己类似以下的消息进行处理</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>methodToInvokeIfSomethingHappens<span class="token punctuation">:</span><span class="token punctuation">(</span>NSNotification <span class="token operator">*</span><span class="token punctuation">)</span>notification
<span class="token punctuation">{</span>
  <span class="token comment">//NSNotification有以下属性</span>
  notification<span class="token punctuation">.</span>name			<span class="token comment">//广播站的名字，可以用于在文档中查阅</span>
  notification<span class="token punctuation">.</span>object		<span class="token comment">//sender的对象类型</span>
  notification<span class="token punctuation">.</span>userInfo	<span class="token comment">//广播提供的信息</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在结束收听后，要注意关闭广播站</p><ul><li>在demo中，教授选择在<code>viewWillAppear:</code>以及<code>viewDidlAppear:</code>中挂载监听和停止监听</li></ul><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token punctuation">[</span>center removeObserver<span class="token punctuation">:</span><span class="token keyword">self</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//向广播中心发生消息，表示自己停止收听该站</span>
<span class="token comment">//or</span>
<span class="token punctuation">[</span>center removeObserver<span class="token punctuation">:</span><span class="token keyword">self</span> 
 									name<span class="token punctuation">:</span>UIContentSizeCategoryDidChangeNotification 
 								object<span class="token punctuation">:</span>nil<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//停止收听该站的特定内容,推荐使用该写法以防止不小心消除了其他仍然需要监听的消息</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>center以<code>unsafe retained</code>形式保存收听者的指针，也就是说可能会向非法制造发送通知导致程序崩溃</li><li>不过iOS 7中已经会将指针设为nil</li></ul><p>对象结束生命周期后，这个方法会被调用</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>dealloc<span class="token punctuation">{</span>
  <span class="token comment">//但是值得注意的是，在这个方法执行时，程序已经将该对象的属性properties从堆中释放了</span>
  <span class="token comment">//可以在这里解决unsafe retained的问题</span>
	<span class="token punctuation">[</span><span class="token punctuation">[</span>NSNotificationCenter defaultCenter<span class="token punctuation">]</span> removeObserver<span class="token punctuation">:</span><span class="token keyword">self</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>代码示例</p><ul><li><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">//观察程序字体的改变</span>
NSNotificationCenter <span class="token operator">*</span>center <span class="token operator">=</span> <span class="token punctuation">[</span>NSNotificationCenter defaultCenter<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>center addObserver<span class="token punctuation">:</span><span class="token keyword">self</span>
					 selector<span class="token punctuation">:</span><span class="token keyword">@selector</span><span class="token punctuation">(</span>preferredFontsSizeChanged<span class="token punctuation">:</span><span class="token punctuation">)</span>
            	 name<span class="token punctuation">:</span>UIContentSizeCategoryDidChangeNotification
           	 object<span class="token punctuation">:</span>nil<span class="token punctuation">;</span><span class="token punctuation">]</span>

<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>preferredFontsSizeChanged<span class="token punctuation">:</span><span class="token punctuation">(</span>NSNotification <span class="token operator">*</span><span class="token punctuation">)</span>notification<span class="token punctuation">{</span>
  <span class="token comment">//在这里就可以为整个程序重设字体</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul>`,64);function h(f,g){const s=o("ExternalLinkIcon");return i(),p("div",null,[u,d,r,k,n("p",null,[a("中文翻译来自"),n("a",v,[a("B站视频"),e(s)]),a("这个UP主的版本")]),n("p",null,[a("由于斯坦福的学生资源系统无法访问，所以在一番查找后，我发现课程作业可以参考"),n("a",m,[a("这个网站"),e(s)])]),b])}const y=t(l,[["render",h],["__file","cs193p学习日记.html.vue"]]);export{y as default};
