import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as l,c as r,b as a,d as n,a as s,w as p,f as t}from"./app-48be0510.js";const d={},u=a("h1",{id:"encapsulating-data-封装数据",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#encapsulating-data-封装数据","aria-hidden":"true"},"#"),n(" Encapsulating Data 封装数据")],-1),m=a("code",null,"properties",-1),v=t('<p>本章描述了用于声明对象属性的Objective-C语法，并解释了这些属性如何默认<strong>通过访问器方法<code>accessor methods</code>与实例变量<code>instance variables</code>的结合</strong>来实现的。如果一个属性由实例变量支持，那么在任何初始化方法中必须正确设置该变量。</p><p>如果一个对象需要通过属性来维护与另一个对象的链接，那么考虑两个对象之间关系的性质是很重要的。尽管Objective-C对象的内存管理大部分由自动引用计数（ARC）处理，但知道如何<strong>避免像强引用循环</strong>这样的问题同样重要【ARC机制的弱点——循环引用】，这种情况会导致内存泄漏。本章<strong>解释了对象的生命周期</strong>，并描述了通过关系来管理对象图的思考方式。</p><h2 id="properties-encapsulate-an-object-s-values-属性封装了对象的值" tabindex="-1"><a class="header-anchor" href="#properties-encapsulate-an-object-s-values-属性封装了对象的值" aria-hidden="true">#</a> Properties Encapsulate an Object’s Values 属性封装了对象的值</h2><p>大多数对象需要保持跟踪信息来执行其任务。一些对象旨在模拟一个或多个值，比如Cocoa的NSNumber类用于保存数值，或自定义的XYZPerson类用于模拟具有名字的人。一些对象的范围更广泛，比如说处理用户界面与其显示的信息之间的交互。但即使是这些对象，也需要跟踪用户界面元素或相关的模型对象。【这段意思其实是说即使管理显示的对象，也需要持有数据并进行数据交互】</p><h3 id="declare-public-properties-for-exposed-data-声明公共属性以暴露数据" tabindex="-1"><a class="header-anchor" href="#declare-public-properties-for-exposed-data-声明公共属性以暴露数据" aria-hidden="true">#</a> Declare Public Properties for Exposed Data 声明公共属性以暴露数据</h3>',5),g=a("code",null,"properties",-1),k={href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/DefiningClasses/DefiningClasses.html#//apple_ref/doc/uid/TP40011210-CH3-SW7",target:"_blank",rel:"noopener noreferrer"},b=t(`<div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@interface</span> XYZPerson <span class="token punctuation">:</span> NSObject
<span class="token keyword">@property</span> NSString <span class="token operator">*</span>firstName<span class="token punctuation">;</span>
<span class="token keyword">@property</span> NSString <span class="token operator">*</span>lastName<span class="token punctuation">;</span>
<span class="token keyword">@end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，XYZPerson类声明了字符串属性来保存一个人的名字和姓氏。</p><p>鉴于面向对象编程的主要原则之一是对象应该将其内部工作隐藏在其公共接口之后，重要的是要<strong>使用对象公开的行为来访问对象的属性</strong>，而不是尝试直接访问内部值</p><h3 id="use-accessor-methods-to-get-or-set-property-values-使用访问器方法获取或设置属性值" tabindex="-1"><a class="header-anchor" href="#use-accessor-methods-to-get-or-set-property-values-使用访问器方法获取或设置属性值" aria-hidden="true">#</a> Use Accessor Methods to Get or Set Property Values 使用访问器方法获取或设置属性值</h3><p>您可以通过访问器方法来访问或设置对象的属性：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>    NSString <span class="token operator">*</span>firstName <span class="token operator">=</span> <span class="token punctuation">[</span>somePerson firstName<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//获取属性</span>
    <span class="token punctuation">[</span>somePerson setFirstName<span class="token punctuation">:</span><span class="token string">@&quot;Johnny&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//设置属性</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，<strong>编译器会自动为您合成这些访问器方法</strong>，因此您不需要做任何额外的工作，只<strong>需在类接口中使用@property声明属性即可。</strong></p><p>合成的方法遵循特定的命名约定：</p><ul><li>用于访问值（getter方法）的方法与属性具有<strong>相同的名称</strong>。例如，名为firstName的属性的getter方法也将被命名为firstName。</li><li>用于设置值（setter方法）的方法以单词“set”开始，然后<strong>使用大写的属性名称</strong>。例如，名为firstName的属性的setter方法将被命名为setFirstName:。</li></ul><p>如果您不希望通过setter方法允许更改属性，可以在属性声明中添加一个属性，指定它为readonly：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@property</span> <span class="token punctuation">(</span>readonly<span class="token punctuation">)</span> NSString <span class="token operator">*</span>fullName<span class="token punctuation">;</span>
<span class="token comment">//除了向其他对象展示它们应该如何与属性交互之外，</span>
<span class="token comment">//属性还告诉编译器如何合成相关的访问器方法。</span>
<span class="token comment">//在这种情况下，编译器将合成一个fullName的getter方法，</span>
<span class="token comment">//但不会合成setFullName:方法。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>注意：readonly的反义词是readwrite。无需显式指定readwrite属性，因为它是默认的。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>如果您想为访问器方法指定不同的名称，可以通过添加属性来指定自定义名称</strong>。在布尔属性（具有YES或NO值的属性）的情况下，通常是getter方法以单词“is”开头。例如，名为finished的属性的getter方法应该被命名为isFinished。</p><p>同样，您可以在属性上添加属性：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@property</span> <span class="token punctuation">(</span>getter<span class="token operator">=</span>isFinished<span class="token punctuation">)</span> BOOL finished<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果需要指定多个属性，只需将它们包含为逗号分隔的列表，如下所示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@property</span> <span class="token punctuation">(</span>readonly<span class="token punctuation">,</span> getter<span class="token operator">=</span>isFinished<span class="token punctuation">)</span> BOOL finished<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这种情况下，编译器只会合成一个isFinished方法，但不会合成setFinished:方法。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>注意：通常情况下，属性访问器方法应该符合键-值编码（KVC）规范，
这意味着它们遵循显式的命名约定。有关更多信息，请参阅键-值编码编程指南。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,19),h={href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueCoding/index.html#//apple_ref/doc/uid/10000107i",target:"_blank",rel:"noopener noreferrer"},f=t(`<h3 id="dot-syntax-is-a-concise-alternative-to-accessor-method-calls-点语法是一种简洁的替代访问器方法调用的方式" tabindex="-1"><a class="header-anchor" href="#dot-syntax-is-a-concise-alternative-to-accessor-method-calls-点语法是一种简洁的替代访问器方法调用的方式" aria-hidden="true">#</a> Dot Syntax Is a Concise Alternative to Accessor Method Calls 点语法是一种简洁的替代访问器方法调用的方式</h3><p>除了显式调用访问器方法之外，Objective-C还提供了一种替代的点语法来访问对象的属性。</p><p>点语法允许您像这样访问属性：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>    NSString <span class="token operator">*</span>firstName <span class="token operator">=</span> somePerson<span class="token punctuation">.</span>firstName<span class="token punctuation">;</span><span class="token comment">//获取属性值</span>
    somePerson<span class="token punctuation">.</span>firstName <span class="token operator">=</span> <span class="token string">@&quot;Johnny&quot;</span><span class="token punctuation">;</span><span class="token comment">//设置属性值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>点语法<strong>纯粹是对访问器方法调用的便捷封装</strong>。当您使用点语法时，属性仍然通过上面提到的getter和setter方法来访问或更改：</p><p>使用somePerson.firstName获取值与使用<code>[somePerson firstName]</code>相同 使用somePerson.firstName = @&quot;Johnny&quot;设置值与使用<code>[somePerson setFirstName:@&quot;Johnny&quot;]</code>相同 这意味着通过点语法访问属性也受属性属性的控制。如果属性标记为readonly，如果尝试使用点语法设置它，您将会收到编译器错误。</p><h3 id="most-properties-are-backed-by-instance-variables-大多数属性都由实例变量支持" tabindex="-1"><a class="header-anchor" href="#most-properties-are-backed-by-instance-variables-大多数属性都由实例变量支持" aria-hidden="true">#</a> Most Properties Are Backed by Instance Variables 大多数属性都由实例变量支持</h3><p>默认情况下，可读写（readwrite）属性将由一个实例变量支持，<strong>该实例变量将由编译器自动合成</strong>。</p><p>实例变量是<strong>一个在对象的生命周期内存在并保存其值的变量</strong>。用于实例变量的内存在对象第一次创建（通过<code>alloc</code>）时分配，并在对象被释放时释放。</p><p><strong>除非另有指定，合成的实例变量与属性具有相同的名称</strong>，<strong>但前面带有下划线前缀</strong>。</p><ul><li>例如，对于一个名为firstName的属性，合成的实例变量将被命名为_firstName。</li></ul><p>尽管最佳实践是对象应该使用访问器方法或点语法来访问自己的属性，但可以从类实现中的任何实例方法直接访问实例变量。下划线前缀使其清楚地表明您正在访问一个实例变量，而不是例如局部变量：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>someMethod <span class="token punctuation">{</span>
    NSString <span class="token operator">*</span>myString <span class="token operator">=</span> <span class="token string">@&quot;An interesting string&quot;</span><span class="token punctuation">;</span>
 
    _someString <span class="token operator">=</span> myString<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，很明显myString是一个局部变量，而_someString是一个实例变量。</p><p>通常情况下，<strong>即使从对象的实现内部访问对象的属性，您也应该使用访问器方法或点语法来进行属性访问</strong>，在这种情况下，您应该使用self：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>someMethod <span class="token punctuation">{</span>
    NSString <span class="token operator">*</span>myString <span class="token operator">=</span> <span class="token string">@&quot;An interesting string&quot;</span><span class="token punctuation">;</span>
 
    <span class="token keyword">self</span><span class="token punctuation">.</span>someString <span class="token operator">=</span> myString<span class="token punctuation">;</span>
    <span class="token comment">// 或者</span>
    <span class="token punctuation">[</span><span class="token keyword">self</span> setSomeString<span class="token punctuation">:</span>myString<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个规则的例外是在编写初始化、释放或自定义访问器方法时，后面将在本节中描述。</p><h4 id="you-can-customize-synthesized-instance-variable-names-您可以自定义合成实例变量的名称" tabindex="-1"><a class="header-anchor" href="#you-can-customize-synthesized-instance-variable-names-您可以自定义合成实例变量的名称" aria-hidden="true">#</a> You Can Customize Synthesized Instance Variable Names 您可以自定义合成实例变量的名称</h4><p>【这一@Synthesized已经被弃用了】</p><p>如前所述，可写属性的默认行为是借助使用一个名为_propertyName的实例变量来实现的。</p><p>如果您希望使用不同的名称来命名实例变量，您需要在实现中使用以下语法指示编译器来合成变量：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@implementation YourClass
@synthesize propertyName = instanceVariableName;
...
@end
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="you-can-define-instance-variables-without-properties-您可以在不使用属性的情况下定义实例变量" tabindex="-1"><a class="header-anchor" href="#you-can-define-instance-variables-without-properties-您可以在不使用属性的情况下定义实例变量" aria-hidden="true">#</a> You Can Define Instance Variables without Properties 您可以在不使用属性的情况下定义实例变量</h4><p>在任何时候需要跟踪值或另一个对象时，最佳实践是在对象上使用属性。</p><p><strong>如果确实需要定义自己的实例变量而不声明属性，可以将它们添加在类接口或实现的顶部的大括号内</strong>，如下所示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@interface</span> SomeClass <span class="token punctuation">:</span> NSObject <span class="token punctuation">{</span>
    NSString <span class="token operator">*</span>_myNonPropertyInstanceVariable<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">@end</span>
  <span class="token comment">//或者</span>
<span class="token keyword">@implementation</span> SomeClass <span class="token punctuation">{</span>
    NSString <span class="token operator">*</span>_anotherCustomInstanceVariable<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">@end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),y={href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/CustomizingExistingClasses/CustomizingExistingClasses.html#//apple_ref/doc/uid/TP40011210-CH6-SW3",target:"_blank",rel:"noopener noreferrer"},j=t(`<h3 id="access-instance-variables-directly-from-initializer-methods-在初始化方法中直接访问实例变量" tabindex="-1"><a class="header-anchor" href="#access-instance-variables-directly-from-initializer-methods-在初始化方法中直接访问实例变量" aria-hidden="true">#</a> Access Instance Variables Directly from Initializer Methods 在初始化方法中直接访问实例变量</h3><p>Setter方法可能会产生附加的副作用。它们可能触发KVC通知<code>KVC notifications</code>，或者执行进一步的任务，如果您编写了自己的自定义方法的话。</p><p>在初始化方法中，您应该总是<strong>直接访问实例变量</strong>，因为在属性被设置时，对象的其余部分可能尚未完全初始化。即使您不提供自定义的访问器方法或已经了解任何来自您自己类内的副作用，未来的子类也很可能会覆盖现在的行为。【这段意思是你在初始化中使用实例变量的时候，就不应该使用[]或者点语法来访问了，因为即使这些方法现在保持了正常访问的特性，但是在之后还是有被更改的风险，导致行为超出预期】</p><p>一个典型的初始化方法看起来像这样：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>init <span class="token punctuation">{</span>
    <span class="token keyword">self</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">super</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
 
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// initialize instance variables here</span>
    <span class="token punctuation">}</span> 
    <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在执行自己的初始化之前，初始化方法应将self赋给调用父类初始化方法的结果。父类可能会在初始化对象时失败并返回nil，因此在执行自己的初始化之前，您应该始终检查self是否为nil。</p><p>通过在方法中的第一行调用[super init]，对象是按顺序从其根类初始化的，依次通过每个子类的init实现。图3-1显示了初始化XYZShoutingPerson对象的过程。</p><figure><img src="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Art/initflow.png" alt="The initialization process" tabindex="0" loading="lazy"><figcaption>The initialization process</figcaption></figure><p>正如您在前一章节中所看到的，对象可以通过调用init方法或调用一个使用特定值初始化对象的方法来进行初始化。</p><p>对于XYZPerson类，提供一个初始化方法来设置人的初始名字和姓氏是有意义的：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>initWithFirstName<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>aFirstName lastName<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>aLastName<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>您可以像这样实现该方法：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>initWithFirstName<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>aFirstName lastName<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>aLastName <span class="token punctuation">{</span>
    <span class="token keyword">self</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">super</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
 
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        _firstName <span class="token operator">=</span> aFirstName<span class="token punctuation">;</span>
        _lastName <span class="token operator">=</span> aLastName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="the-designated-initializer-is-the-primary-initialization-method-指定初始化方法是最主要的初始化方法" tabindex="-1"><a class="header-anchor" href="#the-designated-initializer-is-the-primary-initialization-method-指定初始化方法是最主要的初始化方法" aria-hidden="true">#</a> The Designated Initializer is the Primary Initialization Method 指定初始化方法是最主要的初始化方法</h4><p>如果一个对象声明了一个或多个初始化方法，<strong>您应该决定哪个方法是指定的初始化方法</strong>。通常，这个方法提供了最多的初始化选项（比如具有最多参数的方法），并且可以被您编写的其他方法便捷的调用。通常情况下，您应该重写<code>init</code>方法，以调用具有合适默认值的指定初始化方法。</p><p>如果XYZPerson还具有出生日期的属性，指定的初始化方法可能如下：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>initWithFirstName<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>aFirstName lastName<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>aLastName
                                            dateOfBirth<span class="token punctuation">:</span><span class="token punctuation">(</span>NSDate <span class="token operator">*</span><span class="token punctuation">)</span>aDOB<span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法会设置相关的实例变量，就像之前所示的一样。如果您仍希望提供一个仅包含名字和姓氏的便捷初始化方法，您可以实现该方法以调用指定的初始化方法，如下所示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>initWithFirstName<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>aFirstName lastName<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>aLastName <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token keyword">self</span> initWithFirstName<span class="token punctuation">:</span>aFirstName lastName<span class="token punctuation">:</span>aLastName dateOfBirth<span class="token punctuation">:</span>nil<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//这里将 dateOfBirth设为nil，感觉这个部分不如c++可以有默认参数列表</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您还可以实现一个标准的init方法以提供合适的默认值：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>init <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token keyword">self</span> initWithFirstName<span class="token punctuation">:</span><span class="token string">@&quot;John&quot;</span> lastName<span class="token punctuation">:</span><span class="token string">@&quot;Doe&quot;</span> dateOfBirth<span class="token punctuation">:</span>nil<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要在继承使用多个init方法的类时编写初始化方法，您应该要么重写超类的指定初始化方法以执行自己的初始化，要么添加自己的附加初始化方法。无论哪种方式，您都应该在执行任何自己的初始化之前调用超类的指定初始化方法（而不是使用<code>[super init]</code>）。</p><h3 id="you-can-implement-custom-accessor-methods-您可以实现自定义访问器方法" tabindex="-1"><a class="header-anchor" href="#you-can-implement-custom-accessor-methods-您可以实现自定义访问器方法" aria-hidden="true">#</a> You Can Implement Custom Accessor Methods 您可以实现自定义访问器方法</h3><p>属性并不总是必须由它们自己的实例变量支持。</p><p>例如，XYZPerson类可以为人的全名定义一个只读属性：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@property</span> <span class="token punctuation">(</span>readonly<span class="token punctuation">)</span> NSString <span class="token operator">*</span>fullName<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>而不是每次名字或姓氏发生变化时都更新fullName属性，<strong>更容易的方法是编写一个自定义访问器方法，根据需要构建完整的名字字符串</strong>：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span> <span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>fullName <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>NSString stringWithFormat<span class="token punctuation">:</span><span class="token string">@&quot;%@ %@&quot;</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>firstName<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>lastName<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个简单的示例使用了一个格式化字符串和格式说明符（如前一章所述）来构建一个包含名字和姓氏之间以空格分隔的字符串。</p><p><strong>如果需要为使用实例变量的属性编写自定义访问器方法，您必须在方法内部直接访问该实例变量</strong>。例如，通常可以延迟属性的初始化，直到首次请求属性，使用“延迟访问器”，如下所示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span> <span class="token punctuation">(</span>XYZObject <span class="token operator">*</span><span class="token punctuation">)</span>someImportantObject <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_someImportantObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        _someImportantObject <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>XYZObject alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">return</span> _someImportantObject<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在返回值之前，该方法首先检查_someImportantObject实例变量是否为nil；如果是，它会分配一个对象。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>注意：编译器会在所有情况下自动合成一个实例变量，
其中至少合成一个访问器方法。如果您为可读写属性同时实现了getter和setter，
或者为只读属性实现了getter，编译器将假定您正在控制属性的实现，不会自动合成一个实例变量。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果仍然需要一个实例变量，您需要请求合成一个：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@synthesize</span> property <span class="token operator">=</span> _property<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>【很明显，这一大段现在基本上也不适用了】</p><h3 id="properties-are-atomic-by-default-属性默认是原子性的" tabindex="-1"><a class="header-anchor" href="#properties-are-atomic-by-default-属性默认是原子性的" aria-hidden="true">#</a> Properties Are Atomic by Default 属性默认是原子性的</h3><p>默认情况下，Objective-C属性是原子性的：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@interface</span> XYZObject <span class="token punctuation">:</span> NSObject
<span class="token keyword">@property</span> NSObject <span class="token operator">*</span>implicitAtomicObject<span class="token punctuation">;</span>          <span class="token comment">// 默认是原子性的</span>
<span class="token keyword">@property</span> <span class="token punctuation">(</span>atomic<span class="token punctuation">)</span> NSObject <span class="token operator">*</span>explicitAtomicObject<span class="token punctuation">;</span> <span class="token comment">// 明确标记为原子性</span>
<span class="token keyword">@end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这意味着合成的访问器确保值总是通过getter方法完全检索或通过setter方法完全设置,即使从不同线程同时调用访问器也是这样【这里有个陷阱，仅仅只是对单个方法来说保持原子性，但是如果同时读写还是会造成内存泄漏的】。</p><p>由于原子访问器方法的内<strong>部实现和同步是私有的</strong>，因此不可能将合成的访问器与您自己实现的访问器方法结合在一起。例如，<strong>如果您尝试为一个原子性的可读写属性提供自定义setter，但让编译器合成getter，您将会得到一个编译器警告</strong>。</p><p>您可以使用nonatomic属性属性来<strong>指定合成的访问器只是直接设置或返回一个值</strong>，而<strong>不保证如果从不同线程同时访问相同的值会发生什么</strong>。因此，访问nonatomic属性要比原子性属性更快，而且可以将合成的setter与您自己的getter实现结合使用，例如：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@interface</span> XYZObject <span class="token punctuation">:</span> NSObject
<span class="token keyword">@property</span> <span class="token punctuation">(</span>nonatomic<span class="token punctuation">)</span> NSObject <span class="token operator">*</span>nonatomicObject<span class="token punctuation">;</span>
<span class="token keyword">@end</span>

<span class="token keyword">@implementation</span> XYZObject
<span class="token operator">-</span> <span class="token punctuation">(</span>NSObject <span class="token operator">*</span><span class="token punctuation">)</span>nonatomicObject <span class="token punctuation">{</span>
    <span class="token keyword">return</span> _nonatomicObject<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// setter将自动合成</span>
<span class="token keyword">@end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>注意：属性的原子性并不等同于对象的线程安全性。
考虑一个XYZPerson对象，其中一个人的名字和姓氏都使用原子访问器从一个线程更改。
如果另一个线程同时访问这两个名字，那么原子性的getter方法将返回完整的字符串（
而不会崩溃），但不能保证这些值相对于彼此是正确的名字。
如果在更改之前访问了名字，但在更改之后访问了姓氏，那么您将得到不一致的、不匹配的名字对
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,44),S={href:"https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008091",target:"_blank",rel:"noopener noreferrer"},N=t('<h2 id="manage-the-object-graph-through-ownership-and-responsibility-通过所有权和责任来管理对象图" tabindex="-1"><a class="header-anchor" href="#manage-the-object-graph-through-ownership-and-responsibility-通过所有权和责任来管理对象图" aria-hidden="true">#</a> Manage the Object Graph through Ownership and Responsibility 通过所有权和责任来管理对象图</h2><p>正如您已经看到的，Objective-C对象的内存是动态分配的（在堆上），这意味着您需要使用指针来跟踪对象的地址。与标量值不同，你大多数时候无法通过一个指针变量的作用域来确定对象的生命周期。与之相反，只要其他对象需要某个对象，这个对象必须在内存中保持活动状态。</p><p>与其试图手动管理每个对象的生命周期，不如考虑对象之间的关系。【出现了，苹果的断言】</p><p>例如，对于XYZPerson对象，firstName和lastName两个字符串属性实际上是由XYZPerson实例“拥有”的。这意味着只要XYZPerson对象在内存中，它们应该保持在内存中。</p><p>当一个对象以这种方式依赖于其他对象，有效地拥有那些其他对象时，第一个对象被认为对其他对象具有<strong>强引用</strong><code>*strong references* </code>。在Objective-C中，<strong>只要另一个对象有至少一个强引用指向它，对象就会保持活动状态</strong>。XYZPerson实例与两个NSString对象之间的关系如下图所示。</p><figure><img src="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Art/strongpersonproperties.png" alt="Strong Relationships" tabindex="0" loading="lazy"><figcaption>Strong Relationships</figcaption></figure><p>当一个XYZPerson对象从内存中被释放时，假设没有其他强引用指向它们，这两个字符串对象也将被释放。</p><p>为了增加这个示例的复杂性，考虑一个应用程序的对象图，如下图所示</p><figure><img src="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Art/namebadgemaker.png" alt="The Name Badge Maker application" tabindex="0" loading="lazy"><figcaption>The Name Badge Maker application</figcaption></figure><p>当用户点击“Update”按钮时，<code>badge</code>界面会使用相关的姓名信息进行更新。</p><p>第一次输入个人详细信息并点击“Update”按钮时，简化的对象图可能如下图所示。</p><figure><img src="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Art/simplifiedobjectgraph1.png" alt="Simplified object graph for initial XYZPerson creation" tabindex="0" loading="lazy"><figcaption>Simplified object graph for initial XYZPerson creation</figcaption></figure><p>当用户修改了个人的名字时，对象图将发生变化，如下图所示<img src="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Art/simplifiedobjectgraph2.png" alt="Simplified object graph while changing the person’s first name" loading="lazy"></p><p><code>badge</code>显示视图与原始的@&quot;John&quot;字符串对象保持强引用关系，尽管XYZPerson对象现在具有不同的firstName。这意味着@&quot;John&quot;对象仍然保留在内存中，由<code>badge</code>视图用于打印姓名。</p><p>一旦用户第二次点击“Update”按钮，<code>badge</code>视图被告知更新它的内容。</p><figure><img src="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Art/simplifiedobjectgraph3.png" alt="Simplified object graph after updating the badge view" tabindex="0" loading="lazy"><figcaption>Simplified object graph after updating the badge view</figcaption></figure><p>在这一点上，原始的@&quot;John&quot;对象不再有任何强引用，因此它被从内存中移除。</p><p>默认情况下，Objective-C属性和变量都会保持对它们的对象的强引用。这对于许多情况来说是合适的，但它确实可能导致强循环引用的潜在问题。</p><h3 id="avoid-strong-reference-cycles" tabindex="-1"><a class="header-anchor" href="#avoid-strong-reference-cycles" aria-hidden="true">#</a> Avoid Strong Reference Cycles</h3><p>尽管强引用在对象之间的单向关系中工作得很好，但在处理一组相互关联的对象时需要小心。如果一组对象通过强关系的循环连接在一起，它们会保持彼此活动，即使在组外没有强引用。</p>',20),w=a("code",null,"delegate",-1),_=a("code",null," table view",-1),x=t(`<p>常见的情况是，表视图具有对其<code>delegate</code>的引用，<code>delegate</code>又引用回表视图，如下图所示</p><figure><img src="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Art/strongreferencecycle1.png" alt="Strong references between a table view and its delegate" tabindex="0" loading="lazy"><figcaption>Strong references between a table view and its delegate</figcaption></figure><p>如果其他对象放弃了它们与表视图和<code>delegate</code>的强引用关系，问题就会发生，如下图所示。</p><figure><img src="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Art/strongreferencecycle2.png" alt="A strong reference cycle" tabindex="0" loading="lazy"><figcaption>A strong reference cycle</figcaption></figure><p>即使这些对象不需要被保留在内存中，因为除了表视图或<code>delegate</code>之间互相的强引用关系，没有其他的强引用了，而这两个对象之间的强引用关系使它们保持活动状态。这被称为强引用循环。</p><p>解决这个问题的方法是用弱引用<code>*weak reference*</code>替代其中一个强引用。弱引用并不代表着两个对象之间的所有权或责任关系，也不会保持对象的活动状态。</p><p>如果将表视图修改为使用对其<code>delegate</code>的弱关系（实际上UITableView和NSTableView就是这样解决这个问题的），则初始的对象图现在如下图所示。</p><figure><img src="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Art/strongreferencecycle3.png" alt="The correct relationship between a table view and its delegate" tabindex="0" loading="lazy"><figcaption>The correct relationship between a table view and its delegate</figcaption></figure><p>当图中的其他对象再次放弃与表视图和<code>delegate</code>的强引用关系时，如下图，这次就不再有强引用指向委托对象</p><figure><img src="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Art/strongreferencecycle4.png" alt="Avoiding a strong reference cycle" tabindex="0" loading="lazy"><figcaption>Avoiding a strong reference cycle</figcaption></figure><p>这意味着<code>delegate</code>对象将被释放，从而释放了对表视图的强引用，如下图所示</p><figure><img src="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Art/strongreferencecycle5.png" alt="Deallocating the delegate" tabindex="0" loading="lazy"><figcaption>Deallocating the delegate</figcaption></figure><p>一旦<code>delegate</code>被释放，就不再有对表视图的强引用，所以表视图也会被释放。</p><h3 id="use-strong-and-weak-declarations-to-manage-ownership-使用强引用和弱引用声明来管理所有权" tabindex="-1"><a class="header-anchor" href="#use-strong-and-weak-declarations-to-manage-ownership-使用强引用和弱引用声明来管理所有权" aria-hidden="true">#</a> Use Strong and Weak Declarations to Manage Ownership 使用强引用和弱引用声明来管理所有权</h3><p>默认情况下，像这样声明的对象属性：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@property</span> id delegate<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>会对其合成的实例变量使用强引用</strong>。要声明一个弱引用，可以在属性上添加属性，像这样：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@property</span> <span class="token punctuation">(</span>weak<span class="token punctuation">)</span> id delegate<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>注意：与弱引用相对的是强引用。无需显式指定强引用属性，因为它是默认的。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>默认情况下，局部变量<code>Local variables</code>（和非属性实例变量<code>non-property instance variables</code>）也会维护对对象的强引用。这意味着以下代码将按您的预期工作：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>    NSDate <span class="token operator">*</span>originalDate <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>lastModificationDate<span class="token punctuation">;</span>
    <span class="token keyword">self</span><span class="token punctuation">.</span>lastModificationDate <span class="token operator">=</span> <span class="token punctuation">[</span>NSDate date<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;Last modification date changed from %@ to %@&quot;</span><span class="token punctuation">,</span>
                        originalDate<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>lastModificationDate<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，局部变量<code>originalDate</code>维护对原本<code>lastModificationDate</code>对象的强引用。当<code>lastModificationDate</code>属性发生更改时，属性不再保持对原始日期的强引用，但该日期仍由<code>originalDate</code>强引用变量保持活动状态。【也就是我持有了原来属性的对象，并不会因为属性的更改而更改】</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>注意：一个变量只在其作用域内、或直到它被重新分配了另一个对象或nil前，保持对这个对象的强引用。
//这么简单的东西讲的这么拗口，就是变量作用域内持有对象时保持强引用
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>如果不希望变量保持强引用</strong>，可以将其声明为<code>__weak</code>，如下所示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSObject <span class="token operator">*</span> __weak weakVariable<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为弱引用不会保持对象的活动状态，所以在引用的对象仍在使用时，引用的对象可能被释放。<strong>为了避免指向已释放对象的危险悬空指针，当其对象被释放时，弱引用会自动设置为nil。</strong>【是不是该夸它贴心】</p><p>这意味着如果在上一个日期示例中使用弱变量：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSDate <span class="token operator">*</span> __weak originalDate <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>lastModificationDate<span class="token punctuation">;</span>
<span class="token keyword">self</span><span class="token punctuation">.</span>lastModificationDate <span class="token operator">=</span> <span class="token punctuation">[</span>NSDate date<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>originalDate</code>变量可能被设置为nil。当<code>self.lastModificationDate</code>重新分配时，该属性不再保持对原始日期的强引用。如果没有其他强引用指向它，原始日期将被释放，并<code>originalDate</code>将被设置为nil。</p><p>弱变量可能会引发混淆，尤其是在像下面这样的代码中：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSObject <span class="token operator">*</span> __weak someObject <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSObject alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这个示例中，新分配的对象没有对它的强引用，因此它会立即被释放，并且<code>someObject</code>会设置为nil。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>注意：与__weak相对的是__strong。同样，无需显式指定__strong，因为它是默认的。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>如果需要多次访问弱属性的方法，要特别考虑</strong>，如下所示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>someMethod <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>weakProperty doSomething<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>weakProperty doSomethingElse<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种情况下，<strong>您可能希望将弱属性缓存在一个强变量中，以确保它在您需要使用它的时间内保持在内存中：</strong></p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>someMethod <span class="token punctuation">{</span>
    NSObject <span class="token operator">*</span>cachedObject <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>weakProperty<span class="token punctuation">;</span>
    <span class="token punctuation">[</span>cachedObject doSomething<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">[</span>cachedObject doSomethingElse<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【还想的挺周到】</p><p>在这个示例中，<code>cachedObject</code>变量维护对原始弱属性值的强引用，以便只要<code>cachedObject</code>仍在作用域内（且尚未被重新分配另一个值），它就不会被释放。</p><p><strong>如果需要确保弱属性在使用之前不为nil</strong>，尤其需要牢记这一点。<strong>仅仅测试它是不够的</strong>，如下所示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>someWeakProperty<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">[</span>someObject doSomethingImportantWith<span class="token punctuation">:</span><span class="token keyword">self</span><span class="token punctuation">.</span>someWeakProperty<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为在多线程应用程序中，属性可能在测试和方法调用之间被释放，从而使测试变得无效。相反，您需要声明一个强局部变量来缓存值，如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>NSObject *cachedObject = self.someWeakProperty;           // 1
if (cachedObject) {                                       // 2
    [someObject doSomethingImportantWith:cachedObject];   // 3
}                                                         // 4
cachedObject = nil;                                       // 5

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，强引用是在第1行创建的，这意味着对象保证在测试和方法调用期间保持活动状态。在第5行，<code>cachedObject</code>被设置为nil，从而放弃了强引用。如果原始对象此时没有其他强引用，它将被释放，而<code>someWeakProperty</code>将被设置为nil。</p><h3 id="use-unsafe-unretained-references-for-some-classes-对某些类使用不安全的非持有引用" tabindex="-1"><a class="header-anchor" href="#use-unsafe-unretained-references-for-some-classes-对某些类使用不安全的非持有引用" aria-hidden="true">#</a> Use Unsafe Unretained References for Some Classes 对某些类使用不安全的非持有引用</h3>`,45),C=a("code",null,"NSTextView",-1),O=a("code",null,"NSFont",-1),P=a("code",null,"NSColorSpace",-1),D={href:"https://developer.apple.com/library/archive/releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html#//apple_ref/doc/uid/TP40011226",target:"_blank",rel:"noopener noreferrer"},W=t(`<p>如果需要使用弱引用引用这些类中的一个，必须使用不安全的引用。对于属性，这意味着使用<code>unsafe_unretained</code>属性：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@property (unsafe_unretained) NSObject *unsafeProperty;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对于变量，需要使用<code>__unsafe_unretained</code>：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSObject <span class="token operator">*</span> __unsafe_unretained unsafeReference<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不安全引用类似于弱引用，因为它不会使其相关的对象保持活动状态，<strong>但如果目标对象被释放，它不会被设置为nil</strong>。这意味着您将得到一个指向原始被释放对象的内存的悬空指针，因此称为“不安全”。<strong>向悬空指针发送消息将导致崩溃</strong>。【前面提到了，像nil发送消息时被允许的，且不会发生其他事情】</p><h3 id="copy-properties-maintain-their-own-copies-复制属性维护它们自己的副本" tabindex="-1"><a class="header-anchor" href="#copy-properties-maintain-their-own-copies-复制属性维护它们自己的副本" aria-hidden="true">#</a> Copy Properties Maintain Their Own Copies 复制属性维护它们自己的副本</h3><p>在某些情况下，一个对象可能希望保留其属性设置的对象的副本。</p><p>举个例子，之前在图3-4中显示的XYZBadgeView类的类接口可能如下所示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@interface</span> XYZBadgeView <span class="token punctuation">:</span> NSView
<span class="token keyword">@property</span> NSString <span class="token operator">*</span>firstName<span class="token punctuation">;</span>
<span class="token keyword">@property</span> NSString <span class="token operator">*</span>lastName<span class="token punctuation">;</span>
<span class="token keyword">@end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>声明了两个NSString属性，它们都隐式保持对其对象的强引用。</p><p>考虑如果另一个对象创建一个字符串来设置为<code>badge</code>视图属性之一的情况，如下所示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>    NSMutableString <span class="token operator">*</span>nameString <span class="token operator">=</span> <span class="token punctuation">[</span>NSMutableString stringWithString<span class="token punctuation">:</span><span class="token string">@&quot;John&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//创建一个可变字符串对象</span>
    <span class="token keyword">self</span><span class="token punctuation">.</span>badgeView<span class="token punctuation">.</span>firstName <span class="token operator">=</span> nameString<span class="token punctuation">;</span>
<span class="token comment">//将可变字符串设置到窗体的delegate</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述是完全有效的，因为<code>NSMutableString</code>是<code>NSString</code>的子类。尽管<code>badge</code>视图认为它正在处理<code>NSString</code>实例，但实际上它正在处理<code>NSMutableString</code>。</p><p>这意味着字符串可以更改：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token punctuation">[</span>nameString appendString<span class="token punctuation">:</span><span class="token string">@&quot;ny&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这种情况下，尽管最初为<code>badge</code>视图的<code>firstName</code>属性设置的时候是“John”，但现在它是“Johnny”，因为可变字符串已更改【发送了消息进行了修改】。【这段就是说，控件的显示值一般情况下会跟随delegate的修改而修改，也就是捕获变化并展示】</p><p>您可以选择让<code>badge</code>视图维护其<code>firstName</code>和<code>lastName</code>属性的任何字符串的自己的副本，以便它在设置属性的时候有效的捕获字符串。通过在两个属性声明中添加<code>copy</code>属性</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@interface</span> XYZBadgeView <span class="token punctuation">:</span> NSView
<span class="token keyword">@property</span> <span class="token punctuation">(</span>copy<span class="token punctuation">)</span> NSString <span class="token operator">*</span>firstName<span class="token punctuation">;</span>
<span class="token keyword">@property</span> <span class="token punctuation">(</span>copy<span class="token punctuation">)</span> NSString <span class="token operator">*</span>lastName<span class="token punctuation">;</span>
<span class="token keyword">@end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>视图现在维护这两个字符串的副本。即使设置了可变字符串并随后更改，<code>badge</code>视图会保持它在被设置时捕获的值。例如：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSMutableString <span class="token operator">*</span>nameString <span class="token operator">=</span> <span class="token punctuation">[</span>NSMutableString stringWithString<span class="token punctuation">:</span><span class="token string">@&quot;John&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">self</span><span class="token punctuation">.</span>badgeView<span class="token punctuation">.</span>firstName <span class="token operator">=</span> nameString<span class="token punctuation">;</span>
<span class="token punctuation">[</span>nameString appendString<span class="token punctuation">:</span><span class="token string">@&quot;ny&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这一次，<code>badge</code>视图的<code>firstName</code>将是最初的“John”字符串的<strong>未受影响的副本</strong>。</p><p><code>copy</code>属性意味着该属性将使用强引用，因为它必须保留它创建的新对象。</p>`,22),A=a("code",null,"copy",-1),M=a("code",null,"NSCopying",-1),q=a("code",null,"NSCopying",-1),z={href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/WorkingwithProtocols/WorkingwithProtocols.html#//apple_ref/doc/uid/TP40011210-CH11-SW2",target:"_blank",rel:"noopener noreferrer"},V=a("code",null,"NSCopying",-1),Y=a("code",null,"NSCopying",-1),I={href:"https://developer.apple.com/library/archive/documentation/LegacyTechnologies/WebObjects/WebObjects_3.5/Reference/Frameworks/ObjC/Foundation/Protocols/NSCopying/Description.html#//apple_ref/occ/intf/NSCopying",target:"_blank",rel:"noopener noreferrer"},F={href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/MemoryMgmt.html#//apple_ref/doc/uid/10000011i",target:"_blank",rel:"noopener noreferrer"},B=t(`<p>如果需要在初始化方法中直接设置<code>copy</code>属性的实例变量，例如，在初始化方法中，请不要忘记设置原始对象的副本：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>initWithSomeOriginalString<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>aString <span class="token punctuation">{</span>
    <span class="token keyword">self</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">super</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        _instanceVariableForCopyProperty <span class="token operator">=</span> <span class="token punctuation">[</span>aString copy<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function X(E,T){const o=i("RouterLink"),e=i("ExternalLinkIcon");return l(),r("div",null,[u,a("p",null,[n("除了"),s(o,{to:"/tec/basic/programWithOC/%E5%AD%90%E7%AB%A0%E8%8A%82/WorkWithObject.html"},{default:p(()=>[n("前一章节")]),_:1}),n("中介绍的消息传递行为之外，一个对象还通过其属性"),m,n("来封装数据。")]),v,a("p",null,[n("Objective-C属性"),g,n("提供了一种定义类封装的信息的方式。如在前文「"),a("a",k,[n("Properties Control Access to an Object’s Values"),s(e)]),n(" 属性控制对对象值的访问」中所提到的的，属性声明包含在类的接口中，如下所示：")]),b,a("p",null,[a("em",null,[a("a",h,[n("Key-Value Coding Programming Guide"),s(e)])])]),f,a("p",null,[n("注意：您您还可以在类扩展的顶部添加实例变量，如在“类扩展扩展内部实现”中所描述的那样"),a("a",y,[n("Class Extensions Extend the Internal Implementation"),s(e)])]),j,a("p",null,[n("这个示例相当简单，但在考虑跨相关对象网络时，线程安全性问题变得更加复杂。线程安全性将在《*"),a("a",S,[n("Concurrency Programming Guide"),s(e)]),n("*并发编程指南》中更详细地介绍。")]),N,a("p",null,[n("有一个明显的潜在引用循环的例子存在于表视图对象（iOS中的UITableView和OS X中的NSTableView）和它的"),w,n("之间。为了使通用的表视图"),_,n("类在多种情况下都能派上用场，它将一些决策"),s(o,{to:"/tec/basic/%E6%A6%82%E5%BF%B5%E4%BB%8B%E7%BB%8D%E5%90%88%E9%9B%86/Delegation.html"},{default:p(()=>[n("委托")]),_:1}),n("给外部对象。这意味着它依赖于另一个对象来决定它显示什么内容，或者当用户与表视图中的特定条目进行交互时应该执行什么操作。")]),x,a("p",null,[n("有一些Cocoa和Cocoa Touch中的类尚不支持弱引用，这意味着您无法声明一个弱属性或弱局部变量来跟踪它们。这些类包括"),C,n("，"),O,n("和"),P,n("等；有关完整列表，请参阅“"),a("em",null,[a("a",D,[n("Transitioning to ARC Release Notes"),s(e)])]),n("”。")]),W,a("p",null,[n("注意：您希望为"),A,n("属性设置的任何对象必须支持"),M,n("，这意味着它应该符合"),q,n("协议。有关协议的信息，请参阅“"),a("a",z,[n("Protocols Define Messaging Contracts"),s(e)]),n(" 协议定义消息传递契约”。有关"),V,n("的更多信息，请参阅"),Y,a("a",I,[n("NSCopying"),s(e)]),n("或高级内存管理编程指南*"),a("a",F,[n("Advanced Memory Management Programming Guide"),s(e)]),n("*。")]),B])}const R=c(d,[["render",X],["__file","EncapsulatingData.html.vue"]]);export{R as default};
