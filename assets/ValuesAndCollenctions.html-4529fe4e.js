import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as i,b as a,d as n,a as e,f as t}from"./app-bc1719f3.js";const l={},r=t(`<h1 id="values-and-collections-值和集合" tabindex="-1"><a class="header-anchor" href="#values-and-collections-值和集合" aria-hidden="true">#</a> Values and Collections 值和集合</h1><p>尽管Objective-C是一种面向对象的编程语言，但它是C语言的超集，这意味着你可以在Objective-C代码中使用标准的C标量<code>*scalar*</code>（非对象）类型，如int、float和char。在Cocoa和Cocoa Touch应用程序中还有其他标量类型可用，如NSInteger、NSUInteger和CGFloat，这些类型根据目标架构的不同有不同的定义。</p><p>标量类型用于在不需要使用对象来表示值的情况下。虽然字符串通常表示为NSString类的实例，但数值通常存储在标量本地变量或属性中。</p><p>你可以在Objective-C中声明C样式数组，但在Cocoa和Cocoa Touch应用程序中，<strong>集合通常是用类的实例来表示</strong>，比如NSArray或NSDictionary。这些类只能用来收集Objective-C对象，这意味着在将值添加到集合之前，你需要创建类的实例，比如NSValue、NSNumber或NSString。</p><p>本指南中的前几章经常使用NSString类及其初始化和类工厂方法，以及Objective-C的<code>@&quot;string&quot;\`\`literal</code>，它提供了一种简洁的语法来创建NSString实例。本章将解释如何创建NSValue和NSNumber对象，可以通过方法调用或通过Objective-C值<code>literal</code>语法进行。</p><h2 id="basic-c-primitive-types-are-available-in-objective-c" tabindex="-1"><a class="header-anchor" href="#basic-c-primitive-types-are-available-in-objective-c" aria-hidden="true">#</a> Basic C Primitive Types Are Available in Objective-C</h2><p>Objective-C中可用基本的C标量类型</p><p>标准的C标量变量类型在Objective-C中都是可用的：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">int</span> someInteger <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> someFloatingPointNumber <span class="token operator">=</span> <span class="token number">3.1415</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> someDoublePrecisionFloatingPointNumber <span class="token operator">=</span> <span class="token number">6.02214199e23</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有标准的C运算符：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>    <span class="token keyword">int</span> someInteger <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
    someInteger<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment">// someInteger == 43</span>
 
    <span class="token keyword">int</span> anotherInteger <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>
    anotherInteger<span class="token operator">--</span><span class="token punctuation">;</span>         <span class="token comment">// anotherInteger == 63</span>
 
    anotherInteger <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>      <span class="token comment">// anotherInteger == 126</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你在Objective-C属性中使用标量类型，像这样：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@interface</span> XYZCalculator <span class="token punctuation">:</span> NSObject
<span class="token keyword">@property</span> <span class="token keyword">double</span> currentValue<span class="token punctuation">;</span>
<span class="token keyword">@end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么当通过点语法访问该属性的值时，也可以使用C运算符，如下所示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@implementation</span> XYZCalculator
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>increment <span class="token punctuation">{</span>
    <span class="token keyword">self</span><span class="token punctuation">.</span>currentValue<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>decrement <span class="token punctuation">{</span>
    <span class="token keyword">self</span><span class="token punctuation">.</span>currentValue<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>multiplyBy<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>factor <span class="token punctuation">{</span>
    <span class="token keyword">self</span><span class="token punctuation">.</span>currentValue <span class="token operator">*</span><span class="token operator">=</span> factor<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">@end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>点语法只是对访问器方法调用的语法包装，因此在这个示例中的每个操作都等同于首先使用获取访问器方法来获取值，然后执行操作，然后使用设置访问器方法来将值设置为结果。</p><h3 id="objective-c-defines-additional-primitive-types-objective-c定义了额外的标量类型" tabindex="-1"><a class="header-anchor" href="#objective-c-defines-additional-primitive-types-objective-c定义了额外的标量类型" aria-hidden="true">#</a> Objective-C Defines Additional Primitive Types Objective-C定义了额外的标量类型</h3><p>Objective-C中定义了<code>BOOL</code>标量类型，用于保存布尔值，它要么是<code>YES</code>（真）要么是<code>NO</code>（假）。正如你所预期的，YES在逻辑上等价于true和1，而NO等价于false和0。</p><p>Cocoa和Cocoa Touch对象的许多方法的参数也使用特殊的标量数值类型，如NSInteger或CGFloat。</p><p>例如，NSTableViewDataSource和UITableViewDataSource协议（在上一章中描述）都有请求要显示的行数的方法：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@protocol</span> NSTableViewDataSource <span class="token operator">&lt;</span>NSObject<span class="token operator">&gt;</span>
<span class="token operator">-</span> <span class="token punctuation">(</span>NSInteger<span class="token punctuation">)</span>numberOfRowsInTableView<span class="token punctuation">:</span><span class="token punctuation">(</span>NSTableView <span class="token operator">*</span><span class="token punctuation">)</span>tableView<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">@end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些类型，如NSInteger和NSUInteger，根据目标架构的不同而有不同的定义。在构建32位环境（比如iOS）时，它们分别是32位的有符号和无符号整数；在构建64位环境（比如现代的OS X运行时）时，它们分别是64位的有符号和无符号整数。</p><p>最佳实践是在跨越API边界传递值时（包括内部和导出的API），例如在应用程序代码和框架之间的方法或函数调用的参数或返回值中，<strong>使用这些特定于平台的类型</strong>。【意思就是跨平台的框架可以用这些平台自适应的变量来写】</p><p>对于局部变量，比如循环中的计数器，如果你知道值在标准限制内，使用基本的C类型是可以的。</p><h3 id="c-structures-can-hold-primitive-values-c结构体可以保存原始值" tabindex="-1"><a class="header-anchor" href="#c-structures-can-hold-primitive-values-c结构体可以保存原始值" aria-hidden="true">#</a> C Structures Can Hold Primitive Values C结构体可以保存原始值</h3><p>一些Cocoa和Cocoa Touch API使用C结构体来保存它们的值。举个例子，可以请求字符串对象的子字符串范围，如下所示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSString <span class="token operator">*</span>mainString <span class="token operator">=</span> <span class="token string">@&quot;This is a long string&quot;</span><span class="token punctuation">;</span>
NSRange substringRange <span class="token operator">=</span> <span class="token punctuation">[</span>mainString rangeOfString<span class="token punctuation">:</span><span class="token string">@&quot;long&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>一个NSRange结构保存了位置和长度</strong>。在这种情况下，substringRange将保存一个范围{10,4} - @&quot;long&quot;开头的 &quot;l&quot; 是mainString中基于零的索引10处的字符，@&quot;long&quot;的长度为4个字符。</p><p>类似地，如果你需要编写自定义绘图代码，你需要与Quartz互动，Quartz要求以CGFloat数据类型为基础的结构，如OS X上的NSPoint和NSSize以及iOS上的CGPoint和CGSize。同样，CGFloat根据目标架构的不同而有不同的定义。</p>`,29),u={href:"https://developer.apple.com/library/archive/documentation/GraphicsImaging/Conceptual/drawingwithquartz2d/Introduction/Introduction.html#//apple_ref/doc/uid/TP30001066",target:"_blank",rel:"noopener noreferrer"},d=t(`<h2 id="objects-can-represent-primitive-values-对象可以表示原始值" tabindex="-1"><a class="header-anchor" href="#objects-can-represent-primitive-values-对象可以表示原始值" aria-hidden="true">#</a> Objects Can Represent Primitive Values 对象可以表示原始值</h2><p>如果你需要将标量值表示为对象，比如在使用下一节中描述的集合类时，你可以使用Cocoa和Cocoa Touch提供的基本值类。</p><p>字符串由NSString类的实例表示，正如你在前几章中所看到的，NSString用于表示一串字符，如 Hello World。有各种方式可以创建NSString对象，包括标准的分配和初始化、类工厂方法或<code>literal</code>语法：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSString <span class="token operator">*</span>firstString <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSString alloc<span class="token punctuation">]</span> initWithCString<span class="token punctuation">:</span><span class="token string">&quot;Hello World!&quot;</span>
                                                 encoding<span class="token punctuation">:</span>NSUTF8StringEncoding<span class="token punctuation">]</span><span class="token punctuation">;</span>
NSString <span class="token operator">*</span>secondString <span class="token operator">=</span> <span class="token punctuation">[</span>NSString stringWithCString<span class="token punctuation">:</span><span class="token string">&quot;Hello World!&quot;</span>
                                            encoding<span class="token punctuation">:</span>NSUTF8StringEncoding<span class="token punctuation">]</span><span class="token punctuation">;</span>
NSString <span class="token operator">*</span>thirdString <span class="token operator">=</span> <span class="token string">@&quot;Hello World!&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些示例中的每一个都有效地完成了相同的事情，即创建一个表示提供的字符的字符串对象。</p><p>基本的NSString类是不可变的，这意味着它的内容在创建时设置，不能后来更改。如果你需要表示不同的字符串，你必须创建一个新的字符串对象，像这样：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSString <span class="token operator">*</span>name <span class="token operator">=</span> <span class="token string">@&quot;John&quot;</span><span class="token punctuation">;</span>
name <span class="token operator">=</span> <span class="token punctuation">[</span>name stringByAppendingString<span class="token punctuation">:</span><span class="token string">@&quot;ny&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 返回一个新的字符串对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>NSMutableString类是NSString的可变子类，允许你在运行时使用方法如appendString:或appendFormat:更改它的字符内容，像这样：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSMutableString <span class="token operator">*</span>name <span class="token operator">=</span> <span class="token punctuation">[</span>NSMutableString stringWithString<span class="token punctuation">:</span><span class="token string">@&quot;John&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>name appendString<span class="token punctuation">:</span><span class="token string">@&quot;ny&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">// 相同的对象，但现在表示&quot;Johnny&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="format-strings-are-used-to-build-strings-from-other-objects-or-values-格式字符串用于从其他对象或值构建字符串" tabindex="-1"><a class="header-anchor" href="#format-strings-are-used-to-build-strings-from-other-objects-or-values-格式字符串用于从其他对象或值构建字符串" aria-hidden="true">#</a> Format Strings Are Used to Build Strings from Other Objects or Values 格式字符串用于从其他对象或值构建字符串</h4><p>如果你需要构建包含变量值的字符串，你需要使用格式字符串。这允许你使用格式说明符来指示如何插入值：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">int</span> magicNumber <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
NSString <span class="token operator">*</span>magicString <span class="token operator">=</span> <span class="token punctuation">[</span>NSString stringWithFormat<span class="token punctuation">:</span><span class="token string">@&quot;The magic number is %i&quot;</span><span class="token punctuation">,</span> magicNumber<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,12),k={href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Strings/Articles/formatSpecifiers.html#//apple_ref/doc/uid/TP40004265",target:"_blank",rel:"noopener noreferrer"},b={href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Strings/introStrings.html#//apple_ref/doc/uid/10000035i",target:"_blank",rel:"noopener noreferrer"},v=t(`<h3 id="numbers-are-represented-by-instances-of-the-nsnumber-class-数字由nsnumber类的实例表示" tabindex="-1"><a class="header-anchor" href="#numbers-are-represented-by-instances-of-the-nsnumber-class-数字由nsnumber类的实例表示" aria-hidden="true">#</a> Numbers Are Represented by Instances of the NSNumber Class 数字由NSNumber类的实例表示</h3><p>NSNumber类用于表示任何基本的C标量类型，包括<code>char、double、float、int、long、short</code>以及每个无符号变体，以及Objective-C的布尔类型BOOL。</p><p>与NSString一样，你有多种选项来创建NSNumber实例，包括分配和初始化或类工厂方法：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSNumber <span class="token operator">*</span>magicNumber <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSNumber alloc<span class="token punctuation">]</span> initWithInt<span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
NSNumber <span class="token operator">*</span>unsignedNumber <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSNumber alloc<span class="token punctuation">]</span> initWithUnsignedInt<span class="token punctuation">:</span><span class="token number">42u</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
NSNumber <span class="token operator">*</span>longNumber <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSNumber alloc<span class="token punctuation">]</span> initWithLong<span class="token punctuation">:</span><span class="token number">42l</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

NSNumber <span class="token operator">*</span>boolNumber <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSNumber alloc<span class="token punctuation">]</span> initWithBOOL<span class="token punctuation">:</span>YES<span class="token punctuation">]</span><span class="token punctuation">;</span>

NSNumber <span class="token operator">*</span>simpleFloat <span class="token operator">=</span> <span class="token punctuation">[</span>NSNumber numberWithFloat<span class="token punctuation">:</span><span class="token number">3.14f</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
NSNumber <span class="token operator">*</span>betterDouble <span class="token operator">=</span> <span class="token punctuation">[</span>NSNumber numberWithDouble<span class="token punctuation">:</span><span class="token number">3.1415926535</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

NSNumber <span class="token operator">*</span>someChar <span class="token operator">=</span> <span class="token punctuation">[</span>NSNumber numberWithChar<span class="token punctuation">:</span><span class="token char">&#39;T&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以使用Objective-C字面语法创建NSNumber实例：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSNumber <span class="token operator">*</span>magicNumber <span class="token operator">=</span> <span class="token operator">@</span><span class="token number">42</span><span class="token punctuation">;</span>
NSNumber <span class="token operator">*</span>unsignedNumber <span class="token operator">=</span> <span class="token operator">@</span><span class="token number">42u</span><span class="token punctuation">;</span>
NSNumber <span class="token operator">*</span>longNumber <span class="token operator">=</span> <span class="token operator">@</span><span class="token number">42l</span><span class="token punctuation">;</span>

NSNumber <span class="token operator">*</span>boolNumber <span class="token operator">=</span> <span class="token operator">@</span>YES<span class="token punctuation">;</span>

NSNumber <span class="token operator">*</span>simpleFloat <span class="token operator">=</span> <span class="token operator">@</span><span class="token number">3.14f</span><span class="token punctuation">;</span>
NSNumber <span class="token operator">*</span>betterDouble <span class="token operator">=</span> <span class="token operator">@</span><span class="token number">3.1415926535</span><span class="token punctuation">;</span>

NSNumber <span class="token operator">*</span>someChar <span class="token operator">=</span> <span class="token operator">@</span><span class="token char">&#39;T&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些示例等同于使用NSNumber类的类工厂方法。</p><p>创建了NSNumber实例后，可以使用其中一个访问器方法请求标量值：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">int</span> scalarMagic <span class="token operator">=</span> <span class="token punctuation">[</span>magicNumber intValue<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">int</span> scalarUnsigned <span class="token operator">=</span> <span class="token punctuation">[</span>unsignedNumber unsignedIntValue<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> scalarLong <span class="token operator">=</span> <span class="token punctuation">[</span>longNumber longValue<span class="token punctuation">]</span><span class="token punctuation">;</span>

BOOL scalarBool <span class="token operator">=</span> <span class="token punctuation">[</span>boolNumber boolValue<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">float</span> scalarSimpleFloat <span class="token operator">=</span> <span class="token punctuation">[</span>simpleFloat floatValue<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> scalarBetterDouble <span class="token operator">=</span> <span class="token punctuation">[</span>betterDouble doubleValue<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">char</span> scalarChar <span class="token operator">=</span> <span class="token punctuation">[</span>someChar charValue<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>NSNumber类还提供了用于处理其他Objective-C原始类型的方法。如果你需要创建标量NSInteger和NSUInteger类型的对象表示，确保使用正确的方法：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>NSInteger anInteger = 64;
NSUInteger anUnsignedInteger = 100;

NSNumber *firstInteger = [[NSNumber alloc] initWithInteger:anInteger];
NSNumber *secondInteger = [NSNumber numberWithUnsignedInteger:anUnsignedInteger];

NSInteger integerCheck = [firstInteger integerValue];
NSUInteger unsignedCheck = [secondInteger unsignedIntegerValue];
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有NSNumber实例都是不可变的，没有可变的子类；如果你需要不同的数字，只需使用另一个NSNumber实例。</p><p>注意：<strong>NSNumber实际上是一个类群（class cluster）。这意味着在运行时创建一个实例时，你将得到一个合适的具体子类来保存提供的值。只需将创建的对象视为NSNumber的实例即可</strong>。【一句话不得了地提了它的实现原理啊】</p><h2 id="most-collections-are-objects-使用nsvalue类的实例表示其他值" tabindex="-1"><a class="header-anchor" href="#most-collections-are-objects-使用nsvalue类的实例表示其他值" aria-hidden="true">#</a> Most Collections Are Objects 使用NSValue类的实例表示其他值</h2><p>NSNumber类本身是基本NSValue类的子类，它提供了一个对象包装器，用于包装单个值或数据项。除了基本的C标量类型，NSValue还可以用于表示指针和结构。</p><p>NSValue类提供了各种工厂方法，用于创建具有给定标准结构的值，这使得创建一个实例来表示(例如一个NSRange)很容易，就像本章前面的示例一样：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSString <span class="token operator">*</span>mainString <span class="token operator">=</span> <span class="token string">@&quot;This is a long string&quot;</span><span class="token punctuation">;</span>
NSRange substringRange <span class="token operator">=</span> <span class="token punctuation">[</span>mainString rangeOfString<span class="token punctuation">:</span><span class="token string">@&quot;long&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
NSValue <span class="token operator">*</span>rangeValue <span class="token operator">=</span> <span class="token punctuation">[</span>NSValue valueWithRange<span class="token punctuation">:</span>substringRange<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以创建NSValue对象来表示自定义结构。如果你有特定的需要，需要使用C结构体（而不是Objective-C对象）来存储信息，就像这样：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">float</span> f<span class="token punctuation">;</span>
<span class="token punctuation">}</span> MyIntegerFloatStruct<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以通过提供结构的指针以及编码的Objective-C类型来创建一个NSValue实例。@encode()编译指令用于创建正确的Objective-C类型，就像这样：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">struct</span> MyIntegerFloatStruct aStruct<span class="token punctuation">;</span>
aStruct<span class="token punctuation">.</span>i <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
aStruct<span class="token punctuation">.</span>f <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>

NSValue <span class="token operator">*</span>structValue <span class="token operator">=</span> <span class="token punctuation">[</span>NSValue value<span class="token punctuation">:</span><span class="token operator">&amp;</span>aStruct
                         withObjCType<span class="token punctuation">:</span><span class="token operator">@</span><span class="token function">encode</span><span class="token punctuation">(</span>MyIntegerFloatStruct<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>标准的C引用运算符(&amp;)用于为value参数提供aStruct的地址。【神奇】</p><h2 id="most-collections-are-objects-大多数集合都是对象" tabindex="-1"><a class="header-anchor" href="#most-collections-are-objects-大多数集合都是对象" aria-hidden="true">#</a> Most Collections Are Objects 大多数集合都是对象</h2><p>虽然可以使用C数组来保存标量值的集合，甚至对象指针的集合，但Objective-C代码中的大多数集合都是Cocoa和Cocoa Touch集合类的实例，比如NSArray、NSSet和NSDictionary。</p><p>这些类用于管理对象组，这意味着您希望添加到集合中的任何项都必须是Objective-C类的实例。如果需要添加标量值，您必须首先创建一个合适的NSNumber或NSValue实例来表示它。</p>`,25),m={href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/EncapsulatingData/EncapsulatingData.html#//apple_ref/doc/uid/TP40011210-CH5-SW3",target:"_blank",rel:"noopener noreferrer"},g=a("p",null,"除了跟踪它们的内容，每个Cocoa和Cocoa Touch集合类都可以轻松执行某些任务，比如枚举、访问特定项，或查找特定对象是否是集合的一部分。",-1),h=a("p",null,[n("基本的NSArray、NSSet和NSDictionary类"),a("strong",null,"都是不可变的"),n("，这意味着它们的内容在创建时设置。"),a("strong",null,"每个类还有一个可变子类，允许您随意添加或删除对象"),n("。")],-1),S={href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Collections/Collections.html#//apple_ref/doc/uid/10000034i",target:"_blank",rel:"noopener noreferrer"},j=t(`<h3 id="arrays-are-ordered-collections-数组是有序集合" tabindex="-1"><a class="header-anchor" href="#arrays-are-ordered-collections-数组是有序集合" aria-hidden="true">#</a> Arrays Are Ordered Collections 数组是有序集合</h3><p>NSArray用于表示对象的有序集合。<strong>唯一的要求是每个项目都是Objective-C对象</strong>【可怕的容器特性】，没有要求每个对象都是相同类的实例。</p><p>为了在数组中保持顺序，每个元素都存储在以零为基数的索引处，如下图所示。</p><figure><img src="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Art/orderedarrayofobjects.png" alt="An Array of Objective-C Objects" tabindex="0" loading="lazy"><figcaption>An Array of Objective-C Objects</figcaption></figure><h4 id="creating-arrays-创建数组" tabindex="-1"><a class="header-anchor" href="#creating-arrays-创建数组" aria-hidden="true">#</a> Creating Arrays 创建数组</h4><p>与本章前面描述的值类一样，您可以通过<strong>分配和初始化、类工厂方法或literal语法</strong>来创建数组。</p><p>根据对象数量，提供了各种不同的初始化和工厂方法：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">+</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>arrayWithObject<span class="token punctuation">:</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>anObject<span class="token punctuation">;</span>
<span class="token operator">+</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>arrayWithObjects<span class="token punctuation">:</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>firstObject<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token operator">-</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>initWithObjects<span class="token punctuation">:</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>firstObject<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>arrayWithObjects:和initWithObjects:方法<strong>都接受以nil结尾的可变数量的参数</strong>，这意味着您<strong>必须包括nil作为最后一个值</strong>，像这样：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSArray <span class="token operator">*</span>someArray <span class="token operator">=</span>
  <span class="token punctuation">[</span>NSArray arrayWithObjects<span class="token punctuation">:</span>someObject<span class="token punctuation">,</span> someString<span class="token punctuation">,</span> someNumber<span class="token punctuation">,</span> someValue<span class="token punctuation">,</span> nil<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个示例创建了一个像上图中所示的数组。第一个对象，someObject，将具有索引0；最后一个对象，someValue，将具有索引3。</p><p>如果提供的值中有一个是nil，可能会意外地截断项目列表，就像这样：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>id firstObject <span class="token operator">=</span> <span class="token string">@&quot;someString&quot;</span><span class="token punctuation">;</span>
id secondObject <span class="token operator">=</span> nil<span class="token punctuation">;</span>
id thirdObject <span class="token operator">=</span> <span class="token string">@&quot;anotherString&quot;</span><span class="token punctuation">;</span>
NSArray <span class="token operator">*</span>someArray <span class="token operator">=</span>
<span class="token punctuation">[</span>NSArray arrayWithObjects<span class="token punctuation">:</span>firstObject<span class="token punctuation">,</span> secondObject<span class="token punctuation">,</span> thirdObject<span class="token punctuation">,</span> nil<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种情况下，someArray只包含firstObject，因为nil secondObject将被解释为项目列表的结尾。</p><h5 id="literal-syntax-literal-语法" tabindex="-1"><a class="header-anchor" href="#literal-syntax-literal-语法" aria-hidden="true">#</a> Literal Syntax Literal 语法</h5><p>还可以使用Objective-C Literal语法创建数组，就像这样：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSArray <span class="token operator">*</span>someArray <span class="token operator">=</span> <span class="token operator">@</span><span class="token punctuation">[</span>firstObject<span class="token punctuation">,</span> secondObject<span class="token punctuation">,</span> thirdObject<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>在使用这种文字语法时，不应该用nil来终止对象列表</strong>，事实上nil是一个无效值。例如，如果尝试执行以下代码，将在运行时引发异常：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>id firstObject <span class="token operator">=</span> <span class="token string">@&quot;someString&quot;</span><span class="token punctuation">;</span>
id secondObject <span class="token operator">=</span> nil<span class="token punctuation">;</span>
NSArray <span class="token operator">*</span>someArray <span class="token operator">=</span> <span class="token operator">@</span><span class="token punctuation">[</span>firstObject<span class="token punctuation">,</span> secondObject<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 异常：&quot;尝试插入nil对象&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),N={href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/FoundationTypesandCollections/FoundationTypesandCollections.html#//apple_ref/doc/uid/TP40011210-CH7-SW34",target:"_blank",rel:"noopener noreferrer"},y=t(`<h4 id="querying-array-objects-查询数组对象" tabindex="-1"><a class="header-anchor" href="#querying-array-objects-查询数组对象" aria-hidden="true">#</a> Querying Array Objects 查询数组对象</h4><p>创建数组后，您可以查询它以获取诸如对象数量或它是否包含特定项等信息：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSUInteger numberOfItems <span class="token operator">=</span> <span class="token punctuation">[</span>someArray count<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>someArray containsObject<span class="token punctuation">:</span>someString<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您还可以查询数组以获取给定索引处的项目。如果尝试请求无效的索引，将在运行时获得越界异常，因此应始终首先检查项目数：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>someArray count<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;First item is: %@&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>someArray objectAtIndex<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个示例检查项目数是否大于零。如果是，它会记录第一个项目的描述，该项目的索引为零。</p><h5 id="subscripting-下标" tabindex="-1"><a class="header-anchor" href="#subscripting-下标" aria-hidden="true">#</a> Subscripting 下标</h5><p>还有一个使用下标语法的替代方法，就像访问标准的C数组中的值一样。前面的示例可以像这样重写：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>someArray count<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;First item is: %@&quot;</span><span class="token punctuation">,</span> someArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的语法更简洁，更容易理解，用于访问数组中的元素。</p><h4 id="sorting-array-objects-为数组元素排序" tabindex="-1"><a class="header-anchor" href="#sorting-array-objects-为数组元素排序" aria-hidden="true">#</a> Sorting Array Objects 为数组元素排序</h4><p>NSArray类还提供了各种方法来对其收集的对象进行排序。<strong>由于NSArray是不可变的，因此每个这些方法都返回一个包含以排序顺序排列的项目的新数组</strong>。</p><p>例如，您可以按调用每个字符串上的compare:的结果对字符串数组进行排序，如下所示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>    NSArray <span class="token operator">*</span>unsortedStrings <span class="token operator">=</span> <span class="token operator">@</span><span class="token punctuation">[</span><span class="token string">@&quot;gammaString&quot;</span><span class="token punctuation">,</span> <span class="token string">@&quot;alphaString&quot;</span><span class="token punctuation">,</span> <span class="token string">@&quot;betaString&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    NSArray <span class="token operator">*</span>sortedStrings <span class="token operator">=</span>
                 <span class="token punctuation">[</span>unsortedStrings sortedArrayUsingSelector<span class="token punctuation">:</span><span class="token keyword">@selector</span><span class="token punctuation">(</span>compare<span class="token punctuation">:</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="mutability-可变性" tabindex="-1"><a class="header-anchor" href="#mutability-可变性" aria-hidden="true">#</a> Mutability 可变性</h4><p>尽管NSArray类本身是不可变的，但这不会影响任何收集的对象。如果您将可变字符串添加到不可变数组中，例如：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSMutableString <span class="token operator">*</span>mutableString <span class="token operator">=</span> <span class="token punctuation">[</span>NSMutableString stringWithString<span class="token punctuation">:</span><span class="token string">@&quot;Hello&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
NSArray <span class="token operator">*</span>immutableArray <span class="token operator">=</span> <span class="token operator">@</span><span class="token punctuation">[</span>mutableString<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这不会阻止您更改字符串：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>immutableArray count<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        id string <span class="token operator">=</span> immutableArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>string isKindOfClass<span class="token punctuation">:</span><span class="token punctuation">[</span>NSMutableString class<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">[</span>string appendString<span class="token punctuation">:</span><span class="token string">@&quot; World!&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果您需要在初始创建后能够添加或删除数组中的对象，您需要使用NSMutableArray，它提供了各种方法来添加、删除或替换一个或多个对象：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>    NSMutableArray <span class="token operator">*</span>mutableArray <span class="token operator">=</span> <span class="token punctuation">[</span>NSMutableArray array<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>mutableArray addObject<span class="token punctuation">:</span><span class="token string">@&quot;gamma&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>mutableArray addObject<span class="token punctuation">:</span><span class="token string">@&quot;alpha&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>mutableArray addObject<span class="token punctuation">:</span><span class="token string">@&quot;beta&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
 
    <span class="token punctuation">[</span>mutableArray replaceObjectAtIndex<span class="token punctuation">:</span><span class="token number">0</span> withObject<span class="token punctuation">:</span><span class="token string">@&quot;epsilon&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个示例创建了一个数组，最终包含对象@&quot;epsilon&quot;、@&quot;alpha&quot;和@&quot;beta&quot;。</p><p>还可以就地对可变数组进行排序，而不创建次要数组：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code> <span class="token punctuation">[</span>mutableArray sortUsingSelector<span class="token punctuation">:</span><span class="token keyword">@selector</span><span class="token punctuation">(</span>caseInsensitiveCompare<span class="token punctuation">:</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这种情况下，包含的项目将按照不区分大小写的升序排列 <code>@&quot;alpha&quot;</code>, <code>@&quot;beta&quot;</code>, <code>@&quot;epsilon&quot;</code>.</p><h3 id="sets-are-unordered-collections-set是无序的集合" tabindex="-1"><a class="header-anchor" href="#sets-are-unordered-collections-set是无序的集合" aria-hidden="true">#</a> Sets Are Unordered Collections set是无序的集合</h3><p>NSSet类似于数组，但它维护一个无序的不同对象的组，如下图所示。</p><figure><img src="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Art/unorderedsetofobjects.png" alt="A Set of Objects" tabindex="0" loading="lazy"><figcaption>A Set of Objects</figcaption></figure><p>因为集合不维护顺序，所以在测试<code>membership</code>时【也就是查找性能】，它们相对于数组提供了性能改进。</p><p>基本的NSSet类是不可变的，所以它的内容必须在创建时指定，可以使用分配和初始化或类工厂方法，如下所示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSSet <span class="token operator">*</span>simpleSet <span class="token operator">=</span>
      <span class="token punctuation">[</span>NSSet setWithObjects<span class="token punctuation">:</span><span class="token string">@&quot;Hello, World!&quot;</span><span class="token punctuation">,</span> <span class="token operator">@</span><span class="token number">42</span><span class="token punctuation">,</span> aValue<span class="token punctuation">,</span> anObject<span class="token punctuation">,</span> nil<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>与NSArray一样，initWithObjects:和setWithObjects:方法都接受以nil结尾的可变参数。可变NSSet子类是NSMutableSet。</p><p><strong>集合只存储对单个对象的一个引用</strong>，即使您尝试多次添加一个对象：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSNumber <span class="token operator">*</span>number <span class="token operator">=</span> <span class="token operator">@</span><span class="token number">42</span><span class="token punctuation">;</span>
    NSSet <span class="token operator">*</span>numberSet <span class="token operator">=</span>
      <span class="token punctuation">[</span>NSSet setWithObjects<span class="token punctuation">:</span>number<span class="token punctuation">,</span> number<span class="token punctuation">,</span> number<span class="token punctuation">,</span> number<span class="token punctuation">,</span> nil<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// numberSet only contains one object</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,34),f={href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Collections/Articles/Sets.html#//apple_ref/doc/uid/20000136",target:"_blank",rel:"noopener noreferrer"},C=t('<h3 id="dictionaries-collect-key-value-pairs-字典收集键-值对" tabindex="-1"><a class="header-anchor" href="#dictionaries-collect-key-value-pairs-字典收集键-值对" aria-hidden="true">#</a> Dictionaries Collect Key-Value Pairs 字典收集键-值对</h3><p>与仅维护一组有序或无序的对象不同，NSDictionary 存储对象与指定的键<code>key</code>关联，然后可以用于检索。</p><p>最佳实例就是使用字符串对象作为字典的键，如下图所示。</p><figure><img src="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Art/dictionaryofobjects.png" alt="A Dictionary of Objects" tabindex="0" loading="lazy"><figcaption>A Dictionary of Objects</figcaption></figure><p>注意：<strong>可以使用其他对象作为键，但需要注意的是，字典会复制每个键以供使用，因此作为key的对象必须支持 NSCopying</strong>。</p>',5),O={href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueCoding/index.html#//apple_ref/doc/uid/10000107i",target:"_blank",rel:"noopener noreferrer"},q=t(`<h4 id="creating-dictionaries-创建字典" tabindex="-1"><a class="header-anchor" href="#creating-dictionaries-创建字典" aria-hidden="true">#</a> Creating Dictionaries 创建字典</h4><p>你可以使用分配和初始化，或者类工厂方法来创建字典，如下所示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSDictionary <span class="token operator">*</span>dictionary <span class="token operator">=</span> <span class="token punctuation">[</span>NSDictionary dictionaryWithObjectsAndKeys<span class="token punctuation">:</span>
               someObject<span class="token punctuation">,</span> <span class="token string">@&quot;anObject&quot;</span><span class="token punctuation">,</span>
         <span class="token string">@&quot;Hello, World!&quot;</span><span class="token punctuation">,</span> <span class="token string">@&quot;helloString&quot;</span><span class="token punctuation">,</span>
                      <span class="token operator">@</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token string">@&quot;magicNumber&quot;</span><span class="token punctuation">,</span>
                someValue<span class="token punctuation">,</span> <span class="token string">@&quot;aValue&quot;</span><span class="token punctuation">,</span>
                         nil<span class="token punctuation">]</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，对于 <code>dictionaryWithObjectsAndKeys:</code> 和 <code>initWithObjectsAndKeys:</code> 方法，<strong>每个对象在其键之前指定</strong>，而且对象和键的列表必须以 nil 结束。</p><h5 id="literal-syntax-literal-语法-1" tabindex="-1"><a class="header-anchor" href="#literal-syntax-literal-语法-1" aria-hidden="true">#</a> Literal Syntax Literal 语法</h5><p>Objective-C 也提供了用于创建字典的Literal语法，如下所示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSDictionary <span class="token operator">*</span>dictionary <span class="token operator">=</span> <span class="token operator">@</span><span class="token punctuation">{</span>
              <span class="token string">@&quot;anObject&quot;</span> <span class="token punctuation">:</span> someObject<span class="token punctuation">,</span>
           <span class="token string">@&quot;helloString&quot;</span> <span class="token punctuation">:</span> <span class="token string">@&quot;Hello, World!&quot;</span><span class="token punctuation">,</span>
           <span class="token string">@&quot;magicNumber&quot;</span> <span class="token punctuation">:</span> <span class="token operator">@</span><span class="token number">42</span><span class="token punctuation">,</span>
                <span class="token string">@&quot;aValue&quot;</span> <span class="token punctuation">:</span> someValue
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，对于字典字面语法，键在其对象之前指定，而且不需要以 nil 结束。</p><h4 id="querying-dictionaries-查询字典" tabindex="-1"><a class="header-anchor" href="#querying-dictionaries-查询字典" aria-hidden="true">#</a> Querying Dictionaries 查询字典</h4><p>一旦你创建了一个字典，你可以使用如下方式查询存储在给定键下的对象：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSNumber <span class="token operator">*</span>storedNumber <span class="token operator">=</span> <span class="token punctuation">[</span>dictionary objectForKey<span class="token punctuation">:</span><span class="token string">@&quot;magicNumber&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果未找到该对象，<code>objectForKey:</code> 方法将返回 nil。</p><p>还有一种使用下标语法来代替 <code>objectForKey:</code> 的查询方法，如下所示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSNumber <span class="token operator">*</span>storedNumber <span class="token operator">=</span> dictionary<span class="token punctuation">[</span><span class="token string">@&quot;magicNumber&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="mutability-可变性-1" tabindex="-1"><a class="header-anchor" href="#mutability-可变性-1" aria-hidden="true">#</a> Mutability 可变性</h4><p>如果你需要在创建后向字典中添加或移除对象，你需要使用 <code>NSMutableDictionary</code> 子类，如下所示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token punctuation">[</span>dictionary setObject<span class="token punctuation">:</span><span class="token string">@&quot;another string&quot;</span> forKey<span class="token punctuation">:</span><span class="token string">@&quot;secondString&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>dictionary removeObjectForKey<span class="token punctuation">:</span><span class="token string">@&quot;anObject&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="represent-nil-with-nsnull-用-nsnull-表示-nil" tabindex="-1"><a class="header-anchor" href="#represent-nil-with-nsnull-用-nsnull-表示-nil" aria-hidden="true">#</a> Represent nil with NSNull 用 NSNull 表示 nil</h3><p>在本节描述的这些集合类中，无法将 nil 添加到集合中，因为在 Objective-C 中，nil 表示“没有对象”。如果你需要在集合中表示“没有对象”，你可以使用 NSNull 类：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSArray <span class="token operator">*</span>array <span class="token operator">=</span> <span class="token operator">@</span><span class="token punctuation">[</span> <span class="token string">@&quot;string&quot;</span><span class="token punctuation">,</span> <span class="token operator">@</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>NSNull null<span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>NSNull 是一个单例类，这意味着 null 方法始终会返回相同的实例。这<strong>意味着你可以检查数组中的对象是否等于共享的 NSNull 实例</strong>：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>id object <span class="token keyword">in</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token operator">==</span> <span class="token punctuation">[</span>NSNull null<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;Found a null object&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="use-collections-to-persist-your-object-graph-使用集合来持久化对象图" tabindex="-1"><a class="header-anchor" href="#use-collections-to-persist-your-object-graph-使用集合来持久化对象图" aria-hidden="true">#</a> Use Collections to Persist Your Object Graph 使用集合来持久化对象图</h2><p>NSArray 和 NSDictionary 类使将它们的内容直接写入磁盘变得很容易，如下所示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSURL <span class="token operator">*</span>fileURL <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
NSArray <span class="token operator">*</span>array <span class="token operator">=</span> <span class="token operator">@</span><span class="token punctuation">[</span><span class="token string">@&quot;first&quot;</span><span class="token punctuation">,</span> <span class="token string">@&quot;second&quot;</span><span class="token punctuation">,</span> <span class="token string">@&quot;third&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

BOOL success <span class="token operator">=</span> <span class="token punctuation">[</span>array writeToURL<span class="token punctuation">:</span>fileURL atomically<span class="token punctuation">:</span>YES<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// an error occured...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果每个包含的对象都是属性列表类型（NSArray、NSDictionary、NSString、NSData、NSDate 和 NSNumber），<strong>则可以从磁盘重新创建整个层次结构</strong>，如下所示：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSURL <span class="token operator">*</span>fileURL <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
NSArray <span class="token operator">*</span>array <span class="token operator">=</span> <span class="token punctuation">[</span>NSArray arrayWithContentsOfURL<span class="token punctuation">:</span>fileURL<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// an error occurred...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27),x={href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/PropertyLists/Introduction/Introduction.html#//apple_ref/doc/uid/10000048i",target:"_blank",rel:"noopener noreferrer"},A=a("p",null,[a("strong",null,"如果你需要持久化除上述标准属性列表类之外的其他类型的对象，可以使用一个归档器对象"),n("，比如 NSKeyedArchiver，来创建一个包含收集的对象的归档文件。")],-1),w=a("p",null,[n("创建归档文件的"),a("strong",null,"唯一要求是每个对象必须支持 NSCoding 协议"),n("。这意味着每个对象必须知道如何将自己编码到归档文件中（通过实现 encodeWithCoder: 方法），并在从现有归档文件中读取时解码自己（通过 initWithCoder: 方法）。")],-1),_=a("p",null,"NSArray、NSSet 和 NSDictionary 类及其可变子类都支持 NSCoding，这意味着你可以使用归档器来持久化包含对象的复杂层次结构。如果使用界面生成器（Interface Builder）来布局窗口和视图，那么生成的 nib 文件只是你通过可视化方式创建的对象层次结构的归档文件。在运行时，nib 文件会使用相关的类解档为对象层次结构。",-1),I={href:"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Archiving/Archiving.html#//apple_ref/doc/uid/10000047i",target:"_blank",rel:"noopener noreferrer"},V=t(`<h2 id="use-the-most-efficient-collection-enumeration-techniques-使用最高效的集合枚举技术" tabindex="-1"><a class="header-anchor" href="#use-the-most-efficient-collection-enumeration-techniques-使用最高效的集合枚举技术" aria-hidden="true">#</a> Use the Most Efficient Collection Enumeration Techniques 使用最高效的集合枚举技术</h2><p>Objective-C和Cocoa或Cocoa Touch提供了各种枚举集合内容的方法。虽然可以使用传统的C for循环来遍历集合的内容，就像这样：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token punctuation">[</span>array count<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    id eachObject <span class="token operator">=</span> <span class="token punctuation">[</span>array objectAtIndex<span class="token punctuation">:</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但最好的方法是使用本节中描述的一项技术。</p><h3 id="fast-enumeration-makes-it-easy-to-enumerate-a-collection-快速枚举使枚举集合变得容易" tabindex="-1"><a class="header-anchor" href="#fast-enumeration-makes-it-easy-to-enumerate-a-collection-快速枚举使枚举集合变得容易" aria-hidden="true">#</a> Fast Enumeration Makes It Easy to Enumerate a Collection 快速枚举使枚举集合变得容易</h3><p>许多集合类都符合NSFastEnumeration协议，包括NSArray、NSSet和NSDictionary。这意味着你可以使用快速枚举，这是Objective-C语言级别的特性。</p><p><strong>用于枚举数组或集合内容的快速枚举语法如下</strong>：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>variable<span class="token operator">&gt;</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>collection<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>举个例子，你可以使用快速枚举来记录数组中每个对象的描述，就像这样：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>id eachObject <span class="token keyword">in</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;对象：%@&quot;</span><span class="token punctuation">,</span> eachObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每次循环都会自动将eachObject变量设置为当前对象，因此每个对象都会生成一条日志记录。</p><p>如果你使用快速枚举与字典一起，<strong>你会遍历字典的键</strong>，就像这样：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>    <span class="token keyword">for</span> <span class="token punctuation">(</span>NSString <span class="token operator">*</span>eachKey <span class="token keyword">in</span> dictionary<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        id object <span class="token operator">=</span> dictionary<span class="token punctuation">[</span>eachKey<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;Object: %@ for key: %@&quot;</span><span class="token punctuation">,</span> object<span class="token punctuation">,</span> eachKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>快速枚举的行为类似于标准的C for循环，因此你可以使用<code>break</code>关键字来中断迭代，或使用<code>continue</code>继续到下一个元素。</p><p>如果你正在枚举一个有序集合，枚举将按照该顺序进行。对于NSArray，这意味着第一次迭代将是索引为0的对象，第二次是索引为1的对象，依此类推。如果你需要跟踪当前索引，只需在发生迭代时计数即可：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>id eachObject <span class="token keyword">in</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;索引为 %i 的对象是：%@&quot;</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> eachObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    index<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在快速枚举期间，即使集合是可变的，你也不能对集合进行修改</strong>。<strong>如果你尝试在循环内部添加或移除集合对象，将会生成运行时异常。</strong>【可惜了】</p><h3 id="most-collections-also-support-enumerator-objects-大多数集合也支持枚举器对象" tabindex="-1"><a class="header-anchor" href="#most-collections-also-support-enumerator-objects-大多数集合也支持枚举器对象" aria-hidden="true">#</a> Most Collections Also Support Enumerator Objects 大多数集合也支持枚举器对象</h3><p>在Cocoa和Cocoa Touch中，<strong>你还可以使用NSEnumerator对象来枚举许多集合</strong>。</p><p>例如，你可以向NSArray请求一个<code>objectEnumerator</code>或<code>reverseObjectEnumerator</code>。你可以将这些对象与快速枚举一起使用，就像这样：</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>id eachObject <span class="token keyword">in</span> <span class="token punctuation">[</span>array reverseObjectEnumerator<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，循环将按照相反的顺序迭代收集的对象，因此最后一个对象将首先出现，依此类推。</p><p>你还可以通过多次调用枚举器的<code>nextObject</code>方法来迭代内容，就像这样：</p><div class="language-objective-c line-numbers-mode" data-ext="objective-c"><pre class="language-objective-c"><code>id eachObject;
while ( (eachObject = [enumerator nextObject]) ) {
    NSLog(@&quot;当前对象是：%@&quot;, eachObject);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，使用while循环将<code>eachObject</code>变量设置为每次循环的下一个对象。当没有更多的对象时，<code>nextObject</code>方法将返回nil，这会被视为逻辑值false，从而停止循环。</p><ul><li>注意：因为在条件分支或循环中设置变量时，常见的编程错误是使用C赋值运算符（=），而实际上你可能意图使用相等运算符（==），所以编译器会在这种情况下发出警告：</li></ul><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>someVariable <span class="token operator">=</span> YES<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果你真的打算重新分配一个变量（整个赋值的逻辑值是左边最终值），你可以通过将赋值括在括号中来表示这一点，就像这样：</li></ul><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>someVariable <span class="token operator">=</span> YES<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与快速枚举一样，<strong>在枚举过程中不能对集合进行修改</strong>。此外，字面上意思，使用快速枚举要比手动使用枚举器对象更快。</p><h3 id="many-collections-support-block-based-enumeration-许多集合支持基于块的枚举" tabindex="-1"><a class="header-anchor" href="#many-collections-support-block-based-enumeration-许多集合支持基于块的枚举" aria-hidden="true">#</a> Many Collections Support Block-Based Enumeration 许多集合支持基于块的枚举</h3><p>你还可以使用块<code>block</code>来枚举NSArray、NSSet和NSDictionary。关于块的详细内容将在下一章中介绍。</p>`,32);function W(T,D){const s=p("ExternalLinkIcon");return c(),i("div",null,[r,a("p",null,[n("有关Quartz 2D绘图引擎的更多信息，请参阅Quartz 2D编程指南*"),a("a",u,[n("Quartz 2D Programming Guide"),e(s)]),n("*。")]),d,a("p",null,[n("可用的格式说明符在"),a("a",k,[n("String Format Specifiers"),e(s)]),n("中描述。有关字符串的大致信息，请参阅*"),a("a",b,[n("String Programming Guide"),e(s)]),n("*。")]),v,a("p",null,[n("与以某种方式维护每个收集对象的单独副本不同，集合类使用强引用来跟踪它们的内容。这意味着您添加到集合的任何对象将至少在集合存在的时间内保持活动，如在《通过拥有和责任来管理对象图 "),a("a",m,[n("Manage the Object Graph through Ownership and Responsibility"),e(s)]),n("》中所述。")]),g,h,a("p",null,[n("有关Cocoa和Cocoa Touch中可用的不同集合类的更多信息，请参阅《"),a("em",null,[a("a",S,[n("Collections Programming Topics"),e(s)])]),n(" 集合编程主题》。")]),j,a("p",null,[n("如果确实需要在其中一个集合类中表示nil值，应该使用NSNull单例类，如在“使用NSNull表示nil "),a("a",N,[n("Represent nil with NSNull"),e(s)]),n("”中所述。")]),y,a("p",null,[n("更多信息详见 "),a("a",f,[n("Sets: Unordered Collections of Objects"),e(s)]),n(".")]),C,a("p",null,[n("然而，如果您希望能够使用键值编码（Key-Value Coding），如《"),a("em",null,[a("a",O,[n("Key-Value Coding Programming Guide"),e(s)])]),n(" 键值编码编程指南》中所描述，那么必须使用字符串键来表示字典对象。")]),q,a("p",null,[n("有关属性列表的更多信息，请参阅《属性列表编程指南 "),a("em",null,[a("a",x,[n("Property List Programming Guide"),e(s)])]),n("》。")]),A,w,_,a("p",null,[n("有关归档的更多信息，请参阅《归档和序列化编程指南 "),a("em",null,[a("a",I,[n("Archives and Serializations Programming Guide"),e(s)])]),n("》。")]),V])}const P=o(l,[["render",W],["__file","ValuesAndCollenctions.html.vue"]]);export{P as default};
