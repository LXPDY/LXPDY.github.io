import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as c,c as l,b as n,d as a,a as s,w as u,f as o}from"./app-f8f092e2.js";const d="/assets/image/MVC.png",r="/assets/image/UIViewAnimationOptions.png",k="/assets/image/transitionWithView.png",v="/assets/image/transitionFromView.png",m="/assets/image/dynamicAnimation/1.png",b="/assets/image/dynamicAnimation/2.png",g="/assets/image/dynamicAnimation/3.png",h="/assets/image/dynamicAnimation/4.png",w="/assets/image/dynamicAnimation/5.png",f="/assets/image/dynamicAnimation/6.png",y="/assets/image/dynamicAnimation/7.png",S="/assets/image/dynamicAnimation/8.png",j="/assets/image/dynamicAnimation/9.png",C="/assets/image/dynamicAnimation/10.png",_={},x=n("h1",{id:"cs193p-斯坦福ios开发公开课",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#cs193p-斯坦福ios开发公开课","aria-hidden":"true"},"#"),a(" CS193P 斯坦福iOS开发公开课")],-1),I=n("h2",{id:"_2023-10-31-入门",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2023-10-31-入门","aria-hidden":"true"},"#"),a(" 2023.10.31 入门")],-1),U=n("p",null,"对斯坦福的这门iOS开发课早有耳闻，在完成了Programing with Objective-C的翻译之后，我决定再从开发的层面继续巩固我的iOS开发基础，毕竟学习语言用不到Xcode，只能说纸上谈兵罢了。",-1),V=n("p",null,"这门课我看的是“Season Fall 2013/14”的版本",-1),R={href:"https://www.bilibili.com/video/BV1yP4y1L7pw/?spm_id_from=333.999.0.0&vd_source=b758c014aac476498aacd7a2f68cd629",target:"_blank",rel:"noopener noreferrer"},N={href:"https://cs193p.m2m.at/cs193p-iphone-application-developement/",target:"_blank",rel:"noopener noreferrer"},G=o('<h3 id="_1-class-logistics-overview-of-ios-mvc-objective-c" tabindex="-1"><a class="header-anchor" href="#_1-class-logistics-overview-of-ios-mvc-objective-c" aria-hidden="true">#</a> 1. Class Logistics, Overview of iOS, MVC, Objective-C</h3><p>第一节课上的比较简单，其中的重点是MVC这个设计模式</p><figure><img src="'+d+`" alt="MVC" tabindex="0" loading="lazy"><figcaption>MVC</figcaption></figure><h2 id="_2023-11-1-11-3" tabindex="-1"><a class="header-anchor" href="#_2023-11-1-11-3" aria-hidden="true">#</a> 2023.11.1-11.3</h2><h3 id="_2-xcode-5" tabindex="-1"><a class="header-anchor" href="#_2-xcode-5" aria-hidden="true">#</a> 2. Xcode 5</h3><p>第二节课从纸牌游戏引入，用Button控件做了一个按钮，作业就是把牌控件默认为背面并从牌堆中随机取牌</p><p>Xocde的控件预览向代码区的拖拽设计确实遥遥领先，而MVC设计模式在Xocde的工程结构里得到了良好的体现</p><p>就是Xocode可控选项比起10年前多太多了，需要将Button控件的Style设置为Default才能正常翻转，而原本的课程中没有这个选项，这大概是我在iOS工程开发上遇到的第一个Bug</p><h2 id="_2023-11-4-11-6" tabindex="-1"><a class="header-anchor" href="#_2023-11-4-11-6" aria-hidden="true">#</a> 2023.11.4-11.6</h2><h3 id="_3-objective-c" tabindex="-1"><a class="header-anchor" href="#_3-objective-c" aria-hidden="true">#</a> 3.Objective-C</h3><p>第三节课大大优化了纸牌游戏，作业上增加了2-3模式的切换，增加了描述、历史拖拽条以及牌的数量。</p><p>这几天实在是各种事情忙，<s>后面的描述和拖拽条的实现直接选择Copy了</s></p><h2 id="_2023-11-8-11-10" tabindex="-1"><a class="header-anchor" href="#_2023-11-8-11-10" aria-hidden="true">#</a> 2023.11.8-11.10</h2><h3 id="_4-foundation-and-attributed-strings" tabindex="-1"><a class="header-anchor" href="#_4-foundation-and-attributed-strings" aria-hidden="true">#</a> 4.Foundation and Attributed Strings</h3><p>讲了一堆Foundation框架提供的功能，以及Attributed Strings这个概念，是一门承上启下的课，具体的应用应该会在后面的课程讲到。</p><p>11.16补充</p><ul><li>在下节课的Demo中，展示了如何通过Attributed Strings来修改<code>Text View</code>中相关选中文字的属性，比如说文字颜色和描边</li></ul><h2 id="_2023-11-16" tabindex="-1"><a class="header-anchor" href="#_2023-11-16" aria-hidden="true">#</a> 2023.11.16</h2><h3 id="_5-view-controller-lifecycle" tabindex="-1"><a class="header-anchor" href="#_5-view-controller-lifecycle" aria-hidden="true">#</a> 5. View Controller Lifecycle</h3><h4 id="view-controller-lifecycle" tabindex="-1"><a class="header-anchor" href="#view-controller-lifecycle" aria-hidden="true">#</a> View Controller Lifecycle</h4><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>viewDidLoad <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token keyword">super</span> viewDidLoad<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// Do any additional setup after loading the view.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这部分的代码用于初始化你的View视图，但是值得注意的是，即使你的控件的对象已经生成并且可以被操作，但是实际上屏幕上还并没有渲染绘制真正的图形，所以课程中提到，在这部分代码中，不应当包含几何操作，视图形状的操作。</li><li>整个view生命周期中，它<strong>只执行一次</strong></li></ul><hr><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>viewWillAppear<span class="token punctuation">:</span><span class="token punctuation">(</span>BOOL<span class="token punctuation">)</span>animated<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>在view<strong>出现时</strong>被调用</li><li>由于应用程序存在各种视图切换，它会被多次调用</li><li>可以放置一些高开销的代码</li><li>可以操作几何（OK），但是翻转屏幕时并不会重新调用这个方法</li></ul><hr><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>viewWillDisappear<span class="token punctuation">:</span><span class="token punctuation">(</span>BOOL<span class="token punctuation">)</span>animated<span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token keyword">super</span> viewWillDisappear<span class="token punctuation">:</span>animated<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token keyword">self</span> rememberScrollPosition<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token keyword">self</span> saveDataToPermanentStore<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在view<strong>消失时</strong>被调用</li><li>由于应用程序存在各种视图切换，它会被多次调用</li><li>可以用于停止view的活动以节省资源</li></ul><hr><p>以上两个方法都有<code>did</code>版本，顾名思义就是在事件发生后被调用：</p><ul><li><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>viewDidAppear<span class="token punctuation">:</span><span class="token punctuation">(</span>BOOL<span class="token punctuation">)</span>animated<span class="token punctuation">;</span>
<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>viewDidDisappear<span class="token punctuation">:</span><span class="token punctuation">(</span>BOOL<span class="token punctuation">)</span>animated<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><p>而对于几何操作，我们有对应的方法：</p><ul><li><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>view<span class="token punctuation">{</span>Will<span class="token punctuation">,</span>Did<span class="token punctuation">}</span>LayoutSubviews<span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><hr><p>对于内存不足的情况：<code>didReceiveMemoryWarning</code></p><ul><li>此时可以让应用释放一些堆上的内存</li></ul><hr><p>更单纯的代码初始化结构（一般不被使用，而是直接通过Xcode生成布局和对应的控制器）</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>setup<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>awakeFromNib<span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token keyword">self</span> setup<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token operator">-</span><span class="token punctuation">(</span>instancetype<span class="token punctuation">)</span>initWithNibName<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>name bundle<span class="token punctuation">:</span><span class="token punctuation">(</span>NSBundle <span class="token operator">*</span><span class="token punctuation">)</span>bundle<span class="token punctuation">{</span>
  <span class="token keyword">self</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">super</span> initWithNibName<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>name bundle<span class="token punctuation">:</span><span class="token punctuation">(</span>NSBundle <span class="token operator">*</span><span class="token punctuation">)</span>bundle<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token keyword">self</span> setup<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>综上所述，一个View Controller Lifecycle是这样的</p><ul><li><p><code>Instantiated</code>（实例化）</p><ul><li>通常从<code>storyboard</code>中导出，后续会提到实例化的多种方法</li></ul></li><li><p><code>awakeFromNib</code>调用</p></li><li><p><code>oulets</code>出口得到设置</p></li><li><p><code>viewDidLoad</code></p><ul><li>通常的初始化代码入口</li></ul></li><li><p>接下来是程序运行时可能发生的情况</p><ul><li>当需要确立几何上的问题 <ul><li><code>viewWillLayoutSubviews:</code>以及<code>viewDidlLayoutSubviews</code></li></ul></li><li>当MVC视图在屏幕上来回切换时，以下方法将会响应 <ul><li>使用它们来完成当视图可视与不可视切换时，几何学上的变动</li><li><code>viewWillAppear:</code>以及<code>viewDidlAppear:</code></li><li><code>viewWillLayoutSubviews:</code>以及<code>viewDidlLayoutSubviews:</code><ul><li>当屏幕发生翻转时，<code>will/did</code> Rotate(翻转) <code>To/Form</code> 的消息将会送达</li></ul></li><li><code>viewWillDisappear:</code>以及<code>viewDidDisappear:</code></li></ul></li><li>当内存不足时 <ul><li><code>didReceiveMemoryWarning</code></li></ul></li></ul><p>生命周期中不存在<code>unload</code>,以上就是所谓的&#39;视图控制器生命周期&#39;</p></li></ul><hr><p>在跟着课程做demo的时候，遇到了与第一节类似的Bug，在敲入代码后，代码运行报错</p><p><code> [[NSMutableAttributedString alloc]initWithString:self.outlineButton.currentTitle];</code></p><p>这一句的<code>initWithString</code>的参数，告诉我是<code>nil</code>.</p><p>考虑到之前有过类似的情况，我马上意识到了在这里，这个Button要不是不能被设置属性，不然就是没初始化。</p><p>在storyboard的设置里略微查找后，我发现端倪所在，这个Button的<code>style</code>是<code>plain</code>,我暂时还不知道它的含义，但是它大概率造成控件的一些属性无法被修改，再把<code>style</code>修改为<code>default</code>，demo就能够正常构建运行了。</p><hr><h4 id="nsnotification" tabindex="-1"><a class="header-anchor" href="#nsnotification" aria-hidden="true">#</a> NSNotification</h4><p>本节课只讲到监听系统的消息的部分</p><p><code>NSNotifications</code></p><ul><li>之前课上PPT中MVC模型中所谓的“radio station”广播站</li></ul><p><code>NSNotificationCenter</code></p><ul><li><p>通过方法<code>[NSNotificationCenter defaultCenter]</code>获取默认的&quot;notification center&quot;</p></li><li><p>如果你想“监听电台”，则需要使用以下message</p><ul><li><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>addObserver<span class="token punctuation">:</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>observer	<span class="token comment">//观察者，也就是想要收听电台消息的对象</span>
  															<span class="token comment">//常见为controller的self</span>
  				selector<span class="token punctuation">:</span><span class="token punctuation">(</span>SEL<span class="token punctuation">)</span>methodToInvokeIfSomethingHappens
            										<span class="token comment">//当广播中的内容发生时调用的</span>
            										<span class="token comment">//observer的seletor</span>
            	name<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>name 
                								<span class="token comment">//电台名字，在某些地方是个常量</span>
           	object<span class="token punctuation">:</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>sender<span class="token punctuation">;</span>	<span class="token comment">//关注特定对象的变化，（填nil则是关注所有变化） </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><p>当广播发送时，你将会接收到信息，而接受者会像自己类似以下的消息进行处理</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>methodToInvokeIfSomethingHappens<span class="token punctuation">:</span><span class="token punctuation">(</span>NSNotification <span class="token operator">*</span><span class="token punctuation">)</span>notification
<span class="token punctuation">{</span>
  <span class="token comment">//NSNotification有以下属性</span>
  notification<span class="token punctuation">.</span>name			<span class="token comment">//广播站的名字，可以用于在文档中查阅</span>
  notification<span class="token punctuation">.</span>object		<span class="token comment">//sender的对象类型</span>
  notification<span class="token punctuation">.</span>userInfo	<span class="token comment">//广播提供的信息</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在结束收听后，要注意关闭广播站</p><ul><li>在demo中，教授选择在<code>viewWillAppear:</code>以及<code>viewDidlAppear:</code>中挂载监听和停止监听</li></ul><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token punctuation">[</span>center removeObserver<span class="token punctuation">:</span><span class="token keyword">self</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//向广播中心发生消息，表示自己停止收听该站</span>
<span class="token comment">//or</span>
<span class="token punctuation">[</span>center removeObserver<span class="token punctuation">:</span><span class="token keyword">self</span> 
 									name<span class="token punctuation">:</span>UIContentSizeCategoryDidChangeNotification 
 								object<span class="token punctuation">:</span>nil<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//停止收听该站的特定内容,推荐使用该写法以防止不小心消除了其他仍然需要监听的消息</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>center以<code>unsafe retained</code>形式保存收听者的指针，也就是说可能会向非法制造发送通知导致程序崩溃</li><li>不过iOS 7中已经会将指针设为nil</li></ul><p>对象结束生命周期后，这个方法会被调用</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>dealloc<span class="token punctuation">{</span>
  <span class="token comment">//但是值得注意的是，在这个方法执行时，程序已经将该对象的属性properties从堆中释放了</span>
  <span class="token comment">//可以在这里解决unsafe retained的问题</span>
	<span class="token punctuation">[</span><span class="token punctuation">[</span>NSNotificationCenter defaultCenter<span class="token punctuation">]</span> removeObserver<span class="token punctuation">:</span><span class="token keyword">self</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>代码示例</p><ul><li><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">//观察程序字体的改变</span>
NSNotificationCenter <span class="token operator">*</span>center <span class="token operator">=</span> <span class="token punctuation">[</span>NSNotificationCenter defaultCenter<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>center addObserver<span class="token punctuation">:</span><span class="token keyword">self</span>
					 selector<span class="token punctuation">:</span><span class="token keyword">@selector</span><span class="token punctuation">(</span>preferredFontsSizeChanged<span class="token punctuation">:</span><span class="token punctuation">)</span>
            	 name<span class="token punctuation">:</span>UIContentSizeCategoryDidChangeNotification
           	 object<span class="token punctuation">:</span>nil<span class="token punctuation">;</span><span class="token punctuation">]</span>

<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>preferredFontsSizeChanged<span class="token punctuation">:</span><span class="token punctuation">(</span>NSNotification <span class="token operator">*</span><span class="token punctuation">)</span>notification<span class="token punctuation">{</span>
  <span class="token comment">//在这里就可以为整个程序重设字体</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="_2023-11-18" tabindex="-1"><a class="header-anchor" href="#_2023-11-18" aria-hidden="true">#</a> 2023.11.18</h2><h4 id="_6-polymorphism-with-controllers-uinavigation-uitabbar" tabindex="-1"><a class="header-anchor" href="#_6-polymorphism-with-controllers-uinavigation-uitabbar" aria-hidden="true">#</a> 6.Polymorphism with Controllers, UINavigation, UITabBar</h4><p>这节课首先展示了利用将ViewController变为抽象类，再使用它的子类来实现代码。</p><p>课程展示了一个ppt动画，当你尝试进入一个页面的详细子界面(比如<code>UINavigationController</code>)时，一个新的MVC系统将会被启用，接管界面内容的控制，而当用户点击返回时，这个新的MVC结构将会从堆中被释放，所以程序员应当在释放前保存用户数据。</p><p>对于界面切换时的动作显示，我们引入一个新概念：</p><h5 id="segues" tabindex="-1"><a class="header-anchor" href="#segues" aria-hidden="true">#</a> <code>Segues</code></h5><ul><li><p>对于<code>UINavigationController</code>在日历软件的体现，则是<code>push</code>和<code>pop</code></p></li><li><p>在Xcode中，通过control拖拽将按钮控件与其他view视图连接在一起</p><ul><li><p>在视图中，两者间就会形成<code>segue</code>的图形，我们需要为它设置标识符以便于在代码中编写与其相关的部分</p></li><li><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">//以伪代码为例</span>
<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>prepareForSegue<span class="token punctuation">:</span><span class="token punctuation">(</span>UIStoryboardSegue <span class="token operator">*</span><span class="token punctuation">)</span>segue sender<span class="token punctuation">:</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>sender<span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">[</span>Segue<span class="token punctuation">.</span>destinationViewController isKindOfClass<span class="token punctuation">:</span><span class="token punctuation">[</span>DosomthingVC class<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    DosomthingVC <span class="token operator">*</span>doVC <span class="token operator">=</span> <span class="token punctuation">(</span>DosomthingVC <span class="token operator">*</span><span class="token punctuation">)</span>segue<span class="token punctuation">.</span>destinationViewController<span class="token punctuation">;</span>
    doVC<span class="token punctuation">.</span>neededInfo <span class="token operator">=</span> ……<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码展示了在通过segue进入子界面时，如何向新视图的VC注入信息，它将在<code>awakeFromNib</code>和<code>viewDidLoad</code>之间执行</p><p>教授抱怨了这种方式，因为此时UI到outlets输出口 还未建立，所以真正渲染仍然需要等到<code>viewDidLoad</code>执行时</p></li><li><p>也可以通过代码阻止segue</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span><span class="token punctuation">(</span>BOOL<span class="token punctuation">)</span>shouldPerformSegueWithIdentifier<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>identifier sender<span class="token punctuation">:</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>sender<span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">[</span>segue<span class="token punctuation">.</span>identifier isEqualToString<span class="token punctuation">:</span><span class="token string">@&quot;DoAParticularThing&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token keyword">self</span> canDoAParticularThing<span class="token punctuation">]</span> <span class="token operator">?</span> YES <span class="token punctuation">:</span> NO<span class="token punctuation">;</span>     
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>但是，在敲完demo代码后，经过调试，我发现以上<code>prepareForSegue:</code>消息并没有被发送，原因是因为我命名时多敲了个空格</p></li></ul><ol start="7"><li><h4 id="views-and-gestures" tabindex="-1"><a class="header-anchor" href="#views-and-gestures" aria-hidden="true">#</a> Views and Gestures</h4></li></ol><h5 id="uiview" tabindex="-1"><a class="header-anchor" href="#uiview" aria-hidden="true">#</a> <code>UIView</code></h5><ul><li><p>Xocde的常见控件都是在<code>UIView</code>上绘制的，也就是<code>self.view</code>这个属性，用于确立绘制区的范围和大小（它是个矩形）</p><ul><li>你可以选择绘制超出底层view的大小的图形，也可以限制它</li></ul></li><li><p>可以通过代码直接添加</p><ul><li><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>addSubview<span class="token punctuation">:</span><span class="token punctuation">(</span>UIView <span class="token operator">*</span><span class="token punctuation">)</span>aView<span class="token punctuation">;</span> <span class="token comment">//向aView的superview发送添加</span>
<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>removeFromSuperview 				 <span class="token comment">//向aView的superview发送移除</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>初始化<code>UIView</code></p><ul><li><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>setup<span class="token punctuation">{</span>……<span class="token punctuation">}</span>
<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>awakeFromNib<span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token keyword">self</span> setup<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token operator">-</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>initWithFrame<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token punctuation">(</span>GCRect<span class="token punctuation">)</span>aRect<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">self</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">super</span> initWithFrame<span class="token punctuation">:</span>aRect<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token keyword">self</span> setup<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//init等同于initWithFrame:CGRectZero</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><p>下面介绍一下在视图操作中常见的数据结构和类</p><ul><li><code>CGFloat</code><ul><li>常用于位置的表示和计算</li><li>总之是个浮点数</li></ul></li><li><code>CGpoint</code><ul><li>一个C结构体，从它的构造函数也能看得出来,其x,y都是<code>CGFloat</code></li><li><code>CGPoint p = CGPointMake(35.5，34.5);p.x+=20;</code></li></ul></li><li><code>CGSize</code><ul><li>用于存储高度和宽度，同样由<code>CGFloat</code></li><li><code>CGPoint p = CGSizeMake(100.0，200.0);p.height+=20;</code></li></ul></li><li><code>CGRect</code><ul><li><code>CGpoint</code>和<code>CGSize</code>的结合</li><li>制定了一个矩形的原点和宽高</li></ul></li></ul><p>绘制的原点在左上角，绘制的单位并非像素，而是“point”，这样就能兼容各种分辨率和不同ppi的设备，而不会由于像素绘制导致大小出入</p><h5 id="下面介绍一些属性" tabindex="-1"><a class="header-anchor" href="#下面介绍一些属性" aria-hidden="true">#</a> 下面介绍一些属性</h5><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@property</span> CGFloat contentScaleFactor<span class="token punctuation">;</span><span class="token comment">//每个point包含几个像素点,只读</span>
<span class="token keyword">@property</span> CGRect bounds<span class="token punctuation">;</span> <span class="token comment">//绘制区域的原点和宽高</span>
<span class="token keyword">@property</span> CGPoint center<span class="token punctuation">;</span><span class="token comment">//顾名思义区域的中心</span>
<span class="token keyword">@property</span> CGRect frame<span class="token punctuation">;</span><span class="token comment">//绘制该view的父视图的矩形，因为view本身是可以旋转的，菱形区域的frame和bounds就完全不一样</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个简单的代码创建Label例子</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>CGRect labelRect <span class="token operator">=</span> <span class="token function">CGRectMake</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
UILabel <span class="token operator">*</span>label <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>UILabel alloc<span class="token punctuation">]</span> initWithFramelabelRect<span class="token punctuation">]</span><span class="token punctuation">;</span>
label<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">@&quot;hello&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>view addSubview<span class="token punctuation">:</span>label<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="何时自定义视图" tabindex="-1"><a class="header-anchor" href="#何时自定义视图" aria-hidden="true">#</a> 何时自定义视图</h5><ul><li><p>想要绘制一些自定义内容，Xcode原本控件无法提供的内容</p><ul><li><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>drawRect<span class="token punctuation">:</span><span class="token punctuation">(</span>CGFloat<span class="token punctuation">)</span>aRect<span class="token punctuation">;</span>
<span class="token comment">//在这个方法中绘制你自己的内容，但是永远不要自己调用它</span>
<span class="token comment">//该消息由系统控制</span>

<span class="token comment">//如果想要重新绘制视图，可以使用</span>
<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>setNeedDisplay<span class="token punctuation">;</span>
<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>setNeedDisplayInRect<span class="token punctuation">:</span><span class="token punctuation">(</span>CGRect<span class="token punctuation">)</span>aRect<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h5 id="如何自定义绘制" tabindex="-1"><a class="header-anchor" href="#如何自定义绘制" aria-hidden="true">#</a> 如何自定义绘制</h5><ul><li><p>可以用Core Graphics中的C函数进行绘制</p></li><li><p>Core Graphics相关函数需要<code>context</code>绘制环境上下文，使用<code>UIGraphicsGetCurrentContext</code>消息获取且只在drawRect中有效</p></li><li><p>也可以使用<code>UIBezierPath</code>进行直接绘制，不需要获取上下文</p></li><li><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>UIBezierPath <span class="token operator">*</span>path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>UIBezierPath alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//移动到点</span>
<span class="token punctuation">[</span>path moveToPoint<span class="token punctuation">:</span><span class="token function">CGPointMake</span><span class="token punctuation">(</span><span class="token number">75</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//绘制路径</span>
<span class="token punctuation">[</span>path addLineToPoint<span class="token punctuation">:</span><span class="token function">CGPointMake</span><span class="token punctuation">(</span><span class="token number">160</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>path addLineToPoint<span class="token punctuation">:</span><span class="token function">CGPointMake</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//闭合路径</span>
<span class="token punctuation">[</span>path closePath<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//即使现在路径已经绘制完成，但是仍然没有在屏幕上渲染</span>
<span class="token comment">//设置颜色</span>
<span class="token punctuation">[</span><span class="token punctuation">[</span>UIColor greenColor<span class="token punctuation">]</span> setFill<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//填充绿色</span>
<span class="token punctuation">[</span><span class="token punctuation">[</span>UIColor redColor<span class="token punctuation">]</span> setStroke<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//红色描边</span>
<span class="token comment">//真正进行渲染配置</span>
<span class="token punctuation">[</span>path fill<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>path stroke<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>也可以为路径设置状态<code>path.lineWidth = 2.0;</code></p></li><li><p>也可以绘制圆角矩形、椭圆等图形</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>UIBezierPath <span class="token operator">*</span>roundedRect <span class="token operator">=</span> <span class="token punctuation">[</span>UIBezierPath bezierPathWithRoundedRect<span class="token punctuation">:</span><span class="token punctuation">(</span>CGRect<span class="token punctuation">)</span>bounds
                            													 cornerRadius<span class="token punctuation">:</span><span class="token punctuation">(</span>CGFloat<span class="token punctuation">)</span>radius<span class="token punctuation">]</span><span class="token punctuation">;</span>
UIBezierPath <span class="token operator">*</span>oval <span class="token operator">=</span> <span class="token punctuation">[</span>UIBezierPath bezierPathWithOvalInRect<span class="token punctuation">:</span><span class="token punctuation">(</span>CGRect<span class="token punctuation">)</span>bounds<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>roundedRect stroke<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>oval fill<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>你还可以为你绘制的图形区域限制裁剪，多余的部分将会被裁剪<code>[roundedRect addClip]</code></p></li><li><p>UIView默认背景色是白色，即使把背景图设为nil</p><ul><li>将属性<code>@property BOOL opaque;</code>设置为NO以剔除背景</li><li>将属性<code>@property CGFloat alpha;</code>修改以改变整个VIew的透明度</li><li>透明度非常消耗图形性能</li></ul></li><li><p>使用属性<code>property (nonatomic) BOOL hidden;</code>将试图设为不可视，不可触发事件（用于暂时移除）</p></li><li><p>有时你设置了一些绘制属性，但是又会在之后的绘制将其移除，可以参考以下例子</p><ul><li><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">//绘制绿色圆形的方法</span>
<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>drawGreenCircle<span class="token punctuation">:</span><span class="token punctuation">(</span>CGContextRef<span class="token punctuation">)</span>ctxt<span class="token punctuation">{</span>
  <span class="token function">CGContextSaveGState</span><span class="token punctuation">(</span>ctxt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//保存Graphics State</span>
  <span class="token punctuation">[</span><span class="token punctuation">[</span>UIColor greenColor<span class="token punctuation">]</span> steFill<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">CGContextRestoreGState</span><span class="token punctuation">(</span>ctxt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>drawRect<span class="token punctuation">:</span><span class="token punctuation">(</span>CGRect<span class="token punctuation">)</span>aRect<span class="token punctuation">{</span>
  CGContextRef context <span class="token operator">=</span> <span class="token function">UIGraphicsGetCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token punctuation">[</span>UIColor redColor<span class="token punctuation">]</span> setFill<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token keyword">self</span> drawGreenCircle<span class="token punctuation">:</span>context<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//发送绘制绿色圆形的消息</span>
  <span class="token comment">//以下的绘制会保持红色</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><h6 id="如何绘制自定义文本" tabindex="-1"><a class="header-anchor" href="#如何绘制自定义文本" aria-hidden="true">#</a> 如何绘制自定义文本</h6><ul><li><p>使用<code>UILabel</code></p></li><li><p>使用<code>NSAttributedString</code></p><ul><li><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSAttributedString <span class="token operator">*</span>text <span class="token operator">=</span> ……<span class="token punctuation">;</span>
<span class="token punctuation">[</span>text drawAtPoint<span class="token punctuation">:</span><span class="token punctuation">(</span>CGPoint<span class="token punctuation">)</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//文本矩形左上角绘制在该点</span>
CGSize textSize <span class="token operator">=</span> <span class="token punctuation">[</span>text size<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//获取文本大小</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li><li><h6 id="如何自定义绘制图像uiimage" tabindex="-1"><a class="header-anchor" href="#如何自定义绘制图像uiimage" aria-hidden="true">#</a> 如何自定义绘制图像<code>UIImage</code></h6><ul><li><p>从资源库中获取</p><ul><li><code>UIImage *image = [UIImage imageNamed:@&quot;foo.jgp&quot;];</code></li></ul></li><li><p>从路径或者Bit数据获取</p><ul><li><code>UIImage *image = [[UIImage alloc] initWithContentsOfFile:(NSString *)fullPath];</code></li><li><code>UIImage *image = [[UIImage alloc] initWithData:(NSData *)imageData];</code></li></ul></li><li><p>利用<code>CGContext functions</code>绘制</p><ul><li><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token function">UIGraphicsBeginImageContext</span><span class="token punctuation">(</span>CGSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//绘制</span>
UIImage <span class="token operator">*</span>myImage <span class="token operator">=</span> <span class="token function">UIGraphicsGetImageFromCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">UIGraphicsEndImageContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>绘制</p><ul><li><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>UIImage <span class="token operator">*</span>image <span class="token operator">=</span> ……<span class="token punctuation">;</span>
<span class="token punctuation">[</span>image drawAtPoint<span class="token punctuation">:</span><span class="token punctuation">(</span>CGPoint<span class="token punctuation">)</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>image drawInRect<span class="token punctuation">:</span><span class="token punctuation">(</span>CGRect<span class="token punctuation">)</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//会缩放以适应大小</span>
<span class="token punctuation">[</span>image drawAsPatternInRect<span class="token punctuation">:</span><span class="token punctuation">(</span>CGRect<span class="token punctuation">)</span>patRect<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>从<code>UIImage反向获取Data</code></p><ul><li><code>NSData *jpgData = UIImageJPEGRepresentation((UIImage *)myImage,(CGFloat)quality);</code></li><li><code>NSData *pngData = UIImagePNGRepresentation((UIImage *)myImage);</code></li></ul></li><li><p>当屏幕旋转等造成视图边界产生变化时</p><ul><li>默认情况下视图并不会被重新绘制，而是图像会被拉伸 <ul><li>也就是<code>UIViewContentModeScaleToFill</code></li></ul></li><li><code>@property (nonatomic) UIViewContentMode contentMode;</code><ul><li>该属性代表当边界<code>bounds</code>变化时会发生什么</li><li><code>UIViewContentMode{Left,Right,Top,Right,BottomLeft,BottomRight,TopLeft,TopRight}</code><ul><li>会移动你绘制的<code>bits</code>到对应的位置</li></ul></li><li><code>UIViewContentModeScale{ToFill,AspectFill,AspectFit}</code><ul><li>会产生拉伸</li></ul></li><li><code>UIViewContentModeRedraw</code><ul><li>调用<code>drawRect:</code>重新绘制</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="_2023-12-1" tabindex="-1"><a class="header-anchor" href="#_2023-12-1" aria-hidden="true">#</a> 2023.12.1</h3><h4 id="uigesturerecognizer" tabindex="-1"><a class="header-anchor" href="#uigesturerecognizer" aria-hidden="true">#</a> <code>UIGestureRecognizer</code></h4><p>iOS的手势识别，它是一个抽象类，而它的子类用于程序与特定手势类型进行交互</p><ul><li>首先向视图中添加一个手势识别器 <ul><li>大部分由controller提供</li></ul></li><li>然后添加handle来处理手势发生时/发生后要做的事 <ul><li>由UIView自己提供，也可以由控制器控制</li></ul></li></ul><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span>（<span class="token keyword">void</span><span class="token punctuation">)</span>setPannableView<span class="token punctuation">:</span><span class="token punctuation">(</span>UIView <span class="token operator">*</span><span class="token punctuation">)</span>pannableView<span class="token punctuation">{</span>
	_pannableView <span class="token operator">=</span> pannableView<span class="token punctuation">;</span>
	UIPanGestureRecognizer <span class="token operator">*</span> panger <span class="token operator">=</span> 
		<span class="token punctuation">[</span><span class="token punctuation">[</span>UIPanGestureRecognizer alloc<span class="token punctuation">]</span> initWithTarget<span class="token punctuation">:</span>pannableView action<span class="token punctuation">:</span><span class="token operator">@</span><span class="token function">Selector</span><span class="token punctuation">(</span>pan<span class="token punctuation">:</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">//建立手势识别器</span>
  <span class="token punctuation">[</span>pannableView addGEstureRecognizer<span class="token punctuation">:</span>panger<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">//将识别器添加到View</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="uipangesturerecognizer-拖动" tabindex="-1"><a class="header-anchor" href="#uipangesturerecognizer-拖动" aria-hidden="true">#</a> <code>UIPanGestureRecognizer</code>（拖动）</h5><p>这样的类会提供一些方法</p><ul><li><p><code>-(CGPoint)translationInView:(UIView *)aView;</code>表示移动距离</p></li><li><p><code>-(CGPoint)velocityInView:(UIView *)aView</code>表示移动速度</p></li><li><p><code>-(void)setTranslation:(CGPoint)translation inView:(UIView *)aView;</code>重设起始点</p></li><li><p>同时它也会提供一些属性</p><ul><li><code>@property(readonly)UIGestureRecognizerState state;</code>等等表示手势的各种状态</li></ul></li></ul><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>pan<span class="token punctuation">:</span><span class="token punctuation">(</span>UIPanGestureRecognizer <span class="token operator">*</span><span class="token punctuation">)</span>recognizer<span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>recognizer<span class="token punctuation">.</span>state <span class="token operator">==</span> UIGestureRecognizerStateChanged<span class="token punctuation">)</span><span class="token operator">||</span>
     <span class="token punctuation">(</span>recognizer<span class="token punctuation">.</span>state <span class="token operator">==</span> UIGestureRecognizerStateEnded<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    CGPoint translation <span class="token operator">=</span> <span class="token punctuation">[</span>recognizer translationInView<span class="token punctuation">:</span><span class="token keyword">self</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//获取移动距离</span>
    <span class="token keyword">self</span><span class="token punctuation">.</span>orgin <span class="token operator">=</span> <span class="token function">CGPointMake</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>origin<span class="token punctuation">.</span>x<span class="token operator">+</span>translation<span class="token punctuation">.</span>x<span class="token punctuation">,</span><span class="token keyword">self</span><span class="token punctuation">.</span>origin<span class="token punctuation">.</span>y<span class="token operator">+</span>translation<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>recognizer setTranslation<span class="token punctuation">:</span>CGPointZero inView<span class="token punctuation">:</span><span class="token keyword">self</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//重设原点</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="uipinchgesturerecognizer-捏合" tabindex="-1"><a class="header-anchor" href="#uipinchgesturerecognizer-捏合" aria-hidden="true">#</a> <code>UIPinchGestureRecognizer</code>(捏合)</h5><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@property</span> CGFloat scale<span class="token punctuation">;</span><span class="token comment">//缩放比例</span>
<span class="token keyword">@property</span> <span class="token punctuation">(</span>readonly<span class="token punctuation">)</span>CGFloat velocity<span class="token punctuation">;</span><span class="token comment">//变化速度</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="uirotationgesturerecognizer-翻转" tabindex="-1"><a class="header-anchor" href="#uirotationgesturerecognizer-翻转" aria-hidden="true">#</a> <code>UIRotationGestureRecognizer</code>(翻转)</h5><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">@</span>propery CGFloat rotation<span class="token punctuation">;</span><span class="token comment">//选择的弧度0-2π</span>
<span class="token operator">@</span><span class="token function">propery</span> <span class="token punctuation">(</span>readonly<span class="token punctuation">)</span>CGFloat velocity<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="uiswipegesturerecognizer-滑动" tabindex="-1"><a class="header-anchor" href="#uiswipegesturerecognizer-滑动" aria-hidden="true">#</a> <code>UISwipeGestureRecognizer</code>(滑动)</h5><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@property</span> UISwipeGestureRecognizerDirection direction<span class="token punctuation">;</span>
<span class="token keyword">@property</span> NSUInteger numberofTouchesRequired<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="uitapgesturerecognizer-点击" tabindex="-1"><a class="header-anchor" href="#uitapgesturerecognizer-点击" aria-hidden="true">#</a> <code>UITapGestureRecognizer</code>(点击)</h5><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">@property</span> NSUInterger numberOfTapsRequired<span class="token punctuation">;</span>
<span class="token keyword">@property</span> NSUnterger numberOfTouchesRequired<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2023-12-2" tabindex="-1"><a class="header-anchor" href="#_2023-12-2" aria-hidden="true">#</a> 2023.12.2</h2><h3 id="_8-protocols-blocks" tabindex="-1"><a class="header-anchor" href="#_8-protocols-blocks" aria-hidden="true">#</a> 8. Protocols, Blocks,</h3><h5 id="protocols" tabindex="-1"><a class="header-anchor" href="#protocols" aria-hidden="true">#</a> Protocols</h5><p>可以在使用id变量时让程序内省，显得更加安全</p><p><code>id&lt;MyProtocol&gt; obj</code></p><p>声明一个<code>@protocol</code></p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">//Foo.h</span>
<span class="token keyword">@protocol</span> Foo<span class="token operator">&lt;</span>Xyzzy，NSObject<span class="token operator">&gt;</span><span class="token comment">//要求实现的其他协议，可以多个</span>
<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>someMethod<span class="token punctuation">;</span>
<span class="token operator">@</span>optional
<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>methodWithArgument<span class="token punctuation">:</span><span class="token punctuation">(</span>BOOL<span class="token punctuation">)</span>argument<span class="token punctuation">;</span>
<span class="token keyword">@property</span><span class="token punctuation">(</span>readonly<span class="token punctuation">)</span> <span class="token keyword">int</span> readonlyProperty<span class="token punctuation">;</span>
<span class="token keyword">@property</span> NSString <span class="token operator">*</span>readnwriteProperty<span class="token punctuation">;</span>
<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>methodThatReturnsSomething<span class="token punctuation">;</span>
<span class="token keyword">@end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>符合一个协议</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">import</span> <span class="token string">&quot;Foo,h&quot;</span></span>
<span class="token keyword">@interface</span> MyClass <span class="token punctuation">:</span> NSObject <span class="token operator">&lt;</span>Foo<span class="token operator">&gt;</span>
<span class="token keyword">@end</span>
<span class="token comment">//或</span>
<span class="token keyword">@interface</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span>Foo<span class="token operator">&gt;</span>
<span class="token keyword">@end</span>
  
<span class="token keyword">@implementation</span> MyClass
  <span class="token comment">//实现协议</span>
<span class="token keyword">@end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当协议用于MVC结构中的通信时，id保证了匿名性，协议则保持了结构化</p><h5 id="blocks" tabindex="-1"><a class="header-anchor" href="#blocks" aria-hidden="true">#</a> Blocks</h5><p>一个使用block作为参数的范例</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>BOOL stoppedEarly <span class="token operator">=</span> NO<span class="token punctuation">;</span>
__block BOOL stoppedEarly2 <span class="token operator">=</span> NO<span class="token punctuation">;</span>
NSString <span class="token operator">*</span>stopKey <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">@&quot;Enough&quot;</span> uppercaseString<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> stopValue <span class="token operator">=</span> <span class="token number">53.5</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>aDictionary enumerateKeysAndObjectsUsingBlock<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">(</span>id key<span class="token punctuation">,</span> id value<span class="token punctuation">,</span> BOOL <span class="token operator">*</span>stop<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;value for key %@ is %@&quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">[</span>stopKey isEqualToString<span class="token punctuation">:</span>key<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span>value doubleValue<span class="token punctuation">]</span> <span class="token operator">==</span> stopValue<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">*</span>stop <span class="token operator">=</span> YES<span class="token punctuation">;</span>
    <span class="token comment">//stoppedEarly = YES;//这句是非法的，stoppedEarly在块内只读</span>
    stoppedEarly2 <span class="token operator">=</span> YES<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>stoppedEarly2<span class="token punctuation">)</span> <span class="token function">NSLOG</span><span class="token punctuation">(</span><span class="token string">@&quot;I stopped logging dictionary values early!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>无参数的block<code>^(){}</code>可以简写为<code>^{}</code></p><p>若Block的返回值是可推断的，那么也可以忽略返回值类型</p><p><code>^BOOL(id obj,...){return [obj isKindOfClass:[UIView class]];}</code>的BOOL可以省略</p><p>那么是什么~~（苹果的神秘力量）~~让block表现的像一个对象【拥有可以被存储的特性】</p><p>block只可以接受copy消息，这样你就可以复制块以在它原本的生命周期之外使用它</p><p>当block内向某个对象发送消息时，<strong>block会保持对应对象的强引用直到自己的生命周期结束</strong></p><ul><li><p>着就可能造成<code>Memory Cycles</code>循环引用</p></li><li><p>使用弱局部变量<code>__weak</code>防止这种情况</p><ul><li><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>__weak MyClass <span class="token operator">*</span>weakSelf <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span>myBlocks addObject<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">{</span>
  <span class="token punctuation">[</span>weakSelf doSomething<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="animation" tabindex="-1"><a class="header-anchor" href="#animation" aria-hidden="true">#</a> Animation</h3><p>View的这些属性可以在动画中改变</p><ul><li>frame</li><li>transform（缩放、旋转）</li><li>alpha</li></ul><p>通过UIView的类方法，提供延迟时间，在block中修改这些参数，参数会立即被改变，这个类方法也会立即返回，但是在屏幕上，它们会以动画的形式显示出来</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>animateWithDuration<span class="token punctuation">:</span><span class="token punctuation">(</span>NSTimeInterval<span class="token punctuation">)</span>duration <span class="token comment">//动画时间</span>
  									  delay<span class="token punctuation">:</span><span class="token punctuation">(</span>NSTimeInterval<span class="token punctuation">)</span>delay <span class="token comment">//延迟执行</span>
                    options<span class="token punctuation">:</span><span class="token punctuation">(</span>UIViewAnimationOptions<span class="token punctuation">)</span>options
                 animations<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">^</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span>animations <span class="token comment">//修改上述参数的地方</span>
                 completion<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">^</span><span class="token punctuation">)</span><span class="token punctuation">(</span>BOOL finished<span class="token punctuation">)</span><span class="token punctuation">)</span>completion<span class="token punctuation">;</span><span class="token comment">//动画完成时会被调用，如果原来的动画被打断那么这里它就会接受到NO</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个透明。淡出的例子</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> [UIViewanimateWithDuration:3.0
  									  delay:0.0
                    options:UIViewAnimationOptionBeginFromCurrentState
                 animations:^{ myView.alpha = 0.0; }
                 completion: ^(BOOL fin){ if (fin) [myView removeFromSuperView]; }];
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+r+'" alt="UIViewAnimationOptions" tabindex="0" loading="lazy"><figcaption>UIViewAnimationOptions</figcaption></figure><p>如果你想修改整个View</p><figure><img src="'+k+'" alt="transitionWithView" tabindex="0" loading="lazy"><figcaption>transitionWithView</figcaption></figure><figure><img src="'+v+'" alt="transitionFromView" tabindex="0" loading="lazy"><figcaption>transitionFromView</figcaption></figure><h4 id="dynamic-animation" tabindex="-1"><a class="header-anchor" href="#dynamic-animation" aria-hidden="true">#</a> Dynamic Animation</h4><p>将物理效果神奇地应用到控件上,也就是所谓的物理仿真行为，还是看PPT吧</p><figure><img src="'+m+'" alt="步骤" tabindex="0" loading="lazy"><figcaption>步骤</figcaption></figure><figure><img src="'+b+'" alt="初始化" tabindex="0" loading="lazy"><figcaption>初始化</figcaption></figure><figure><img src="'+g+'" alt="添加" tabindex="0" loading="lazy"><figcaption>添加</figcaption></figure><figure><img src="'+h+'" alt="行为" tabindex="0" loading="lazy"><figcaption>行为</figcaption></figure><figure><img src="'+w+'" alt="行为" tabindex="0" loading="lazy"><figcaption>行为</figcaption></figure><figure><img src="'+f+'" alt="行为" tabindex="0" loading="lazy"><figcaption>行为</figcaption></figure><figure><img src="'+y+`" alt="行为" tabindex="0" loading="lazy"><figcaption>行为</figcaption></figure><p>在制作有关Animtion这节课的demo时发生了非常有趣的现象，就是我的方块在落下后并没有飞走，这很明显又是一个来自未来的Bug。稍微检查了一下后，发现程序并没有执行<code>dynamicAnimatorDidPause</code>整个方法，而我为视图添加了一个按钮来发送<code>removeCompleteRows</code>消息后，成行的方块才终于离开了屏幕。</p><p>通过观察注意到，有些方块在落底时还与view的界限留有一条细小的缝隙，而这个缝隙可能因为后来方块的到来而消失，也有可能顽强地顶着头上的方块纹丝不动。不过不知道这是否是直接原因，或许是iOS的物理模拟引擎引入了一些新的特性导致了我的方块动画并没有停止。</p><p>在我自作主张修改代码的时候发现了一个神奇的地方</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">//源代码  </span>
__weak ViewController <span class="token operator">*</span>weakSelf <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">;</span>
  UIView <span class="token operator">*</span>droppingView <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>droppingView<span class="token punctuation">;</span>
  <span class="token keyword">self</span><span class="token punctuation">.</span>attachment<span class="token punctuation">.</span>action <span class="token operator">=</span> <span class="token operator">^</span><span class="token punctuation">{</span>
      UIBezierPath <span class="token operator">*</span>path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>UIBezierPath alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">[</span>path moveToPoint<span class="token punctuation">:</span>weakSelf<span class="token punctuation">.</span>attachment<span class="token punctuation">.</span>anchorPoint<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">[</span>path addLineToPoint<span class="token punctuation">:</span>droppingView<span class="token punctuation">.</span>center<span class="token punctuation">]</span><span class="token punctuation">;</span>
      weakSelf<span class="token punctuation">.</span>gameView<span class="token punctuation">.</span>path <span class="token operator">=</span> path<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//我自作主张修改的代码</span>
__weak ViewController <span class="token operator">*</span>weakSelf <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">;</span>
  <span class="token keyword">self</span><span class="token punctuation">.</span>attachment<span class="token punctuation">.</span>action <span class="token operator">=</span> <span class="token operator">^</span><span class="token punctuation">{</span>
      UIBezierPath <span class="token operator">*</span>path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>UIBezierPath alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">[</span>path moveToPoint<span class="token punctuation">:</span>weakSelf<span class="token punctuation">.</span>attachment<span class="token punctuation">.</span>anchorPoint<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">[</span>path addLineToPoint<span class="token punctuation">:</span>weakSelf<span class="token punctuation">.</span>droppingView<span class="token punctuation">.</span>center<span class="token punctuation">]</span><span class="token punctuation">;</span>
      weakSelf<span class="token punctuation">.</span>gameView<span class="token punctuation">.</span>path <span class="token operator">=</span> path<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两处代码不同的地方在于第一处用了一个局部变量表示<code>self.droppingView</code>,而第二种则从弱应用中直接获取，而它们绘制的结果却大相径庭</p><figure><img src="`+S+'" alt="正常表现" tabindex="0" loading="lazy"><figcaption>正常表现</figcaption></figure><figure><img src="'+j+'" alt="正常表现" tabindex="0" loading="lazy"><figcaption>正常表现</figcaption></figure><p>稍作思考，应该是drppingView在这里是空的，所以定位到了原点（0，0）,想了一下，<code>self.droppingView</code>在代码“后续”有个置空的逻辑。</p><figure><img src="'+C+'" alt="断点调试" tabindex="0" loading="lazy"><figcaption>断点调试</figcaption></figure><p>果然是它先于block的执行被执行了，所以这是个非常简单却隐蔽的多线程编程bug。这里也提现了使用局部变量来储存<code>droppingView</code>的意义，因为通过self获取的指针已经被置空了。</p><h3 id="autolayout" tabindex="-1"><a class="header-anchor" href="#autolayout" aria-hidden="true">#</a> Autolayout</h3><p>在Xcode中进行可视化操作</p><h2 id="_2023-12-5" tabindex="-1"><a class="header-anchor" href="#_2023-12-5" aria-hidden="true">#</a> 2023.12.5</h2><h3 id="_10-multithreading-scroll-view" tabindex="-1"><a class="header-anchor" href="#_10-multithreading-scroll-view" aria-hidden="true">#</a> 10. Multithreading, Scroll View</h3>',157),O=n("code",null,"queue",-1),L=o(`<p>而在今天的课程中我们所讨论的则是串行队列。</p><p>在iOS的主队列中<code>main queue</code>，所有的UI活动都在这个队列中，而我们不希望它被阻塞导致程序无法活动，UIKit的大部分UI同步方法都只能在这个<code>main queue</code>中完成，如果其他队列中的执行过程想要操作UI，则需要与主队列沟通，向他发送所要执行的block</p><ul><li><p>如何在一个队列中执行block</p><ul><li><p>需要使用一个比较底层的C API</p></li><li><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>dispatch_queue_t queue <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token comment">//获取队列</span>
<span class="token function">dispatch_async</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token operator">^</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将这个block以异步的方式放入队列去执行 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>如何获取<code>main queue</code></p><ul><li><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>dispatch_queue_t mianQ <span class="token operator">=</span> <span class="token function">dispatch_get_main_queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
NSOperationQueue <span class="token operator">*</span>mainQ <span class="token operator">=</span> <span class="token punctuation">[</span>NSOperationQueue mainQueue<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//for object-oriented APIs</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>如何创建一个主队列之外的队列</p><ul><li><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>dispatch_queue_t otherQ <span class="token operator">=</span> <span class="token function">dispatch_queue_create</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//name a const char *</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>需要注意的是名字参数不是用<code>NSString</code>类型</p></li><li><p><code>NULL</code>表示生产的是串行队列</p></li></ul></li><li><p>另外一个在<code>main queue</code>中执行代码的方法</p><ul><li><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>performSelectorOnMainThread<span class="token punctuation">:</span><span class="token punctuation">(</span>SEL<span class="token punctuation">)</span>aMethod
  											withObject<span class="token punctuation">:</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>obj<span class="token comment">//可以视作参数</span>
                     waitUntilDone<span class="token punctuation">:</span><span class="token punctuation">(</span>BOOL<span class="token punctuation">)</span>waitUntilDone<span class="token comment">//是否等待执行完成</span>
<span class="token comment">//它就相当于执行</span>
<span class="token function">dispatch_async</span><span class="token punctuation">(</span><span class="token function">dispatch_get_main_queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">^</span><span class="token punctuation">{</span><span class="token comment">/* call aMethod*/</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><p>一个利用多线程进行URL请求的例子</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSURLRequest <span class="token operator">*</span>request <span class="token operator">=</span> <span class="token punctuation">[</span>NSURLRequest requestWithURL<span class="token punctuation">:</span><span class="token punctuation">[</span>NSURL urlWithString<span class="token punctuation">:</span><span class="token string">@&quot;http://...&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//创建一个URL的封装</span>
NSURLConfiguration <span class="token operator">*</span>configuration <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>

NSURLSession <span class="token operator">*</span>session <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token comment">//创建URL session会话 ，决定了代码最终在哪个线程执行</span>
NSURLSessionDownloadTask <span class="token operator">*</span>task<span class="token punctuation">;</span>
task <span class="token operator">=</span> <span class="token punctuation">[</span>session downloadTaskWithRequest<span class="token punctuation">:</span>request
                      completionHandler<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">(</span>NSURL <span class="token operator">*</span>localfile<span class="token punctuation">,</span>NSURLResponse <span class="token operator">*</span>response<span class="token punctuation">,</span> NSError <span class="token operator">*</span>error<span class="token punctuation">)</span><span class="token punctuation">{</span>
                        <span class="token comment">//call back</span>
                        <span class="token comment">//若在这里想要进行UI操作，则需要向主队列通信</span>
                      <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>task resume<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//创建下载时下载时暂停的，用它继续执行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面的这段代码将delegate 代码规定在mainQueue中执行</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSURLSession <span class="token operator">*</span>session <span class="token operator">=</span> <span class="token punctuation">[</span>NSURLSession sessionWithConfiguration<span class="token punctuation">:</span>configuration
                        															delegate<span class="token punctuation">:</span>nil
                        												delegateQueue<span class="token punctuation">:</span><span class="token punctuation">[</span>NSOperationQueue mainQueue<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

NSURLSessionDownloadTask <span class="token operator">*</span>task<span class="token punctuation">;</span>
task <span class="token operator">=</span> <span class="token punctuation">[</span>session downloadTaskWithRequest<span class="token punctuation">:</span>request
                      completionHandler<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">(</span>NSURL <span class="token operator">*</span>localfile<span class="token punctuation">,</span>NSURLResponse <span class="token operator">*</span>response<span class="token punctuation">,</span> NSError <span class="token operator">*</span>error<span class="token punctuation">)</span><span class="token punctuation">{</span>
                        <span class="token comment">//可以在这里直接执行一些UI方面的操作</span>
                      <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>task resume<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果没有指定委托队列</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code>NSURLSession <span class="token operator">*</span>session <span class="token operator">=</span> <span class="token punctuation">[</span>NSURLSession sessionWithConfiguration<span class="token punctuation">:</span>configuration<span class="token punctuation">]</span><span class="token punctuation">;</span>
NSURLSessionDownloadTask <span class="token operator">*</span>task<span class="token punctuation">;</span>
task <span class="token operator">=</span> <span class="token punctuation">[</span>session downloadTaskWithRequest<span class="token punctuation">:</span>request
                      completionHandler<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">(</span>NSURL <span class="token operator">*</span>localfile<span class="token punctuation">,</span>NSURLResponse <span class="token operator">*</span>response<span class="token punctuation">,</span> NSError <span class="token operator">*</span>error<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">dispatch_saync</span><span class="token punctuation">(</span><span class="token function">dispatch_get_main_queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">^</span><span class="token punctuation">{</span><span class="token comment">/* 进行UI操作 */</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//或</span>
      	<span class="token punctuation">[</span><span class="token keyword">self</span> performSelectorOnMainThread<span class="token keyword">@selector</span><span class="token punctuation">(</span>doUIthings<span class="token punctuation">)</span> withObject<span class="token punctuation">:</span>nil waitUntilDone<span class="token punctuation">:</span>NO<span class="token punctuation">]</span><span class="token punctuation">;</span>
                      <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>task resume<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9);function P(z,B){const e=t("ExternalLinkIcon"),p=t("RouterLink");return c(),l("div",null,[x,I,U,V,n("p",null,[a("中文翻译来自"),n("a",R,[a("B站视频"),s(e)]),a("这个UP主的版本")]),n("p",null,[a("由于斯坦福的学生资源系统无法访问，所以在一番查找后，我发现课程作业可以参考"),n("a",N,[a("这个网站"),s(e)])]),G,n("p",null,[a("在iOS中，对于多线程编程，涉及到一个重要概念也就是队列"),O,a(",而在队列中排队的，也就是上一节课中提到的block，这在我之前"),s(p,{to:"/tec/basic/programWithOC/%E5%AD%90%E7%AB%A0%E8%8A%82/WorkingWithBlocks.html"},{default:u(()=>[a("翻译的文章_WorkingWithBlocks")]),_:1}),a("也有所提及。")]),L])}const F=i(_,[["render",P],["__file","cs193p学习日记.html.vue"]]);export{F as default};
