import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as o,f as c}from"./app-7a71bcac.js";const t={},d=c('<h1 id="git原理及实用技巧" tabindex="-1"><a class="header-anchor" href="#git原理及实用技巧" aria-hidden="true">#</a> Git原理及实用技巧</h1><h2 id="git的储存原理" tabindex="-1"><a class="header-anchor" href="#git的储存原理" aria-hidden="true">#</a> Git的储存原理</h2><p>当你使用<code>git init</code>创建在一个目录创建一个本地仓库后，会在目录下生成一个<code>.git</code>文件夹，而这个文件夹就是git相关的数据库。</p><h4 id="当你进行本地修改-git-add-commit-push时-本地发生了什么" tabindex="-1"><a class="header-anchor" href="#当你进行本地修改-git-add-commit-push时-本地发生了什么" aria-hidden="true">#</a> 当你进行<code>本地修改-git add - commit - push</code>时，本地发生了什么？</h4><ul><li><code>git add a.txt</code>加入到暂存区 <ul><li><code>.git/objects</code>下新生成了一个文件(<code>object</code>)，其中存储了我们新添加文件到<strong>哈希值</strong><ul><li>该哈希值一般使用前6位即可，后置位为冗余</li><li>使用命令<code>git cat-file -t</code>查看类型，<code>git cat-file -p</code>查看内容</li><li>在这个情况下，生成的类型查看为<code>blob</code></li></ul></li></ul></li><li><code>git commit -m &#39;init&#39;</code><ul><li><code>.git/objects</code>下新生成了一系列<code>object</code><ul><li>对于类型为<code>tree</code>的，其内容为文件快照，包括<code>文件权限 文件类型 文件哈希值 文件名</code>的列表</li><li>对于类型为<code>commit</code>的，其内容为<strong>项目快照</strong>，包括作者信息、提交时间和其他提交信息</li></ul></li></ul></li></ul><p>Git就是通过这样的哈希值作为指针，来对文件进行管理。</p><ul><li>对于上面的例子，也就是生成了对应<code>blob object</code>储存内容，又生成了一个<code>tree object</code>来储存目录的快照，然后通过一个<code>commit object</code>来存储提交的信息，并且它们的信息都是通过哈希值作为指针去指向的。</li></ul><p>对于当前分支，git在HEAD文件中明文储存，明文指向一个文件，文件中储存着哈希值，指向上一个<code>commit object</code></p><p>综合以上存储结构，git形成了一个有向无环图，也就是一颗哈希树/DAG，树根为HEAD，也就是指向当前分支的<code>refs</code>指针,树叶为<code>blob object</code></p><ul><li><code>Git object</code>(blob tree commit) 只要文件不被修改，就可以被复用，但是其本身不允许变更</li><li><code>refs</code>指针可以被修改</li><li>采用<code>tree object</code>储存文件名，可以非常方便地复用<code>blob object</code></li><li>若<code>blob object</code>的内容发生改变，其哈希值也发生改变，又由于git分布式的特性，即使能够修改一台机器上的所有对应哈希值，也无法改变其他机器上的内容，所以git不会被轻易篡改</li></ul><h2 id="可视化git操作" tabindex="-1"><a class="header-anchor" href="#可视化git操作" aria-hidden="true">#</a> 可视化Git操作</h2><h4 id="git的三个分区" tabindex="-1"><a class="header-anchor" href="#git的三个分区" aria-hidden="true">#</a> Git的三个分区</h4><ul><li>工作目录（working directory） <ul><li><strong>操作系统上的文件</strong>，所有代码开发编辑都在这上面完成</li></ul></li><li>索引（index or staging area） <ul><li>一个暂存区域，会在下一次commit被提交到Git仓库</li><li>是<code>tree object</code></li></ul></li><li>Git仓库（git repository） <ul><li>由<code>Git object</code>记录着每一次提交到快照，以及链式结构记录的提交变更历史</li></ul></li></ul><p>但是，由于每次都生成新的文件快照，是否会影响性能？</p><ul><li>新快照对比存储变更，能够快速获取读取</li><li>对于空间，Git拥有一套<code>git gc</code>机制，会在空间太大或者网络请求时将变更部分压缩成pack</li></ul><p><code>git reset</code></p><ul><li><code>--soft HEAD~</code>只更改HEAD指针到上一个commit版本</li><li><code>[--mixed] HEAD~</code>更改HEAD指针到上一个commit版本,并修改index</li><li><code>--hard HEAD~</code>更改HEAD指针到上一个commit版本,修改index和工作区</li></ul><h2 id="分支合并" tabindex="-1"><a class="header-anchor" href="#分支合并" aria-hidden="true">#</a> 分支合并</h2><ul><li>举个分支合并造成文件缺失导致bug的例子</li></ul>',19),l=[d];function a(r,n){return i(),o("div",null,l)}const u=e(t,[["render",a],["__file","index.html.vue"]]);export{u as default};
