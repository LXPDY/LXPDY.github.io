import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as p,c as l,a as s,b as n,e,f as t}from"./app-92ea3c66.js";const i={},u=t(`<h1 id="object-c学习日记" tabindex="-1"><a class="header-anchor" href="#object-c学习日记" aria-hidden="true">#</a> Object-C学习日记</h1><h2 id="日常篇" tabindex="-1"><a class="header-anchor" href="#日常篇" aria-hidden="true">#</a> 日常篇</h2><h4 id="_2023-10-10-object-c-的存在" tabindex="-1"><a class="header-anchor" href="#_2023-10-10-object-c-的存在" aria-hidden="true">#</a> 2023.10.10 Object-C++的存在</h4><p>在<code>Xcode</code>中直接创建一个macOS的命令行工程，尝试在其中添加CPP代码</p><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token comment">//test.mm</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">import</span> <span class="token expression"><span class="token operator">&lt;</span>Foundation<span class="token operator">/</span>Foundation<span class="token punctuation">.</span>h<span class="token operator">&gt;</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">import</span> <span class="token expression"><span class="token operator">&lt;</span>iostream<span class="token operator">&gt;</span></span></span>

class Test<span class="token punctuation">{</span>
   public<span class="token punctuation">:</span>
      <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
         std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout<span class="token operator">&lt;&lt;</span> <span class="token string">&quot;hello world&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">@interface</span> OCTest<span class="token punctuation">:</span>NSObject<span class="token punctuation">{</span>
   <span class="token keyword">@public</span>
   Test <span class="token operator">*</span>test_p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>func<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> num1 num2<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> num2<span class="token punctuation">;</span>
<span class="token keyword">@end</span>

<span class="token keyword">@implementation</span> OCTest

<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>func <span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> num1 num2<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> num2<span class="token punctuation">{</span>
   test_p <span class="token operator">=</span> new <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   test_p<span class="token operator">-&gt;</span><span class="token function">func2</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">@end</span>


<span class="token keyword">int</span> <span class="token function">main1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">/* my first program in Objective-C */</span>
    OCTest <span class="token operator">*</span>ocTest <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>OCTest alloc<span class="token punctuation">]</span>init<span class="token punctuation">]</span><span class="token punctuation">;</span>
   <span class="token comment">//[sampleClass sampleMethod];</span>
   <span class="token punctuation">[</span>ocTest func<span class="token punctuation">:</span><span class="token number">1</span> num2<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发现是无法在Xcode中直接编译运行的。对于混编代码，需要在<code>Xcode</code>侧边栏将文件扩展名更改为<code>.mm</code>类型后选择<code>Objec-C++</code>的类型才行。</p><p>Objc的代码中可以直接<code>import</code>C++的头文件，调用C++的函数来实现逻辑。但是Objc的原生类方法声明实现风格和C++书写风格迥异。</p><p>经过测试，Objc的文件也可以直接使用C++头文件中的类以及声明的函数，只需要在编译时选定它为Objc++的类型。</p><p>甚至stl容器都能支持Objc的对象和数据类型，给人一种诡异的感觉：<em><strong><s>就好像甜咸豆腐脑混在一起，蜜枣粽里面夹肉</s></strong></em>；</p><h4 id="_2023-10-12-object-c-block-objc版本的lambda表达式-block作返回值" tabindex="-1"><a class="header-anchor" href="#_2023-10-12-object-c-block-objc版本的lambda表达式-block作返回值" aria-hidden="true">#</a> 2023.10.12 Object-C Block，Objc版本的lambda表达式？block作返回值</h4><div class="language-objc line-numbers-mode" data-ext="objc"><pre class="language-objc"><code><span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">^</span>SeleFunc<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">@interface</span> OCTest<span class="token punctuation">:</span>NSObject
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">^</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span>selectfunc<span class="token punctuation">;</span>
<span class="token keyword">@end</span>

<span class="token keyword">@implementation</span> OCTest

<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">^</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span>selectfunc<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">^</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@&quot;MyTest : %d \\n&quot;</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">@end</span>
<span class="token keyword">int</span> <span class="token function">testblock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* my first program in Objective-C */</span>
    OCTest <span class="token operator">*</span>ocTest <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>OCTest alloc<span class="token punctuation">]</span>init<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">//[sampleClass sampleMethod];</span>
    <span class="token punctuation">[</span>ocTest selectfunc<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    SeleFunc blk <span class="token operator">=</span> <span class="token punctuation">[</span>ocTest selectfunc<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">blk</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code> (void (^)(int))</code> 这个就是<code>selectfunc</code>的返回值，表示返回值是一个返回值为void类型，参数为int的block（<s>是不是很绕，编程本质上就是套娃</s>）。在<code>[ocTest selectfunc]</code>这一步获得这个<code>block</code>以后，我们就可以直接执行它（<s>好像没有什么意义</s>），或者声明一对应个<code>block</code>类型的变量多次的执行它。</p><p><code>block</code>在形式上很像<code>C++</code>的<code>lambda</code>表达式，但或许功能上更接近函数指针。</p><h4 id="_2023-10-12-13-object-c底层研究" tabindex="-1"><a class="header-anchor" href="#_2023-10-12-13-object-c底层研究" aria-hidden="true">#</a> 2023.10.12 - 13 Object-C底层研究</h4>`,14),d={href:"https://cloud.tencent.com/developer/article/1136783",target:"_blank",rel:"noopener noreferrer"},r={href:"https://juejin.cn/post/6844904024659984391#heading-20",target:"_blank",rel:"noopener noreferrer"},k={href:"https://draveness.me/autoreleasepool/",target:"_blank",rel:"noopener noreferrer"},v=t('<p><code>xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc 文件名 -o 输出的CPP文件</code>在根目录用命令行可以将Objc文件编译成Cpp文件，除了最基本的实现，整个代码3MB多，整整5w多行。所以大概率Objc编译多过程中是不会间接生成cpp代码的。</p><ul><li>从展开代码可以看出OC的对象、类都是基于C/C++当中结构体实现的</li><li>所有类的对象共享一个Class指针地址，每个类在内存中有且只有一个Class对象【前置：<code>Objc</code>内存中类的存在也是一个对象的重要发言】</li><li>对于一个【类的实例<code>instance】，熟悉它在内存中存储一个</code>isa`指针指向它【类的对象】，以及其它<strong>成员变量</strong>的值 <ul><li>【类的对象】和【元类】共同构成【类】在代码中的概念实现</li></ul></li><li>对于一个【类的对象<code>class</code>】，其<code>isa</code>指针又指向了其【元类】，一个<code>superclass</code>父类指针，以及<strong>类的属性</strong>、对象方法、成员方法、成员变量）</li><li>对于一个【元类<code>meta-class</code>】也有自己的isa（看图应该是指向基类的元类，最后是自己），一个<code>superclass</code>指向父类的<code>meta-class</code><ul><li>基类的<code>meta-class</code>的<code>superclass</code>指针指向基类的<code>class</code>(<s>再次应验了编程本质套娃</s>)</li></ul></li><li><code>instance</code>调用对象方法的轨迹 <ul><li><code>isa</code>找到<code>class</code>，方法不存在，就通过s<code>uperclass</code>找父类</li></ul></li><li><code>class</code>调用类方法的轨迹 <ul><li><code>isa</code>找<code>meta-class</code>，方法不存在，就通过<code>superclass</code>找父类</li></ul></li></ul><h4 id="类的属性与成员变量" tabindex="-1"><a class="header-anchor" href="#类的属性与成员变量" aria-hidden="true">#</a> 类的属性与成员变量</h4><p>这个是<code>Objc</code>的一个独特的变量管理策略。</p><ul><li>类的【成员变量】提供给类内部访问，当外部想要访问时，只能通过<code>-&gt;</code>访问<code>@public</code>的成员变量 <ul><li>对于<code>.h</code>文件 <ul><li>对于<code>@interface在花括号中声明的变量默认访问权限为</code>@protected`</li><li>对于<code>@implementation在花括号中声明的变量默认访问权限为</code>@private`</li></ul></li><li>对于<code>.m</code>文件，都是无法外部访问的</li></ul></li><li>类的【属性】提供给类外部使用，可以使用点表达式访问 <ul><li>属性自带原子性</li><li>自带<code>getter</code>和<code>setter</code>方法</li></ul></li></ul><h4 id="tagged-pointer-——-一种假指针" tabindex="-1"><a class="header-anchor" href="#tagged-pointer-——-一种假指针" aria-hidden="true">#</a> Tagged Pointer —— 一种假指针</h4><p><code>Tagged Pointer</code>是一种很神奇的存在，其在代码中虽然表现为正常的一个指针类型的变量，但是实际上其存储的内容不再是对应内容的地址，而是对应内容的本身。</p><ul><li>也就是说，如果指针将要存储的内容可以由8个字节【指针变量原本的大小】承载，那么编译器会将这部分内容存储到指针变量当中</li><li>体现在多线程上，则是每次修改其内容并不需要考虑申请与释放，因为它通过一条指令就可以直接被修改而没有中间过程</li></ul>',8);function m(b,h){const a=o("ExternalLinkIcon");return p(),l("div",null,[u,s("p",null,[n("看了几篇文章"),s("a",d,[n("Objective-C的本质"),e(a)]),n("、"),s("a",r,[n("OC对象的前世今生"),e(a)]),n("、 "),s("a",k,[n("自动释放池"),e(a)])]),v])}const _=c(i,[["render",m],["__file","Object-C学习日记.html.vue"]]);export{_ as default};
